import { Component, Vue, Watch } from 'vue-property-decorator'
import { Route } from 'vue-router'
import { Dictionary } from 'vuex'
import { Form as ElForm, Input,Message} from 'element-ui'
import { UserModule } from '@/store/modules/user'
import SocialSign from './components/SocialSignin.vue'
import i18n from '@/lang'
import { mixins } from 'vue-class-component'
import baseMixin from '@/mixins/baseMixin'
import {passwordEncrypt} from '@/utils/password'

@Component({
  name: 'Login',
  components: {
    SocialSign
  }
})

export default class extends mixins (baseMixin) {
  private companyName = '';
  private loginForm = {
    companyCode:'XHZQ',
    userCode: 'admin',
    password: '123456',
    companyId:'15'
  }

  private loginRules = {
    companyCode:[{required: true, message:i18n.t('login.error_companyCodeIsNull'), trigger: 'blur' }],
    userCode: [{required: true, message:i18n.t('login.error_userCodeIsNull'), trigger: 'blur' }],
    password: [{required: true, message:i18n.t('login.error_passwordIsNull'), trigger: 'blur' }],
    companyId:[{required: true, message:i18n.t('login.error_companyCodeIsNull'), trigger: 'blur' }]
  }
  private passwordType = 'password'
  private loading = false
  private showDialog = false
  private redirect?: string
  private otherQuery: Dictionary<string> = {}



  @Watch('$route', { immediate: true })
  private onRouteChange(route: Route) {
    // TODO: remove the "as Dictionary<string>" hack after v4 release for vue-router
    // See https://github.com/vuejs/vue-router/pull/2050 for details
    const query = route.query as Dictionary<string>
    if (query) {
      this.redirect = query.redirect
      this.otherQuery = this.getOtherQuery(query)
    }
  }

  mounted() {
    if (this.loginForm.userCode === '') {
      (this.$refs.userCode as Input).focus()
    } else if (this.loginForm.password === '') {
      (this.$refs.password as Input).focus()
    }
  }

  private showPwd() {
    if (this.passwordType === 'password') {
      this.passwordType = ''
    } else {
      this.passwordType = 'password'
    }
    this.$nextTick(() => {
      (this.$refs.password as Input).focus()
    })
  }

  private handleLogin() {
     (this.$refs.loginForm as ElForm).validate(async(valid: boolean) => {
      if (valid) {
        this.loading = true
        let loginSubmitForm = JSON.parse(JSON.stringify(this.loginForm));
        loginSubmitForm.password = passwordEncrypt(this.loginForm.userCode,this.loginForm.password);
         UserModule.loginAction(loginSubmitForm).then(res=>{
           //登陆成功跳转
           this.$router.push({
             path:'/',
             query: this.otherQuery
           })

         }).catch((e)=>{
           this.$message.error(this.getMessage(e));
         })
        /*
        // Just to simulate the time of the request
        setTimeout(() => {
          this.loading = false
        }, 0.5 * 1000) */
      } else {
        return false
      }
    })
  }

  private getUserCompany(){
    if(this.loginForm.companyCode != ''){
      UserModule.userCompanyByCodeAction(this.loginForm.companyCode).then((res:any)=>{
        this.companyName = res.companyName;
        this.loginForm.companyId = res.id;
      }).catch((e)=>{
        this.$message.error(this.getMessage(e));
      })
    }
  }

  private getOtherQuery(query: Dictionary<string>) {
    return Object.keys(query).reduce((acc, cur) => {
      if (cur !== 'redirect') {
        acc[cur] = query[cur]
      }
      return acc
    }, {} as Dictionary<string>)
  }
}
