/**
 * @name mixin
 * @description 所有.vue 公共方法
 * @action .vue 中 添加mixin:[name]
 * 
 */

import config from '@/config'
export default {
    name:'mixin-base',
    data() {
        return {
        }
    },
    computed:{
        // 默认 选中菜单
         currentSelected(){
             return this.$store.state.app.currentTopMenu
         },
        // 顶部选中子菜单
        currentSelectedSubMenu() {
            return this.$store.state.app.currentSubMenu;
        },
          // 当前页面--放在MIXIN
         currentCurrentPage(){
             return this.$store.state.app.currentPage
         }
    },
    methods: {
        // 监控页面刷新事件
        beforeunloadHandler (e) {
           // debugger
          console.log('=========beforeunloadHandler==========')
          
          //this.turnToHome()
        },
        turnToHome(uniqueKey){
            if(uniqueKey=='' || uniqueKey==0 ){
                //debugger
              
                this.setGoHome()
            }
        },
        setGoHome(){
            this.$store.commit('setCurrentPage','home')
            this.$router.push({name:'_home'})
            this.$store.commit('setCurrentTopMenu','')
        },
        handleMenuBaseEvent(menuObj){
            debugger
            let params = {
              type:menuObj.menuName,
              page: menuObj.page, //显示控件页面
              uniqueKey: menuObj.uniqueKey,
              lable: menuObj.lable,
              isActive: true
            };
            //判断是否已经存在,不要重复添加菜单
            let isExist = false;
            let currentOperateMenu = this.currentSelectedSubMenu[menuObj.menuName];
            if (this.currentSelectedSubMenu && currentOperateMenu.length > 0) {
              currentOperateMenu.forEach(item => {
                item.isActive = false; //重置其它菜单为 未选中
                if (item.uniqueKey == params.uniqueKey) {
                  isExist = true;
                  item.isActive = true; // 当前的设置为 TRUE
                }
              });
            }
      
            // 不存在则添加 子页面
            if (!isExist) {
              currentOperateMenu = Object.assign(
                currentOperateMenu,
                currentOperateMenu.push(params)
              );
            }
            let menuConfig = {
                  isNew:!isExist,
                  topMenu:params.type,
                  subMenu:params.uniqueKey, 
              }
            this.$store.commit('setOperationConfig', menuConfig)
            this.$store.commit("setCurrentSubMenu", this.currentSelectedSubMenu);
            //打开指定页面
            this.$emit("openSubMenu", params);
          }
    },
    mounted(){
      window.addEventListener('beforeunload', e => this.beforeunloadHandler(e))
      //console.log('=====mixins mounted=======')
      
    },
    destroyed() {
        window.removeEventListener('beforeunload', e => this.beforeunloadHandler(e))
    },created(){
      this.$Message.config({
          top: 100,
          duration: 3
      });
    }

}