<template>

  <div class="edit-table" ref="editTable" >
    <v-contextmenu ref="contextmenu">
                      <div v-show="showContextMenu">
                            <v-contextmenu-item @click="insertEvent">插入</v-contextmenu-item>
                            <v-contextmenu-item @click="menuEdit" v-if="showEditMenu">编辑</v-contextmenu-item>
                            <v-contextmenu-item @click="deleteEvent">删除</v-contextmenu-item>
                            <v-contextmenu-item @click="menuUpdata">增加</v-contextmenu-item>
                      </div>
     </v-contextmenu>
    <div class="ivu-table-wrapper" v-contextmenu:contextmenu>
      <div class="ivu-table ivu-table-small ivu-table-border ivu-table-with-fixed-top">
        <div class="ivu-table-header">
          <div :style="{display:'flex',overflow:'auto',height:height+'px'}" ref="tables">
            <div>
              <table
                cellspacing="0"
                cellpadding="0"
                border="0"
                :style="{width:'50px','z-index':7,'position':'absolute'}"
              >
                <thead ref="tableIndexHead">
                  <tr>
                    <th
                      class="ivu-table-column-center"
                      :style="{height:headRowCount*25+'px !important'}"
                    >
                      <div class="ivu-table-cell">
                        <span class>行号</span>
                      </div>
                    </th>
                  </tr>
                </thead>
              </table>
              <table
                ref="tableIndex"
                cellspacing="0"
                cellpadding="0"
                border="0"
                :style="{'padding-top':headRowCount*25+'px',width:'50px','z-index':6,position:'absolute'}"
              >
                <tbody>
                  <tr
                    v-for="(item,index) in cloneData"
                    :tabindex="index"
                    @click="rowClick(index,'row-click')"
                    @dblclick="rowClick(index,'row-dbClick')"
                    :class="{'edit-row-bg':editIndex == index}"
                    :key="index"
                    style="line-height: 10px;                                        "
                  >
                    <!-- <rightMenu
                      :showContextMenu="showContextMenu"
                      :showEdit="showEditMenu"
                      :style="{height:'24px'}"
                      :row_index="index"
                      @menu-edit="menuEdit"
                      @menu-delete="menuDelete"
                      @menu-insert="menuInsert"
                      @menu-updata="menuUpdata"
                    >
                      <td width="50" style="height:25px;text-align:center;width:50px;">{{index+1}}</td>
                    </rightMenu> -->
                     <td width="50" style="height:25px;text-align:center;width:50px;">{{index+1}}</td>
                  </tr>
                </tbody>
              </table>
            </div>

            <div :style="{'padding-left':'50px'}">
              <table
                ref="tableHead"
                cellspacing="0"
                cellpadding="0"
                border="0"
                :style="{position:'absolute','z-index':5,width:tableWidth+'px'}"
              >
                <colgroup
                  v-for="(cols,index1) in columnGroup"
                  :key="index1"
                  :span="cols.colspan"
                  :width="cols.width"
                >
                  <col
                    v-if="cols.children"
                    v-for="(col,index2) in cols.children"
                    :width="col.width"
                    :key="index2"
                  />
                </colgroup>
                <thead ref="head">
                  <slot name="head"></slot>
                </thead>
              </table>
              <!-- <rightMenu
                :showContextMenu="showContextMenu"
                :showEdit="showEditMenu"
                :style="{height:'24px'}"
                :row_index="rowTableIndex"
                @menu-edit="menuEdit"
                @menu-delete="menuDelete"
                @menu-insert="menuInsert"
                @menu-updata="menuUpdata"
              > -->
                <table
                  ref="tableBody"
                  cellspacing="0"
                  cellpadding="0"
                  context-menu
                  show-context-menu
                  border="0"
                  :style="{width:tableWidth+'px','padding-top':headRowCount*25+'px'}"
                >
                  <colgroup
                    v-for="(cols,index1) in columnGroup"
                    :key="index1"
                    :span="cols.colspan"
                    :width="cols.width"
                  >
                    <col
                      v-if="cols.children"
                      v-for="(col,index2) in cols.children"
                      :width="col.width"
                      :key="index2"
                    />
                  </colgroup>
                  <tbody>
                    <tr
                      v-for="(item,index) in cloneData"
                      @click="rowClick(index,'row-click')"
                      @dblclick="rowClick(index,'row-dbClick')"
                      @contextmenu="handleContextMenu(index)"
                      :key="index"
                      :class="{'edit-row-bg':editIndex == index}"
                    >
                      <slot
                        name="body"
                        :row="item"
                        :index="index"
                        :tableColTiggerEvent="tableColTiggerEvent"
                        :valueChangeAssign="valueChangeAssign"
                        :rows="cloneData"
                      ></slot>
                    </tr>
                  </tbody>
                </table>
              <!-- </rightMenu> -->
            </div>
          </div>
        </div>
      </div>
    </div>
   
  </div>
</template>

<script>
/**
    编辑页面简单table封装
    */
import AsyncValidator from "async-validator";
import { parentNode, childNode, getElementIsDR } from "../../utils/dom.js";
import rightMenu from "./right-menu";
export default {
  name: "eTable",
  components: {
    rightMenu
  },
  data() {
    return {
      rowTableIndex:0,
      modifyKey: "", // 当前修改KEY
      direction: {
        left: "l",
        right: "r",
        up: "u",
        down: "d"
      },
      editIndex: -1, // 默认不选中
      addRowLength: 1,
      cloneData: [],
      dataChangeMark: {
        // 保存数据改变的信息
        count: 0,
        data: {}
      },
      dataCategorize: {
        // 数据分类
        addList: [], // 添加的数据
        updateList: [], // 修改的数据
        deleteList: [] // 删除的数据
      },
      updateCategorizeMark: {
        // 更新分类
      },
      errorInfo: [],
      errorMark: false,
      headRowCount: 1,
      tableWidth: 100,
      columnGroup: [],
      eventIsInit: false, // 事件是否初始化
      shiftIsLongPress: false, // shift 是否被长按
      ctrlIsLongPress: false, // ctrl是否被长按
      mulDelete: {
        // 多选删除
        previousEditIndex: -1, // 上一次选中的表格下标
        excludeSelectedIndex: [] // 多选排除的下标
      }
    };
  },
  props: {
    // 是否屏蔽插入功能,当回车最后一个空格为空时
    disabledAddRowWhenfocusNull: {
      type: Boolean,
      default: false
    },
    // 是否屏蔽插入功能,只显示按钮的回调功能
    rowInsertDisable: {
      type: Boolean,
      default: false
    },
    showContextMenu: {
      type: Boolean,
      default: true
    },
    // 是否显示编辑项 add by andy
    showEditMenu: {
      type: Boolean,
      default: false
    },
    data: Array,
    height: {
      type: Number,
      default: 200
    },
    width: Number,
    colStart: {
      // 列起始位置
      type: Number,
      default: 0
    },
    tableEvent: {
      // 是否启用table事件
      type: Boolean,
      default: () => {
        return true;
      }
    },
    rowInitData: {
      type: Object,
      default: () => {
        return {};
      }
    },
    copyPreviousRow: {
      // 新增行内容来源与上一行内容
      type: Boolean,
      default: false
    },
    copyPreviousExclude: {
      // copy需要排除字段
      type: Array,
      default: function() {
        return [];
      }
    },
    deleteValidator: Function,
    unqiueMark: String, // 唯一标识
    rowSpan: {
      type: Number,
      default: 1
    },
    rules: {
      // 校验规则
      type: Object,
      default: () => {
        return {};
      }
    },
    masterSlaveData: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    insertDirection: {
      type: String,
      default: "up"
    }
  },
  computed: {
    changeMark() {
      return this.dataChangeMark.count;
    }
  },
  watch: {
    cloneData: {
      handler(newValue, oldValue) {
        this.$emit("update:data", newValue);
        this.$emit("on-table-change", newValue);
      },
      deep: true
    },
    data: {
      handler(newValue, oldValue) {
        if (newValue) {
          if (this.masterSlaveData) {
            newValue = this.getMasterData(newValue);
          }
          this.cloneData = newValue;
          if (newValue.length == 0) {
            this.addRow();
          }
        }
      },
      deep: true
    },
    changeMark: function(n, o) {
      // debugger;
      this.$set(
        this.cloneData[this.dataChangeMark.data.index],
        this.dataChangeMark.data.key,
        this.dataChangeMark.data.value
      );
      let data = this.dataChangeMark.data.row; // 一行的数据
      if (
        this.unqiueMark &&
        data[this.unqiueMark] &&
        data[this.unqiueMark] != null &&
        data[this.unqiueMark] != ""
      ) {
        // 更新
        // 得到数据的唯一标识，一般是主键ID，其实
        let mark = data[this.unqiueMark];
        /*
          let temp = {};
          //updateCategorizeMark 存放着，修改数据的记录
          //不存在这个标记,说明还没有被修改过,所以初始化一个数组，然后添加数据
          if (!this.updateCategorizeMark[mark]) {
            this.updateCategorizeMark[mark] = [];
          }
          //temp["id"] = data.id;
          temp[this.unqiueMark] = mark;
          temp[this.dataChangeMark.data.key] = this.dataChangeMark.data.value;
          //每次数据变化都存放到数组中，最终组合出，所有被修改的数据
          //this.updateCategorizeMark[mark].push(temp); */
        // 在后台处理数据的过程中，需要用到其它的数据，所以直接保留被修改数据的一整行
        this.updateCategorizeMark[mark] = data;
      }
      this.$emit("on-row-change", this.dataChangeMark.data);
    },
    errorInfo: {
      handler(newValue, oldValue) {
        if (newValue.length > 0) {
          this.$Message.error(newValue[0]);
        }
      },
      deep: true
    },
    rowInitData: {
      deep: true,
      handler(n, o) {
        //debugger
        if (!(this.data && this.data.length > 0) && Object.keys(n).length > 0) {
          this.addRow();
        }
      }
    }
  },
  created() {
    // debugger
    if (this.data && this.data.length > 0) {
      if (this.masterSlaveData) {
        this.cloneData = this.getMasterData(this.data);
      } else {
        this.cloneData = this.data;
      }
    } else {
      this.addRow();
    }
  },
  methods: {
    
    handleContextMenu(index) {
      this.rowTableIndex = index
    },
    // 单元格修改触发事件 回传参数 当前从表行row.index add by andy
    tableColTiggerEvent(row, column, index, event, config) {
      let params = {
        row,
        column,
        index,
        event,
        config
      };
      this.$emit("tableColTiggerEventCall", params);
    },
    addRow() {
      // 添加一行
      // debugger;
      if (this.disabled) {
        return;
      }
      // if(this.rowInitData){
      //debugger
      if (Object.keys(this.rowInitData).length > 0) {
        // debugger
        for (let i = 0; i < this.addRowLength; i++) {
          this.cloneData.push(JSON.parse(JSON.stringify(this.rowInitData)));
        }
      } else {
        // this.$Message.warning('表单编辑提示:rowInitData为空');
      }
      // }
    },
    tableEventInit() {
      // table事件初始化
      this.$refs.editTable.addEventListener("keydown", event => {
        if (!event.ctrlKey && event.keyCode == 37) {
          // 左
          this.setTransverseFocus(event.target, this.direction.left);
        }
        if (event.keyCode == 38) {
          // 上
          this.setVerticalFocus(event.target, this.direction.up);
        }
        if (!event.ctrlKey && event.keyCode == 39) {
          // 右
          this.setTransverseFocus(event.target, this.direction.right);
        }

        if (event.keyCode == 40) {
          // 下
          this.setVerticalFocus(event.target, this.direction.down);
        }

        if (event.keyCode == 13) {
          // enter
          this.setEnterFocus(event.target);
          event.preventDefault();
        }
        if (event.ctrlKey && event.keyCode == 46) {
          // delete
          this.deleteEvent();
        }
        if (event.keyCode == 45) {
          // insert
          this.insertEvent();
        }
        if (event.keyCode == 16) {
          this.shiftIsLongPress = true;
        }

        if (event.keyCode == 17) {
          this.ctrlIsLongPress = true;
        }
      });
      // shiftIsLongPress
      this.$refs.editTable.addEventListener("keyup", event => {
        if (event.keyCode == 16) {
          this.shiftIsLongPress = false;
        }

        if (event.keyCode == 17) {
          this.ctrlIsLongPress = false;
        }
      });
    },

    deleteEvent() {
      // 快捷键删除行
      if (this.editIndex >= 0) {
        this.menuDelete(this.editIndex);
      }
    },
    insertEvent() {
      if (this.editIndex >= 0) {
        this.menuInsert(this.editIndex);
      }
    },
    setTransverseFocus(target, direction) {
      // 设置横向焦点
      let parentOfTd = parentNode("td", target) || target;
      if (parentOfTd != null) {
        let focusTd = null;
        if (direction == this.direction.left) {
          focusTd = parentOfTd.previousElementSibling;
        } else if (direction == this.direction.right) {
          focusTd = parentOfTd.nextElementSibling;
        }
        this.setTdFocus(focusTd, direction);
      }
    },
    setVerticalFocus(target, direction, toFirst) {
      // 纵向移动
      if (direction == this.direction.up && this.editIndex <= 0) {
        return;
      }
      if (
        target.parentNode.className.indexOf("select") != -1 ||
        target.tagName == "SELECT"
      ) {
        return;
      }
      let parentOfTd = parentNode("td", target);
      let parentOfTr = parentNode("tr", parentOfTd);
      let focusTr = null;
      if (direction == this.direction.up) {
        this.editIndex = parentOfTr.sectionRowIndex - 1;
        focusTr = parentOfTr.previousElementSibling;
      } else if (direction == this.direction.down) {
        focusTr = parentOfTr.nextElementSibling;
        if (focusTr == null) {
          if (this.disabledAddRowWhenfocusNull) {
            return;
          }
          this.addRow();
          this.emitRowInsert(this.editIndex + 1);
        } else {
          this.editIndex = parentOfTr.sectionRowIndex + 1;
        }
      }
      if (focusTr == null || focusTr.children.length == 0) {
        return;
      }
      let tdIndex = parentOfTd.cellIndex;
      if (toFirst) {
        tdIndex = this.colStart;
      }
      this.$nextTick(() => {
        this.setTdFocus(focusTr.children[tdIndex], this.direction.right);
      });
    },
    setTdFocus(tdTarget, direction) {
      // debugger;
      if (tdTarget != null) {
        let inputNode =
          childNode("input", tdTarget) || childNode("select", tdTarget);
        if (inputNode != null && getElementIsDR(inputNode[0])) {
          this.setTransverseFocus(inputNode[0], direction);
        } else if (inputNode != null) {
          let node = inputNode[0];
          if (node.getAttribute("type") == "hidden") {
            node = node.parentNode;
          }
          node.focus();
          try {
            node.select();
          } catch (e) {}
        } else {
          // 这行可能是空列
          this.setTransverseFocus(tdTarget, direction);
        }
      }
    },
    setEnterFocus(target) {
      let parentOfTd = parentNode("td", target);
      if (parentOfTd != null) {
        let focusTd = parentOfTd.nextElementSibling;
        if (focusTd == null) {
          this.setVerticalFocus(target, this.direction.down, true);
        } else {
          this.setTdFocus(focusTd, this.direction.right);
        }
      }
    },
    focusInit() {
      // 焦点初始化 默认为1行一列
      let rows = this.$refs.tableBody.rows;
      if (rows.length == 0) {
        return;
      }
      this.editIndex = 0;
      this.$nextTick(() => {
        this.setTdFocus(rows[0].children[this.colStart], this.direction.right);
      });
    },
    set(item, index) {
      //设置表格数据
      let replaceData;
      let pushData = [];
      if (Array.isArray(item)) {
        if (index >= 0 && item.length > 0) {
          replaceData = Object.assign(JSON.parse(JSON.stringify(item.shift())));
          pushData = item;
        } else {
          pushData = item;
        }
      } else {
        if (index >= 0) {
          if (this.cloneData.length < index + 1) {
            this.insertRow(index);
          }
          replaceData = Object.assign(this.cloneData[index], item);
        } else {
          pushData.push(item);
        }
      }
      if (replaceData) {
        this.$set(this.cloneData, index, replaceData);
        // set不触发@input事件，强制处理
        let keys = Object.keys(item);
        for (let i = 0; i < keys.length; i++) {
          this.valueChangeAssign(
            item[keys[i]],
            index,
            this.cloneData[index],
            keys[i]
          );
        }
      }
      if (pushData && pushData.length > 0) {
        this.cloneData = this.cloneData.concat(...pushData);
      }
    },
    delete(index) {
      if (index >= 0 && index < this.cloneData.length) {
        // 修复删除 临时添加的数据
        let curItem = this.cloneData[index]
        if(curItem.id!='' && curItem.id!=null && Number(curItem.id)>1000){
           this.pushDeleteData(
            index,
            JSON.parse(JSON.stringify(this.cloneData[index]))
          );
        }
        this.cloneData.splice(index, 1);
      }
    },
    deleteRow(index) {
      this.delete(index);
    },
    // 一次性删除所有,仅仅添加删除deleteList记录,不做数据删除,界面数据请直接赋值为[]即可  add by andy 20200508
    deleteAllData(){
      let _self = this
      if(this.cloneData && this.cloneData.length>0){
          _self.cloneData.forEach((item,index)=>{
         _self.pushDeleteData(index,JSON.parse(JSON.stringify(_self.cloneData[index]))
        )
      })
      }
    },
    insertRow(index) {
      //  debugger
      let initData = {};
      if (this.copyPreviousRow && index > 0) {
        // copy上一行
        initData = JSON.prase(JSON.stringify(this.cloneData[index - 1]));
        for (let i = 0; i < this.copyPreviousExclude.length; i++) {
          // 删除排除字段
          let deleteParam = this.copyPreviousExclude[i];
          delete initData[deleteParam];
        }
      } else {
        initData = JSON.parse(JSON.stringify(this.rowInitData));
      }
      if (this.insertDirection == "down") {
        index = index + 1;
      }
      this.cloneData.splice(index, 0, initData);
    },
    replace(items) {
      this.cloneData = items;
    },
    reset() {
      //debugger
      this.cloneData = [];
      this.dataCategorize.addList = [];
      this.dataCategorize.updateList = [];
      this.dataCategorize.deleteList = [];
      this.updateCategorizeMark = {};
      this.addRow();
    },
    pushDeleteData(index, data) {
      // dataCategorize
      // 删除判断是否是新增的
      if (
        this.unqiueMark &&
        data[this.unqiueMark] != null &&
        data[this.unqiueMark] != ""
      ) {
        // 这说明是对已有的数据删除，保存下来
        this.dataCategorize.deleteList.push(data);
      }
    },
    get() {
      if (this.cloneData) {
        return this.cloneData;
      }
      return [];
    },
    // //强制更新获取修改数据 add by andy 20200409
    forceUpdateGet() {
      let forceUpdateGetList = [];
      if (this.cloneData) {
        forceUpdateGetList = JSON.parse(JSON.stringify(this.cloneData));
        let data = this.getCategorizeData();
        let editDataList = this.getTableEditData();
        if (
          editDataList == null ||
          editDataList.length == 0 ||
          editDataList.length < this.cloneData.length
        ) {
          data.deleteList.forEach(item => {
            item["hasDelete"] = true;
            forceUpdateGetList.push(item);
          });
          return forceUpdateGetList;
        } else {
          return editDataList;
        }
      }
      return [];
    },
    getCategorizeData() {
      let _self = this;
      // 找到是添加的数据
      if (!_self.unqiueMark) {
        console.error("没有unqiueMark标识");
        return [];
      }
      _self.dataCategorize.addList = [];
      _self.dataCategorize.updateList = [];
      // 主键没有值的，就是添加，这个好理解
      _self.cloneData.forEach(item => {
        let isUpdate =
          item[_self.unqiueMark] &&
          item[_self.unqiueMark] != null &&
          item[_self.unqiueMark] != "";
        if (!isUpdate && Object.keys(item).length > 0) {
          // 添加
          _self.dataCategorize.addList.push(item);
        }
      });
      // 更新的数据 updateCategorizeMark==>cloneData 修改缓存上次的数据
      Object.values(_self.updateCategorizeMark).forEach(item => {
        /* let updateObj = {};
          for (let i = 0; i < item.length; i++) {
            Object.assign(updateObj, item[i]);
          }
          if (Object.keys(updateObj).length > 0) {
            this.dataCategorize.updateList.push(updateObj);
          } */
        _self.dataCategorize.updateList.push(item);
        //  if (_self.checkCurPageDataExist(item)) {
        //      _self.dataCategorize.updateList.push(item)
        //  }
      });
      // let returnData = JSON.parse(JSON.stringify());
      return _self.dataCategorize;
    },
    // 检查当前数据是否存在
    checkCurPageDataExist(val) {
      let isExist = false;
      this.cloneData.forEach(item => {
        if (item[this.modifyKey] == val[this.modifyKey]) {
          isExist = true;
        }
      });
      return isExist;
    },
    getTableEditData() {
      // 获取表格编辑的数据
      // 将之前的add update delete 合并为一个数据
      let data = this.getCategorizeData();
      let editData = data.addList.concat(data.updateList);
      // 需要对删除的数据，打上标识
      data.deleteList.forEach(item => {
        item["hasDelete"] = true;
        editData.push(item);
      });
      return editData;
    },
    valueChangeAssign(value, index, row, key, type) {
      /* if (value ===''){
        this.valueChangeValidator(key, value, index);
        return
      } */
      this.modifyKey = key;
      let oldValue = row[key];
      row[key] = value;
      let validatorData = {};
      let data = {
        index: index,
        row: row,
        oldValue: oldValue,
        key: key,
        value: value
      };
      if (
        this.dataChangeMark.data &&
        this.dataChangeMark.data.key == data.key &&
        this.dataChangeMark.data.value != data.value
      ) {
        this.valueChangeValidator(key, value, index, type);
      }
      this.dataChangeMark.data = data;
      this.dataChangeMark.count++;
    },
    valueChangeValidator(key, value, rowIndex, type) {
      if (this.rules[key]) {
        let rule = {};
        rule[key] = this.rules[key];

        let validator = new AsyncValidator(rule);
        let valueItem = {};
        valueItem[key] = this.convertDataByType(value, type);
        validator.validate(valueItem, (errors, fields) => {
          this.errorMark = errors && errors.length > 0;
          if (this.errorMark) {
            this.$Message.error(errors[0].message);
          }
        });
      }
    },
    validate() {
      // debugger;
      if (Object.keys(this.rules).length > 0) {
        let validator = new AsyncValidator(this.rules);
        for (let i = 0; i < this.cloneData.length; i++) {
          validator.validate(this.cloneData[i], (errors, fields) => {
            let errorsItem = {};
            this.errorInfo = [];
            this.errorMark = errors && errors.length > 0;
            if (this.errorMark) {
              errors.forEach(({ message, field }) => {
                errorsItem[field] = message;
                this.errorInfo.push(message);
              });
            }
            if (Object.keys(errorsItem).length > 0) {
            }
          });
          if (this.errorMark) {
            break;
          }
        }
      }
      return this.errorMark;
    },
    // 编辑功能,返回当前下表和当前选择行的ITEM数据
    menuEdit() {
      let rowData = JSON.parse(JSON.stringify(this.cloneData[ this.editIndex]));
      this.$emit("row-edit",  this.editIndex, rowData);
    },
    menuDelete(index) {
      let bakDeleteData = JSON.parse(JSON.stringify(this.cloneData[index]));
      let _self = this;
      if (this.deleteValidator) {
        this.deleteValidator(bakDeleteData, index, this.deleteRow).then(res => {
          if (res) {
            _self.deleteRow(index);
          }
        });
      } else {
        this.deleteRow(index);
      }
      this.$emit("row-delete", index, bakDeleteData);
    },
    //增加
    menuUpdata(index) {
      // debugger
      //明细表数据  this.cloneData
      //默认数据   this.rowInitData
      let _self = this;
      let initData = {};
      // if (index = _self.cloneData.length-1) {
      //   _self.insertDirection = 'down'
      //   _self.menuInsert(index)
      //   // _self.insertDirection = 'up'
      // } else {
      //   initData = JSON.parse(JSON.stringify(this.rowInitData));
      //   let index1 = _self.cloneData.length+1;
      //   _self.cloneData.splice(index1, 0, initData);
      // }
      initData = JSON.parse(JSON.stringify(this.rowInitData));
      let index1 = _self.cloneData.length + 1;
      _self.cloneData.splice(index1, 0, initData);
    },
    menuInsert(index) {
      if (this.rowInsertDisable) {
        this.$emit("row-insert", index);
        return;
      }
      this.insertRow(index);
      this.emitRowInsert(index);
      // this.$parent.$emit("row-insert",index);
    },
    setTableWidth() {
      let rows = [];
      let tableWidth = 0;
      for (let i = 0; i < this.$refs.head.children.length; i++) {
        let cells = this.$refs.head.children[i].cells; // 行中的所有列
        if (cells) {
          let cellsAry = [];
          for (let j = 0; j < cells.length; j++) {
            cellsAry.push(cells[j]);
          }
          rows.push(cellsAry);
        }
      }
      this.columnGroup = this.setTableWidth2(rows);
    },
    setTableWidth2(rows) {
      let columnGroup = [];
      let stopIndex = rows.length;
      if (stopIndex > 1) {
        stopIndex = stopIndex - 1;
      }
      for (let i = 0; i < stopIndex; i++) {
        let cells = rows[i];
        let endIndex = 0;
        for (let j = 0; j < cells.length; j++) {
          if (cells[j].style.display == "none") {
            // 列被隐藏 不计算
            continue;
          }
          if (cells[j].colSpan > 1) {
            let newRows = rows.slice(i + 1, rows.length);
            endIndex += cells[j].colSpan;
            newRows[0] = newRows[0].slice(
              endIndex - cells[j].colSpan,
              endIndex
            );
            let children = this.setTableWidth2(newRows);
            columnGroup.push({
              span: cells[j].colSpan,
              children: children
            });
          } else if (
            (cells[j].rowSpan == 1 && cells[j].colSpan == 1) ||
            (cells[j].rowSpan > 1 &&
              cells[j].rowSpan == this.$refs.head.children.length)
          ) {
            let width = 100;
            if (cells[j].width && cells[j].width != "") {
              width = cells[j].width;
            }
            columnGroup.push({
              width: width
            });
            this.tableWidth += Number(width);
          }
        }
      }
      return columnGroup;
    },
    // 行的点击事件，返回当前点击的row.index
    rowClick(index, eventName) {
      this.editIndex = index;
      let emitData = {};
      if (this.cloneData && this.cloneData.length > 0) {
        emitData = this.cloneData[index];
      }
      this.$emit(eventName, index, emitData);
    },
    emitRowInsert(index) {
      this.$emit("row-insert", index);
    },
    getMasterData() {
      let temp = [];
      this.data.forEach(item => {
        temp.push(item.master);
      });
      return temp;
    },
    convertDataByType(value, type) {
      if (value || value == null || value == "") {
        return value;
      }
      if (type) {
        if (type === "number") {
          try {
            return Number(value);
          } catch (e) {
            console.error("type类型为number,但其实不是");
          }
        }
      }
      return value;
    }
  },
  mounted() {
    let _self = this

    if (!this.disabled && !this.eventIsInit) {
      this.tableEventInit();
      this.eventIsInit = true;
    }

    this.$refs.tables.addEventListener("scroll", function(e) {
      _self.$refs.tableHead.style.left = 50 - e.target.scrollLeft + "px";
      _self.$refs.tableIndex.style.top = 0 - e.target.scrollTop + "px";
    });

    // 计算表格宽度
    this.setTableWidth();
    // 计算表头高度
    // this.$refs.tableHead.childElementCount
    this.headRowCount = this.$refs.head.childElementCount;
  }
};
</script>

<style>
.edit-table .ivu-table-small td {
  height: 23px;
}

.edit-table .ivu-table-cell {
  padding-left: 0;
  padding-right: 0;
}

.edit-table .ivu-input {
  border: 1px solid #fff;
  border-radius: 0;
  background-color: rgba(255, 255, 255, 0);
}

.edit-table .ivu-input-number-small {
  border-radius: 0;
  width: 100%;
  border: 1px solid #fff;
  background-color: rgba(255, 255, 255, 0);
}
.edit-table .ivu-input-number-small input {
  background-color: rgba(255, 255, 255, 0);
}

.edit-table .ivu-select-selection {
  background-color: rgba(255, 255, 255, 0);
  border: 1px solid #fff;
}

.edit-table .ivu-input:focus,
.ivu-select-selection-focused {
  border-color: #57a3f3;
  outline: 0;
  -webkit-box-shadow: 0 0 0 2px rgba(45, 140, 240, 0.2);
  box-shadow: 0 0 0 2px rgba(45, 140, 240, 0.2);
}

.edit-table .ivu-input:hover,
.ivu-input-number:hover,
.ivu-select-selection:hover {
  border-color: #57a3f3;
}

.edit-table .ivu-table tr:nth-child(2n) td {
  background-color: #f8f8f9;
}
.edit-table tr {
  outline: none;
}
.ivu-form-item-required .ivu-form-item-label:before {
  content: "*";
  display: inline-block;
  margin-right: 0px;
  line-height: 1;
  font-family: SimSun;
  font-size: 18px;
  color: #f30;
  font-weight: bold;
  margin-top: -4px;
}
/* 谷歌去掉type=number下面的箭头 */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none !important;
}
input[type="number"] {
  -moz-appearance: textfield;
}
</style>
