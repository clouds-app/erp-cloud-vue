<template>
  <div>
    <editWindow
      class="cl-edit-boxLibIn"
      :title="actionLableName"
      v-model="showWindow"
      :fullscreen="false"
      width="95%"
      :loading="!isLoaddingDone"
      :spinLoaddingText="spinLoaddingText"
      @on-ok="formTableDataSubmit()"
      v-if="initData.columns"
    >
      <Form
        ref="formDataInfo"
        :show-message="true"
        :model="formDataInfo.master"
        :rules="ruleValidate"
        :label-width="100"
      >
        <Row>
          <Col span="12">
            <Row>
              <Col span="12">
                <FormItem label="纸板入库单号" prop="biNo">
                  <Input disabled v-model="formDataInfo.master.biNo" maxlength="20" placeholder></Input>
                </FormItem>
              </Col>
              <Col span="12">
                <FormItem label="入库日期" prop="biDate">
                  <DatePicker
                    :clearable='false'
                    :editable='false'
                    :disabled="detailDisabled"
                    type="date"
                    format="yyyy-MM-dd"
                    v-model="formDataInfo.master.biDate"
                  ></DatePicker>
                </FormItem>
              </Col>
            </Row>
          </Col>
          <Col span="12">
            <Row>
              <Col span="12">
                <FormItem label="班别" prop="teamCode">
                  <div>
                    <!-- @on-fill="Initializationdata" -->
                    <popup
                      ref='firstFocusInput'
                      v-model="formDataInfo.master.teamCode"
                      field-name="teamCode"
                      :disabled="detailDisabled"
                      popup-name="TeamSingleBox"
                      :fill-model.sync="formDataInfo.master"
                      render-fields="bppClassId,teamCode,teamName"
                      from-fields="id,teamCode,teamName"
                      :suffix="true"
                      :suffix-model="formDataInfo.master.teamName"
                      :query-params="{}"
                    />
                  </div>
                </FormItem>
              </Col>
              <Col span="12">
                <FormItem label="仓位" prop="stationCode">
                  <div>
                    <!-- @on-fill="Initializationdata" -->
                    <popup
                      v-model="formDataInfo.master.stationCode"
                      field-name="stationCode"
                      :disabled="detailDisabled||action=='update'"
                      popup-name="WareHouseSingleBox"
                      :fill-model.sync="formDataInfo.master"
                      render-fields="stationId,stationCode,stationName"
                      from-fields="wareHouseItId,wsCode,wsName"
                      :suffix="true"
                      :suffix-model="formDataInfo.master.stationName"
                      :query-params="{whType:2}"
                    />
                  </div>
                </FormItem>
              </Col>
            </Row>
          </Col>
          <Col span="6">
            <FormItem label="入库数量" prop="inQty">
              <Input disabled v-model="formDataInfo.master.inQty" maxlength="20" placeholder></Input>
            </FormItem>
          </Col>
          <Col span="18">
            <FormItem label="备注">
              <Input
                :disabled="detailDisabled"
                v-model="formDataInfo.master.remark"
                maxlength="100"
                :autosize="{ minRows: 1, maxRows: 2 }"
                placeholder="请输入备注..."
              ></Input>
            </FormItem>
          </Col>
        </Row>
      </Form>

      <Tabs>
        <!--  注意:eTable formDataInfo.artLengs.defaultList  ===artLengs=== 需要根据实际接口修改,其它不变-->
        <TabPane label="纸箱成品入库明细表" name="name1">
          <eTable
            ref="tableFields"
            unqiue-mark="id"
            :index-menu="true"
            :col-start="0"
            :width="200"
            :height="400"
            :insertDirection="insertDirection"
            :row-init-data="initData.initData.stockboxlibinitemFm"
            :data.sync="formDataInfo.boxLibInItems.defaultList"
            :rules="tableFieldsValidator"
            :showContextMenu="!detailDisabled"
            v-if="showWindow"
          >
            <template slot="head">
              <tr
                v-for="(columnGroup,index) in initData.columns.stockboxlibinitemFm.editGroups"
                :key="index"
              >
                <th
                  class="ivu-table-column-left"
                  v-for="(column,index2) in columnGroup"
                  :key="index2"
                  :width="column.editWidth"
                  :colspan="column.colSpan"
                  :rowspan="column.rowSpan"
                  style="text-align:center;"
                >
                  <div class="ivu-table-cell">
                    <span class>{{column.title}}</span>
                  </div>
                </th>
              </tr>
            </template>

            <template slot="body" slot-scope="{ row, index, valueChangeAssign }">
              <td
                class="ivu-table-column-left"
                v-for="(column,columnIndex) in initData.columns.stockboxlibinitemFm.editColumns"
                :key="columnIndex"
                :width="column.editWidth"
              >
                <!--控件特殊处理 纸箱工单号  -->
                <Input
                  v-if="column.key == 'workNo'"
                  v-model="row[column.key]"
                  :disabled="detailDisabled||row['id']"
                  @on-blur="onFill(index)"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'workNo');
                      }
                    "
                  size="small"
                  :maxlength="20"
                >
                  <Icon @click="Slave_list_table_editRowModify(index)" slot="suffix" type="md-add" v-show="!(row['id'])"/><!--v-show="!(disworkNo[index])"-->
                </Input>
                <!--控件特殊处理 入库数量  -->
                <!-- <InputNumber  placeholder="运费" :min="0" v-model="formDataInfo.master.bdFeer"/> -->
                <Input
                  v-else-if="column.key == 'biInQty'"
                  v-model="row[column.key]"
                  :disabled="detailDisabled"
                  number
                  @on-blur="biInQtyChange(index)"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'biInQty');
                      }
                    "
                  size="small"
                  :maxlength="20"
                ></Input>
                <formControl
                  v-else
                  :control-type="column.controlType"
                  v-model="row[column.key]"
                  :disabled="detailDisabled||column.readOnly"
                  @input="value => {valueChangeAssign(value, index, row,column.key)}"
                ></formControl>
              </td>
            </template>
          </eTable>
        </TabPane>
      </Tabs>
    </editWindow>
    <boxLibInSlave
      ref="mychild"
      :isLoaddingDone="salveWindow.isLoaddingDone"
      :formDetailData="salveWindow.formDetailData"
      :action="salveWindow.action"
      v-model="salveWindow.showEditWindow"
      :workNoList="workNoList"
      :WorkOrderNumber="WorkOrderNumber"
      @closeMain="closeMain"
    />
      <!-- :whId="whId" -->
  </div>
</template>

<script>
/**
 * @desc edit-dept 描述
 * 所有重要 可以重用的方法 放在了基类,继承即可用重复使用 dyBaseMixins,
 * 可以根据需求重写所需的方法:
 *
 * @params 参数
 *
 * @return 返回
 *
 * @author Andy Huang
 *
 * @created 2019/11/20 17:07:54
 */
import referenceField from '@/components/referenceField/referenceField'
import popup from '@/components/popup/popup'
import editWindow from '@/components/edit-window/edit-window'
import eTable from '@/components/e-table/e-table'
import request from '@/libs/request'
import editBaseMixins from '../../mixins/edit'
import optionSearch from '../../components/optionSearch'
import dayjs from 'dayjs'
import Sys from '@/api/sys'
import formControl from '@/components/form-control/form-control'
import { deepCopy } from 'view-design/src/utils/assist'
import boxLibInSlave from './edit-boxLibInSlave'
const default_formDataInfo = {
  // 主表 更改字段
  master: {
    inQty: '',
    stationCode: '',
    stationId: '',
    stationName: '',
    teamCode: '',
    bppClassId: '',
    teamName: '',
    biNo: '',
    biDate: dayjs().format('YYYY-MM-DD HH:mm:ss'),
    remark: ''
  },
  // 子表 artLengs 根据实际接口更改,其它不变
  boxLibInItems: {
    addList: [], // 添加列
    defaultList: [], // 默认列
    deleteList: [], // 删除列
    updateList: [] // 更新列
  }
}
export default {
  name: 'edit-paperPrice',
  mixins: [editBaseMixins],
  components: {
    editWindow,
    optionSearch,
    boxLibInSlave,
    eTable,
    popup,
    formControl,
    referenceField
    // rightMenu
    // Form,
  },
  data () {
    return {
      insertDirection: 'down', // 表单插入方向
      salveWindow: {
        // Tips:"提示：此窗口只显示有供应商纸质/纸板进价的工单！",
        isLoaddingDone: false, // 窗口是否加载完成
        showEditWindow: false, // 是否显示edit-boxSalesOrderSlave 编辑窗口
        action: null, // 当前操作功能 添加/编辑
        formDetailData: {} // 当前表单的详细信息
      },
      pliLostTypeList: [], // 报损类型
      showContextMenu: true,
      showEditMenu: false,
      workNoList: null,
      actionSubtitle: '纸箱成品入库', // 当前操作副标题
      id: 0,
      disworkNo: [false], // 编辑时判断工单是否禁用
      formName: 'stockboxlibinitemFm',
      formmasterName: 'stockboxlibinFm',
      requestBaseUrl: '/stock/boxLibIn', // 请求 查询 操作的基础路径
      formDataInfo: deepCopy(default_formDataInfo), // 防止添加和更新数据提交发生冲突
      // 需要验证的数据
      ruleValidate: {
        teamCode: [
          {
            required: true,
            message: '班别不能为空',
            trigger: 'blur'
          }
        ],
        stationCode: [
          {
            required: true,
            message: '仓位不能为空',
            trigger: 'blur'
          }
        ]
      },
      tableFieldsValidator: {
        workNo: [
          {
            required: true,
            message: '纸箱工单号不能为空',
            trigger: 'blur'
          }
        ],
        biInQty: [/// ^[0-9]+(\.\d+)?$/;
          {
            required: true,
            message: '入库数量不能为空',
            trigger: 'blur',
            type: 'number'
          },
          {
            pattern: /^[1-9]\d*$/,
            trigger: 'blur',
            message: '入库数量必须是正整数'
          }
        ]

      },
      subBoxClickIndex: -1,
      getbppClassId: 0,
      whId: 'null', // 传给用料批次号的参数
      WorkOrderNumber: 'null',
      index1: 0 // 工单号里面用
    }
  },
  watch: {
    'formDataInfo.boxLibInItems.defaultList' (n, o) {
      this.disabledworkNo(n)
    }
  },
  created () {
    // this.getpliLostTypeList.()//报损类型
  },
  methods: {
    disabledworkNo (n) {
      if (this.action == 'update') {
        for (let index = 0; index < n.length; index++) {
          if (n[index].workNo == '') {
            this.disworkNo[index] = false
          } else {
            this.disworkNo[index] = true
          }
        }
      } else {
        for (let index = 0; index < n.length; index++) {
          this.disworkNo[index] = false
        }
      }
    },
    // 计算入库数量
    biInQtyChange (index) {
      let masterstockqty = 0
      let tableData = this.$refs['tableFields'].get()
      for (let i = 0; i < tableData.length; i++) {
        let stockqty = Number(tableData[i].biInQty)
        if (tableData[i].biInQty) {
          masterstockqty += stockqty
        }
      }
      this.formDataInfo.master.inQty = masterstockqty
      this.countMoney(index)
    },
    // 计算金额
    countMoney (index) {
      // money
      //  debugger
      let sundata = this.$refs['tableFields'].get()
      if (index == undefined) {
        for (let index1 = 0; index1 < sundata.length; index1++) {
          // 入库数量
          let biInQty = sundata[index1].biInQty
          // 单价
          let unitPrice = sundata[index1].unitPrice
          sundata[index1].money = Number(biInQty) * Number(unitPrice)
        }
      } else {
        sundata[index].money =
          Number(sundata[index].biInQty) * Number(sundata[index].unitPrice)
      }
    },
    // 数据传递
    transformation (selectedValue) {
      // debugger
      let transData = JSON.parse(
        JSON.stringify(this.initData.initData.stockboxlibinitemFm)
      )
      transData.artCode = selectedValue.artCode // 生产纸质
      transData.bcCustPo = selectedValue.bcCustPo //	客户PO号
      transData.biBatchNo = selectedValue.biBatchNo //		料号
      transData.biProdName = selectedValue.biProdName // 产品名称
      transData.biProdNo = selectedValue.biProdNo // 产品编号
      transData.bpProArtId = selectedValue.bpProArtId // 生产纸质id
      transData.proBoxCode = selectedValue.bpProBoxCode //	生产盒式编号
      transData.bpProBoxId = selectedValue.bpProBoxId //	生产盒式id
      transData.proBoxName = selectedValue.bpProBoxName // 生产盒式名称
      transData.bpProQty = selectedValue.bpProQty // 工单数
      transData.custCode = selectedValue.custCode // 客户编号
      transData.custName = selectedValue.custName // 客户名称
      transData.biBoxCoInQty = selectedValue.finishInQty // 已入库数
      transData.bpProSizeH = selectedValue.proSizeHeight // 生产高
      transData.bpProSizeL = selectedValue.proSizeLength // 生产规格长
      transData.bpProSizeW = selectedValue.proSizeWidth // 生产宽
      transData.biInQty = selectedValue.thisInQty // 本次入库数
      transData.workNo = selectedValue.workNo //	工单号
      transData.biBoxCoNo = selectedValue.bcNo //	纸箱订单号
      transData.unitPrice = selectedValue.biPrice // 单价
      transData.coinId = selectedValue.coinId // 货币Id
      return transData
    },
    // 接受工单号传回来的数据
    closeMain (selectedValues) {
      // debugger
      let pushData = []
      selectedValues.forEach(selectedValue => {
        let transData = this.transformation(selectedValue)
        pushData.push(transData)
      })
      // let 子表数据 = this.$refs["tableFields"].get()
      let sundata = this.$refs['tableFields'].get()
      // 工单号唯一校验
      let hiddensundata = {}
      for (let index = 0; index < sundata.length; index++) {
        if (sundata[index].workNo != '') {
          let key = JSON.stringify(sundata[index].workNo)
          let value = index
          hiddensundata[key] = value
        }
      }
      for (let i = pushData.length - 1; i >= 0; i--) {
        if (hiddensundata[JSON.stringify(pushData[i].workNo)] != undefined) {
          this.$Message.error(pushData[i].workNo + '该工单号已经存在')
          pushData.splice(i, 1)
        }
      }
      let index2 = this.index1
      for (let a = 0; a < pushData.length; a++) {
        this.$refs['tableFields'].set(pushData[a], index2)
        index2++
      }
      this.biInQtyChange(this.index1)
      this.countMoney()
    },
    // 工单号失去焦点带出参数事件
    onFill (index) {
      //  debugger;
      let pushData = []
      // 获取班别id
      let bppClassId = this.formDataInfo.master.bppClassId
      // 获取工单号
      let workNo = this.formDataInfo.boxLibInItems.defaultList[index].workNo
      // 获取当前子表数据
      // let two = this.formDataInfo.boxLibInItems.defaultList[index];
      let tabData = this.$refs['tableFields'].cloneData
      // 获取子表初始化时的数据
      let defulit = this.initData.initData.stockboxlibinitemFm
      if (workNo) {
        request
          .post(`/sale/boxCo/getBoxWorkInStoreData`, { workNo, issInput: 1 })
          .then(res => {
            let data = res[0]
            if (data === [] || data === undefined || data.length == 0) {
              this.$Message.error('工单号错误')
              // $set(要修改的对象,索引,属性的值是啥)
              this.$set(
                this.formDataInfo.boxLibInItems.defaultList,
                index,
                this.initData.initData.stockboxlibinitemFm
              )
              return
            }
            res.forEach(selectedValue => {
              let transData = this.transformation(selectedValue)
              pushData.push(transData)
            })
            this.$refs['tableFields'].set(pushData, index)
            // let demo = this.$refs["tableFields"].cloneData[index];
            // 判断用料批次号是否存在
            for (let index2 = 0; index2 < tabData.length; index2++) {
              if (index != index2) {
                if (data.workNo === tabData[index2].workNo) {
                  this.$Message.error('该用料批次号已经存在')
                  tabData[index] = JSON.parse(
                    JSON.stringify(this.initData.initData.stockboxlibinitemFm)
                  )
                  return
                }
              }
            }
            // this.transformation(demo, data);
            this.biInQtyChange(index)
            this.OnlyWorkNo(index)
          })
      }
    },
    // 工单号唯一校验
    OnlyWorkNo (index) {
      // debugger;
      // 获取当前行工单号
      let workNo = this.formDataInfo.boxLibInItems.defaultList[index].workNo
      // 过去明细表全部数据
      let two = this.formDataInfo.boxLibInItems.defaultList
      let one = this.$refs['tableFields'].cloneData
      for (let index1 = 0; index1 < one.length; index1++) {
        if (index1 !== index) {
          if (one[index1].workNo === workNo) {
            // 若当前列表工单号已经存在，清空当前列表数据，提示工单号已经存在 BC200300033-2
            // this.$set(
            this.formDataInfo.boxLibInItems.defaultList[index] = []
            //   index,
            //   this.initData.initData.stockboxlibinitemFm
            // )
            this.$Message.error('此工单号已经存在')
            this.biInQtyChange(index)
          }
        }
      }
    },
    getworkNoList () {
      let workNoList = ''
      let tabData = this.$refs['tableFields'].cloneData
      if (tabData.length == 1) {
        if (tabData[0].workNo == '') {
          workNoList = ''
        } else {
          workNoList = tabData[0].workNo
        }
      } else {
        for (let i = 0; i < tabData.length; i++) {
          if (i === tabData.length - 1) {
            if (tabData[i].workNo == '') {
              workNoList = workNoList.substr(0, workNoList.length - 1)
            }
          } else {
            workNoList += tabData[i].workNo + ','
          }
        }
      }
      return workNoList
    },
    // 工单号点击事件
    Slave_list_table_editRowModify (index) {
      let workNoList = ''
      workNoList = this.getworkNoList()
      if (this.formDataInfo.master.bppClassId) {
        this.salveWindow.showEditWindow = true
        this.index1 = index
        let ppuer = this.salveWindow.showEditWindow
        this.salveWindow.action = 'add'
        this.salveWindow.isLoaddingDone = true
        this.workNoList = workNoList
        // issInput(1输入0查询)
        request
          .post(`/sale/boxCo/getBoxWorkInStoreData`, {
            issInput: 0,
            workNoList
          })
          .then(res => {
            this.WorkOrderNumber1 = res
            console.log(res)
            this.$refs.mychild.getFormInitDataObj(res)
          })
      } else {
        this.salveWindow.showEditWindow = false
        this.$Message.error('班别不能为空')
      }
    },
    // 判断数据是新增还是修改
    formDetailDataCall () {
      // debugger;
      if (this.action != 'add') {
        // debugger
        this.getteamCode = this.formDataInfo.master.teamCode
        this.id = this.formDataInfo.master.id
      }
    },
    // 当主表弹框改变时促发初始化子表数据
    Initializationdata (data) {
      // debugger
      let tableData = this.$refs['tableFields'].getCategorizeData()
      if (this.formDataInfo.master.bppClassId) {
        if (this.formDataInfo.master.bppClassId != this.getbppClassId) {
          this.formDataInfo.boxLibInItems.defaultList = []
          tableData.deleteList = tableData.updateList
        }
        this.getbppClassId = this.formDataInfo.master.bppClassId
      }
    },
    // 重写父类 关闭窗口时 触发事件
    closeActionTigger () {
      // debugger
      // fix 清除上次的错误提示 formDataInfo 为表单ref名称
      this.$refs['formDataInfo'].resetFields()
      // this.$refs["tableFields"].reset();
      // this.formDataInfo.boxLibInItems.defaultList =
      //   [this.initData.initData.stockboxlibinitemFm];
      this.formDataInfo = deepCopy(default_formDataInfo)
    },
    // 主表弹框判空
    clickValuedate () {
      // debugger;
      if (
        !this.formDataInfo.master.teamCode ||
        this.formDataInfo.master.teamCode == ''
      ) {
        this.$Message.error('班别不能为空')
        return false
      }
      return true
    },
    // 重写父类,添加时候,清空数据
    // HandleFormDataInfo() {
    //   // debugger
    //   this.formDataInfo = Object.assign({}, default_formDataInfo);
    // },
    // 重写父类,修改提交数据
    resetformDataInfo (_data) {
      // debugger;
      let tableData = this.$refs['tableFields'].getCategorizeData()
      // debugger
      this.formDataInfo.boxLibInItems = tableData
      if (_data.master.biDate) {
        _data.master.biDate = dayjs(_data.master.biDate).format(
          'YYYY-MM-DD HH:mm:ss'
        )
      }
      return this.formDataInfo
    }
  }
}
</script>

<style>
.cl-edit-paperPrice .ivu-form-item {
  margin-bottom: 5px !important;
}
.cl-edit-paperPrice .ivu-select-item {
  display: block;
}
/* .cl-edit-paperPrice .ivu-input-type-text{
  width: 200px
}*/
.cl-edit-paperPrice .right-text {
  width: 160%;
}

</style>
