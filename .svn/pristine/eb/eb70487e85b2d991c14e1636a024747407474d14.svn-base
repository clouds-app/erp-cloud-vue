<template>
  <div class="vTable">
    <div :style="{position:'relative'}" class="edit-table">
        		<Table
                :loading="isLoading"
                column-width-drag
                stripe
                border
                :show-header="showHeader"
                style="width:100%"
                :columns="columnsComputed"
                :highlight-row="highlightRow"
                :width="width"
                :height="tableHeight"
                :data="tableDataItems"
                size="small"
                :upDownMove="upDownMove"
                @on-row-click="rowClick"
                @on-select="selectGroupChange"
                @on-select-all="selectAll"
                @on-row-dblclick="rowDbClick"
                @on-selection-change="onSelectionChange"
                ref="vTable"
                :row-class-name="rowClassName"
                >
        		</Table>
        		 <div v-if="paginationControl == 'scroll'" >

        		 	<!-- <page simple :total="page.total" :page-size-opts="pageSizeOpts" show-total :page-size="page.pageSize" @on-change="onPageNumberChange" @on-page-size-change="onPageSizeChange" size="small" show-elevator show-sizer ></page>
        		 -->
             </div>
             <div v-else style="padding:3px 10px;background-color: #F4F4F4;border:1px solid #c4c4c4;border-top:0;">
               <page :total="page.total" :page-size-opts="pageSizeOpts" show-total :page-size="page.pageSize" @on-change="onPageNumberChange" @on-page-size-change="onPageSizeChange" size="small" show-elevator show-sizer ></page>
             </div>

        	</div>
  </div>
</template>

<script>
  import axios from '@/libs/api.request'
  import Table from '../table/table'
  import formatter from '@/libs/formatter'
  export default {
    name: 'vTable',
    components:{Table},
    data(){
    		return{
    			page:{
    				pageNumber:1,
    				total:0,
    				pageSize:15,
            pages:0,//总页数
    			},
    			tableDataItems:[],
    			pageSizeOpts:[10,30,50,70,100],
    			isLoading:true,
    			verticalResizeOffset:this.pagination?32:0,
    			scrollHeight:0,
    			formatter:{
    				NUMBER_MARK:'numberMark',//千分位
    				STATUS:'statusFormat',
    				AUDIT:'auditFormat',
    				CHECKBOX:"checkBoxFormat"
    			},
    			rowClassValidates:[],
    			colorItem:{
    				red:'#ed4014',
    				yellow:'#ff9900',
    				green:'#19be6b',
    				skyblue:'#2db7f5',
    				blue:'#2d8cf0'
    			},
          tableQueryParams:{},
          tableDataItemsIsClear:false
    		}
    	},props:{
    		columns:{
    			type:Array,
    			default:()=>{
            return [];
          }
    		},tableData:{
    			type:Array,
    			default:()=>{
            return [];
          }
    		},height:{
    			type:Number,
    			default:-1
    		},
    		pagination:{
    			type:Boolean,
    			default:true
    		},
    		url:String,
    		queryParams:{},
    		total:{
    			type:Number,
    			default:0
    		},
    		pageSize:{
    			type:Number,
    			default:30
    		},pageNumber:{
    			type:Number,
    			default:1
    		},
    		width:Number,
    		columnsUrl:String,
    		format:{
    			type:Boolean,
    			default:true
    		},showHeader:{
    			type:Boolean,
    			default:true
    		},highlightRow:{
    			type:Boolean,
    			default:true
    		},upDownMove:{
    			type:Boolean,
    			default:false
    		},columnsGroup:{
    			type:Array,
    			default:()=>{
            return [];
          }
    		},
        paginationControl:{
          type:String,
          default:"scroll"
        }
    	},watch:{
    		tableData:{
    			handler(n,o){
    				this.tableDataItems = n;
    			},
    			deep:true
    		},total(n,o){
    			this.page.total = n;
    		},pageSize(n,o){
    			this.page.pageSize = n;
    		},pageNumber(n,o){
    			this.page.pageNumber = n;
    		},height(n,o){
    			//this.resize();
    		},queryParams:{
          handler(n,o){
            this.tableQueryParams = n;
          },deep:true
        },tableDataItems:{
          handler(n,o){
             this.$nextTick(()=>{
               this.pageScrollAddEventListener();
             })
          },deep:true
        }
    	},computed:{
    		columnsComputed(){
    			if(!this.format){
    				return this.columns;
    			}
    			/* if(this.columnsGroup && this.columnsGroup.length > 0 && !Array.isArray(this.columns)){
    				let col = this.columnsGroupParse(this.columnsGroup);
    				return col;
    			} */
          let index = [{title:'#',type:'index',width:50,align:'center',fixed:'left'}];
    			return index.concat(this.columnsRenderParse(this.columns));
    		},tableHeight(){
          if(this.paginationControl == 'page'){
            return this.height  - 32;
          }
          return this.height;
        }
    	},created(){
    		this.getFormColumns();
    		this.getTableData();

    	},methods:{
    		columnsGroupParse(columnsGroup){
    			//列分组解析
    			let columns = [];
    			//fieldName
    			columnsGroup.forEach((column,index)=>{
    				if(column.fieldName && column.children){//需要替换同时又有子节点
    					let children = this.columnsGroupParse(column.children);
    					column = this.columns[column.fieldName];
    					column['children'] = children;
    					columns.push(column);
    				}else if(column.fieldName){//需要替换
    					columns.push(this.columns[column.fieldName]);
    				}else if(column.children){//自定义的节点有子节点
    					let children = this.columnsGroupParse(column.children);
    					column['children'] = children;
    					columns.push(column);
    				}else{//自定义节点
    					columns.push(column);
    				}
    			});
    			return columns;
    		},
    		columnsRenderParse(columns){
    			//列添加render
    			let newColumns = [];
    			columns.forEach((item)=>{
    				if(item.children){
    					let column = this.columnsRenderParse(item.children);
    					newColumns.push(column);
    				}else{
    					if(item.formatter && item.formatter != null && item.formatter != ''){
    						let formatMethod = this.formatter[item.formatter];
    						if(formatMethod){//匹配上了
    							item.render = formatter[formatMethod];
    						}else{
    							item.render = eval('(function(h,params){'+item.formatter+'})');
    						}
    					}
    					newColumns.push(item);
    					if(item.colorValidator != null && item.colorValidator !=''){
    						this.rowClassValidates.push(item.colorValidator);
    					}
    				}
    			});
    			return newColumns;
    		},
    		getTableData(){
				this.isLoading = true;
    			if(this.url && this.url != null){
            this.isLoading = true;
            return axios.request({
              url:this.url,
              params:this.pagination ? this.page : {},
              method: 'post',
              data:this.tableQueryParams
            }).then(res=>{
              if(res.data.success){
				let tableDataItems = [];
                let data = res.data.result;
                if(this.pagination){
                	tableDataItems = data.records;
                	this.page.pageNumber = parseInt(data.current);
                	this.page.pageSize = parseInt(data.size);
                	this.page.total =  parseInt(data.total);
                  this.page.pages = parseInt(data.pages);
                }else{
                	tableDataItems = data;
                }
                if(this.paginationControl == 'scroll'){
                  //this.tableDataItems=[] //FIX 避免数据重复添加
                  if(this.tableDataItemsIsClear){
                    this.tableDataItems=[];
                  }
                  this.tableDataItems.push(...tableDataItems);
                }else{
                  this.tableDataItems = tableDataItems;
                }
              }else{
                this.$Message.error('数据加载失败，请稍后再试...');
              }
    				}).finally(()=>{
    					this.isLoading = false;
    				})
    			}else{
    				this.isLoading = false;
    			}
    		},onPageNumberChange(pageNumber){
    			this.page.pageNumber = pageNumber;
    			this.getTableData();
    		},onPageSizeChange(pageSize){
    			this.page.pageSize = pageSize;
    			this.getTableData();
    		},search(queryParams){
    			if(queryParams){
    				this.tableQueryParams = queryParams;
    			}
          this.tableDataItemsIsClear = true;
    			this.getTableData();
    		},rowClick(rowIndex,rowData,colData){
    			this.$emit('row-click',rowIndex,rowData);
    		},selectGroupChange(selection){
    			this.$emit('select-group-change',selection);
    		},selectAll(selection){
    			this.$emit('select-all',selection);
    		},onSelectionChange(selection){
    			this.$emit('on-selection-change',selection);
    		},resize(){
    			//this.$refs.vTable.resize();
    		},rowDbClick(rowIndex, rowData, column){
    			this.$emit('row-dblclick',rowIndex,rowData);
    		},getFormColumns(){
    			if(this.columnsUrl && this.columnsUrl != ''){
    				if(this.columnsGroup && this.columnsGroup.length > 0){
    					this.columnsUrl = this.columnsUrl+'/group';
    				}
    				axios.request({
              url:this.columnsUrl,
              method: 'get',
            }).then(res=>{
              if(res.data.success){
                this.columns = res.data.result;
              }else{
                this.$Message.error('列数据失败,请稍后再试');
              }
    				});
    			}
    		},rowClassName(row, index){
    			let classSty = 'column-cell-class-';
    			for(let i = 0;i<this.rowClassValidates.length;i++){
    				let rowClassValidate = this.rowClassValidates[i];
    				let exec = eval('(function(row,index){'+rowClassValidate+'})');
    				let color = exec(row,index);
    				return classSty+color;
    			}
    			return classSty;
    		},scrollPaging(){
          //滚动分页
          if(this.isLoading || this.page.pageNumber >= this.page.pages){
            return;
          }
          this.onPageNumberChange(this.page.pageNumber + 1);
        },pageScrollAddEventListener(){
          if(this.paginationControl == 'scroll'){
            let _self = this;
            let loadding = true;
            this.$refs.vTable.$refs.body.addEventListener('scroll',(e)=>{
              if(loadding && e.target.scrollHeight - (e.target.scrollTop + e.target.offsetHeight) <= 0){//加载更多
                //console.log('加载更多数据了...'+(e.target.scrollHeight - e.target.scrollTop));
                loadding = false;
                _self.tableDataItemsIsClear = false;
                _self.pageScrollRemoveEventListener();
                _self.scrollPaging();
              }
            })
          }
        },pageScrollRemoveEventListener(){
           this.$refs.vTable.$refs.body.removeEventListener('scroll',(e)=>{

           });
        }
    	},updated(){
    		if(this.$refs.vTable.$children.length > 0){
    			var node1 = this.$refs.vTable.$children[0].$el;
    			if(node1.children.length > 0 && node1.children[0].offsetWidth > this.$refs.vTable.$el.scrollWidth){
    				this.scrollHeight = 20;
    			}
    		}
    	},mounted() {

    	}
   }
</script>

<style>
</style>
