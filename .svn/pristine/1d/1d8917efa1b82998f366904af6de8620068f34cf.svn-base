<template>
  <div>
    <editWindow class="cl-edit-product" :title="actionLableName" v-model="showWindow"
    :fullscreen="true" :loading="!isLoaddingDone"
      :spinLoaddingText="spinLoaddingText" @on-ok="submitFormDataEvent" @on-cancel="closeActionTigger">
      <div  v-if="initData.columns && showWindow">
        <Form ref="masterForm" :show-message="true" :model="formDataInfo.master" :rules="ruleValidate" :label-width="100"
            label-colon>
            <!-- update -->
            <div class="edit-product">
              <div style="width: 33.33%;padding:0 2rem;">
                <Divider style="margin: 0;">基础信息</Divider>
                <Row>
                  <Col span="24">
                  <FormItem label="产品编号" prop="bpNo">
                    <Input v-model="formDataInfo.master.bpNo" :disabled="true" placeholder="产品编号"></Input>
                  </FormItem>
                  </Col>
                  <Col span="24">
                  <FormItem label="产品名称" prop="bpName">
                    <Input v-model="formDataInfo.master.bpName" maxlength="20" placeholder="请输入产品名称"></Input>
                  </FormItem>
                  </Col>
                  <Col span="24">
                  <FormItem label="料号" prop="bpBatchNo">
                    <Input v-model="formDataInfo.master.bpBatchNo" maxlength="20" placeholder="请输入料号"></Input>
                  </FormItem>
                  </Col>
                  <Col span="24">
                  <FormItem label="客户" prop="cusCode">
                    <popup v-model="formDataInfo.master.cusCode"
                    field-name="cusCode" :disabled="false" popup-name="CustomerSingleBox"
                      :fill-model.sync="formDataInfo.master"
                      render-fields="custId,cusCode,cusName,bpIsDiameter,bpUnit"
                      from-fields="id,cusCode,cusName,bpIsDiameter,bpUnit"
                      :suffix="true"
                       :suffix-model="formDataInfo.master.cusName"
                      :query-params="{}" />
                  </FormItem>

                  </Col>
                  <Col span="24">
                  <FormItem label="">
                    <Checkbox v-model="formDataInfo.master.bpIsDiameter">内径</Checkbox>
                    <Checkbox v-model="formDataInfo.master.iisPublic">公用</Checkbox>
                    <Checkbox v-model="formDataInfo.master.bpIsFullPrint">满版印刷</Checkbox>
                    <Checkbox v-model="formDataInfo.master.bpWF">外发</Checkbox>
                  </FormItem>

                  </Col>

                  <Col span="24">
                  <FormItem label="客户产品编号" prop="bpCustProdNo">
                    <Input v-model="formDataInfo.master.bpCustProdNo" maxlength="80" placeholder="请输入客户产品编号"></Input>
                  </FormItem>
                  </Col>
                  <Col span="24">
                  <FormItem label="客户产品名称" prop="bpCustProdName">
                    <Input v-model="formDataInfo.master.bpCustProdName" maxlength="80" placeholder="请输入客户产品名称"></Input>
                  </FormItem>
                  </Col>
                  <Col span="24">
                  <FormItem label="商检号" prop="bpShopNo">
                    <Input v-model="formDataInfo.master.bpShopNo" maxlength="80" placeholder="请输入商检号"></Input>
                  </FormItem>
                  </Col>



                </Row>
              </div>

              <div style="width: 33.33%;padding-right:1rem;">
                <Divider style="margin: 0;">客方信息</Divider>
                <Row>
                  <Col span="24">
                  <FormItem label="客方盒式" prop="bpCBoxCode">
                    <popup v-model="formDataInfo.master.bpCBoxCode" field-name="bpCBoxCode" :disabled="false" popup-name="BoxSingleBox"
                      :fill-model.sync="formDataInfo.master" render-fields="bpCBoxId,bpCBoxCode,bpCBoxName,bpPBoxId,bpPBoxCode,bpPBoxName"
                      from-fields="id,boxCode,boxName,id,boxCode,boxName" :suffix="true" :suffix-model="formDataInfo.master.bpCBoxName"
                      :query-params="{}" />
                  </FormItem>
                  </Col>
                  <Col span="12">
                  <FormItem label="客方纸质" prop="bpCArtCode">
                    <popup v-model="formDataInfo.master.bpCArtCode" field-name="bpCArtCode" :disabled="false" popup-name="ArtSingleBox"
                      :fill-model.sync="formDataInfo.master" render-fields="bpCArtId,bpCArtCode,bpPArtId,bpPArtCode"
                      from-fields="id,artCode,id,artCode" @on-fill="artPopupFillEvent" :suffix="false" />
                  </FormItem>
                  </Col>
                  <Col span="12">
                  <FormItem label="楞别" prop="lengId">
                    <Select v-model="formDataInfo.master.lengId" :label-in-value="true" @on-change="lbCodeChangedEvent">
                      <Option v-for="(item,index) in lbCodeList" :key="index" :value="item.lengId">{{item.lbCode}}</Option>
                    </Select>
                  </FormItem>
                  </Col>
                  <Col span="24">
                  <FormItem label="规格" required>
                    <div class="number-box">
                      <Input type="number"  @mousewheel.native.prevent number min="0" v-model="formDataInfo.master.bpCSizeL"
                       maxlength="11"
                       placeholder="长"
                       @on-blur="bpCSizeLBlurEvent"
                       ></Input>
                      <span>X</span>
                      <Input type="number"  @mousewheel.native.prevent number v-model="formDataInfo.master.bpCSizeW"
                      maxlength="11" placeholder="宽"
                      @on-blur="bpCSizeWBlurEvent"
                      ></Input>
                      <span>X</span>
                      <Input type="number"  @mousewheel.native.prevent number v-model="formDataInfo.master.bpCSizeH"
                      maxlength="11" placeholder="高"
                      @on-blur="bpCSizeHBlurEvent"
                      ></Input>

                      <Select v-model="formDataInfo.master.bpUnit" placeholder="单位">
                        <Option v-for="(item,index) in unitItems" :key="index" :value="item.value">{{item.value+':'+item.text}}</Option>
                      </Select>
                    </div>

                  </FormItem>
                  </Col>
                  <Col span="24">
                  <FormItem label="生产备注" prop="bpPRemark">
                    <popup v-model="formDataInfo.master.bpPRemark" field-name="bpPRemark" :disabled="false" popup-name="ResumeSingleBox"
                      :fill-model.sync="formDataInfo.master" render-fields="bpPRemark" from-fields="resumeName"
                      :query-params="{resumeType:'C'}"
                      :blur-focus-load-data="false"
                      />
                  </FormItem>
                  </Col>
                  <Col span="24">
                  <FormItem label="送货备注" prop="bpDRemark">
                    <popup v-model="formDataInfo.master.bpDRemark" field-name="bpDRemark" :disabled="false" popup-name="ResumeSingleBox"
                      :fill-model.sync="formDataInfo.master" render-fields="bpDRemark" from-fields="resumeName"
                      :query-params="{resumeType:'H'}"
                      :blur-focus-load-data="false"
                      />
                  </FormItem>
                  </Col>
                  <Col span="18">
                  <FormItem label="颜色" prop="colorName">
                    <popup v-model="formDataInfo.master.colorName" field-name="colorName" :disabled="false" popup-name="ColorMultiBox"
                      :fill-model.sync="formDataInfo.master" render-fields="bpColorId,colorName" from-fields="id,colorName"
                      @on-fill="(a,length)=>{this.formDataInfo.master.bpColorQty = length}" :suffix="false" :query-params="{}" />
                  </FormItem>
                  </Col>
                  <Col span="6">
                  <FormItem label="色数" prop="bpColorQty" class="ivu-form-item-text2">
                    <Input type="number"  @mousewheel.native.prevent number v-model="formDataInfo.master.bpColorQty" placeholder="请输入色数"></Input>
                  </FormItem>
                  </Col>
                  <Col span="18">
                  <FormItem label="模板" prop="bpDPNo">
                    <popup v-model="formDataInfo.master.bpDPNo" field-name="bpDPNo" :disabled="false" popup-name="DieCuttingPlateSingleBox"
                      :fill-model.sync="formDataInfo.master" render-fields="bpDPNo,bpDPName,dpLengthmm,dpWidthmm"
                      from-fields="dpNo,bpName,dpLengthmm,dpWidthmm" :suffix="true" :suffix-model="formDataInfo.master.bpDPName"
                      :query-params="{custId:formDataInfo.master.custId,boxId:formDataInfo.master.bpCBoxId}" />
                  </FormItem>
                  </Col>
                  <Col span="6">
                  <FormItem label="模数" prop="bpMoCut" class="ivu-form-item-text2">
                    <Input type="number"  @mousewheel.native.prevent number v-model="formDataInfo.master.bpMoCut" placeholder="请输入模数"></Input>
                  </FormItem>
                  </Col>

                  <Col span="15">
                  <FormItem label="印唛" prop="bpPMNo">
                    <popup v-model="formDataInfo.master.bpPMNo" field-name="bpPMNo" :disabled="false" popup-name="PrintMarksSingleBox"
                      :fill-model.sync="formDataInfo.master" render-fields="bpPMNo,bpPMName" from-fields="pmNo,bpName"
                      :suffix="true" :suffix-model="formDataInfo.master.bpPMName" :query-params="{custId:formDataInfo.master.custId}" />
                  </FormItem>
                  </Col>
                  <Col span="9">
                  <FormItem label="印版" prop="bpPPNo" class="ivu-form-item-text2">
                    <popup v-model="formDataInfo.master.bpPPNo" field-name="bpPPNo" :disabled="false" popup-name="PrintSingleBox"
                      :fill-model.sync="formDataInfo.master" render-fields="bpPPNo" from-fields="tpNo"
                      :suffix="false":query-params="{custId:formDataInfo.master.custId}" />
                  </FormItem>
                  </Col>

                </Row>
              </div>

              <div style="width: 33.33%;padding:0 2rem;">
                <Divider style="margin: 0;">生产信息</Divider>
                <Row>
                  <Col span="24">
                  <FormItem label="生产盒式" prop="bpPBoxCode">
                    <popup v-model="formDataInfo.master.bpPBoxCode" field-name="bpPBoxCode" :disabled="false" popup-name="BoxSingleBox"
                      :fill-model.sync="formDataInfo.master" render-fields="bpPBoxId,bpPBoxCode,bpPBoxName" from-fields="id,boxCode,boxName"
                      :suffix="true" :suffix-model="formDataInfo.master.bpPBoxName" :query-params="{}" />
                  </FormItem>
                  </Col>
                  <Col span="24">
                  <FormItem label="生产纸质" prop="bpPArtCode">
                    <popup v-model="formDataInfo.master.bpPArtCode" field-name="bpPArtCode" :disabled="false" popup-name="ArtSingleBox"
                      :fill-model.sync="formDataInfo.master" render-fields="bpPArtId,bpPArtCode" from-fields="id,artCode"
                      :suffix="false" />
                  </FormItem>
                  </Col>
                  <Col span="24">
                    <FormItem label="规格" required>
                      <div class="number-box">
                        <Input type="number"  @mousewheel.native.prevent number v-model="formDataInfo.master.bpPSizeL" placeholder="长"></Input>
                        <span>X</span>
                        <Input type="number"  @mousewheel.native.prevent number v-model="formDataInfo.master.bpPSizeW" placeholder="宽"></Input>
                        <span>X</span>
                        <Input type="number"  @mousewheel.native.prevent number v-model="formDataInfo.master.bpPSizeH" placeholder="高"></Input>
                      </div>
                    </FormItem>
                  </Col>

                  <Col span="12">
                    <FormItem label="开口" prop="bpHatch">
                      <Input type="number" @on-blur="calcMaterialData"  @mousewheel.native.prevent number v-model="formDataInfo.master.bpHatch" placeholder="开口"></Input>
                    </FormItem>
                  </Col>

                  <Col span="12">
                  <FormItem label="修边" prop="bpAdjBorder">
                    <Input type="number" @on-blur="calcBoxExpressions"  @mousewheel.native.prevent number v-model="formDataInfo.master.bpAdjBorder" placeholder="请输入修边"></Input>
                  </FormItem>
                  </Col>

                  <Col span="12">
                  <FormItem label="单面积" prop="bpSArea">
                    <Input type="number"  @mousewheel.native.prevent number :disabled="true" v-model="formDataInfo.master.bpSArea" placeholder="请输入单面积"></Input>
                  </FormItem>
                  </Col>
                  <Col span="12">
                  <FormItem label="客户单面积" prop="bpCustSArea">
                    <Input type="number"  @mousewheel.native.prevent number :disabled="true" v-model="formDataInfo.master.bpCustSArea" placeholder="请输入客户单面积">
                    </Input>
                  </FormItem>
                  </Col>
                  <Col span="12">
                  <FormItem label="单重" prop="bpSWeight">
                    <Input type="number"  @mousewheel.native.prevent number :disabled="true" v-model="formDataInfo.master.bpSWeight" placeholder="请输入单重"></Input>
                  </FormItem>
                  </Col>
                  <Col span="12">
                  <FormItem label="客方单重" prop="bpCustSWeight">
                    <Input type="number"  @mousewheel.native.prevent number :disabled="true" v-model="formDataInfo.master.bpCustSWeight" placeholder="请输入客方单重"></Input>
                  </FormItem>
                  </Col>
                  <Col span="12">
                  <FormItem label="单体积" prop="bpSCube">
                    <Input type="number"  @mousewheel.native.prevent number :disabled="true" v-model="formDataInfo.master.bpSCube" placeholder="请输入单体积"></Input>
                  </FormItem>
                  </Col>
                  <Col span="18">
                  <FormItem label="模板规格">
                    <div class="number-box">
                      <Input type="number"  @mousewheel.native.prevent number v-model="formDataInfo.master.dpLengthmm" placeholder="长" :disabled="true"></Input>
                      <span>X</span>
                      <Input type="number"  @mousewheel.native.prevent number v-model="formDataInfo.master.dpWidthmm" placeholder="宽" :disabled="true"></Input>
                    </div>
                  </FormItem>
                  </Col>
                </Row>
              </div>

            </div>
          </Form>

          <Tabs>
            <!--  注意:eTable formDataInfo.wareHouseItems.defaultList  ===wareHouseItems=== 需要根据实际接口修改,其它不变-->
            <TabPane label="纸板规格" name="ProductMData">
              <!-- 选择规格 -->
              <eTable ref="slave_edit_productMDataFm"
              unqiue-mark="id"
              :height="tableDefaultHeight"
              :index-menu="true" :col-start="0"
              :width="200"
              :row-init-data="initData.initData.productMDataFm"
              :data.sync="productMDatasTableDataList"
              :rules="tableFieldsValidator"
              @on-table-change="calcUseMaterialNum"
              @row-dbClick="paperSpecRowDBClickEvent"
                >
                <template slot="head">
                  <tr v-for="(columnGroup,index) in initData.columns.productMDataFm.editGroups" :key="index">
                    <th class="ivu-table-column-left"
                    v-for="(column,index2) in columnGroup" :key="index2"
                    :width="column.width"
                    :colspan="column.colSpan"
                    :rowspan="column.rowSpan"
                    style="text-align:center;"
                    >
                      <div class="ivu-table-cell">
                        <span class="">{{column.title}}</span>
                      </div>
                    </th>

                  </tr>
                </template>

                <template slot="body" slot-scope="{ row, index, valueChangeAssign }">
                  <td class="ivu-table-column-left"
                   v-for="(column,columnIndex) in initData.columns.productMDataFm.editColumns"
                   :key="columnIndex"
                   :width="column.width"
                   style="text-align:center;"
                   >
                   <popup v-model="row.artCode"
                   v-if="column.key == 'artCode'"
                   field-name="artCode"
                   :disabled="false"
                   popup-name="ArtSingleBox"
                   :fill-model.sync="productMDatasTableDataList"
                   render-fields="artCode"
                   from-fields="artCode"
                   :index="index"
                   :suffix="false" />

                   <Select v-model="row[column.key]" v-else-if="column.key == 'bmScoreType'" transfer>
                     <Option v-for="(item,index) in pressingLineTypeList" :key="index" :value="item.dicValue">{{item.dicLabel}}</Option>
                   </Select>

                   <Select v-else-if="column.key == 'bmScoreDepth'" v-model="row[column.key]" transfer>
                     <Option v-for="(item,index) in pressingLineDeepList" :key="index" :value="item.dicValue">{{item.dicLabel}}</Option>
                   </Select>
                    <formControl v-else-if="column.key == 'bmIndex'" :control-type="column.controlType" v-model="row[column.key]=row[column.key] == 0 ? index+1 : row[column.key]"></formControl>
                   <formControl v-else :control-type="column.controlType" v-model="row[column.key]"></formControl>
                  </td>
                </template>
              </eTable>
            </TabPane>

            <TabPane label="生产工序" name="ProductWorkProc">
              <eTable
                ref="ProductWorkProc"
                unqiue-mark="id"
                :height="tableDefaultHeight"
                :index-menu="true"
                :col-start="0"
                :width="200"
                :row-init-data="initData.initData.productWorkProcFm"
                :data.sync="formDataInfo.productworkProcs.defaultList"
                :rules="tableFieldsValidator1"
              >
              <template slot="head">
                <tr v-for="(columnGroup,index) in initData.columns.productWorkProcFm.editGroups" :key="index">
                  <th class="ivu-table-column-left"
                  v-for="(column,index2) in columnGroup" :key="index2"
                  :width="column.width"
                  :colspan="column.colSpan"
                  :rowspan="column.rowSpan"
                  style="text-align:center;"
                  >
                    <div class="ivu-table-cell">
                      <span class="">{{column.title}}</span>
                    </div>
                  </th>
                </tr>
               </template>

               <template slot="body" slot-scope="{ row, index, valueChangeAssign }">

                 <td class="ivu-table-column-left"
                  v-for="(column,index2) in initData.columns.productWorkProcFm.editColumns"
                  :key="index2"
                  :width="column.width">
                   <popup
                     v-if="column.key == 'wpiNo'"
                    v-model="row.wpiNo" field-name="wpiNo"
                   :disabled="false"
                   popup-name="WorkProcItemMultiBox"
                   :fill-model.sync="formDataInfo.productworkProcs.defaultList"
                   render-fields="workProcItemId,wpiName,wpiNo"
                   from-fields="id,wpiName,wpiNo"
                   :index="index"
                   :init-data="initData.initData.productWorkProcFm"
                   />

                   <popup
                   v-else-if="column.key == 'moCode'"
                   v-model="row.moCode" field-name="moCode"
                   :disabled="false"
                   popup-name="MachineSingleBox"
                   :fill-model.sync="formDataInfo.productworkProcs.defaultList"
                   render-fields="machId,moName,moCode"
                   from-fields="id,moName,moCode"
                   :index="index"
                   :init-data="initData.initData.productWorkProcFm"
                   >
                   </popup>

                   <popup v-model="row.bwAskNote"
                   v-else-if="column.key == 'bwAskNote'"
                   field-name="bwAskNote" :disabled="false"
                   popup-name="ResumeSingleBox"
                   :fill-model.sync="formDataInfo.productworkProcs.defaultList"
                   render-fields="bwAskNote"
                   from-fields="resumeName"
                   :query-params="{resumeType:'K'}"
                   :blur-focus-load-data="false"
                   :index="index"
                   :init-data="initData.initData.productWorkProcFm"
                   />
                   <formControl v-else-if="column.key == 'bwIndex'" :control-type="column.controlType" v-model="row[column.key]=row[column.key] == 0 ? index+1 : row[column.key]"></formControl>
                   <formControl v-else :control-type="column.controlType" v-model="row[column.key]"></formControl>
                 </td>

               </template>
              </eTable>
             </TabPane>
          </Tabs>
          <productSpec
          v-model="productSpecShow"
          ref="productSpec"
          :columns="initData.columns.productMDataFm.listColumns"
          @on-ok="paperSpecSelectRenderEvent"
          :bpMoCut="formDataInfo.master.bpMoCut"
          ></productSpec>
      </div>
      </editWindow>


  </div>
</template>

<script>
  /**
   * @desc edit-dept 描述
   * 所有重要 可以重用的方法 放在了基类,继承即可用重复使用 dyBaseMixins,
   * 可以根据需求重写所需的方法:
   *
   * @params 参数
   *
   * @return 返回
   *
   * @author Andy Huang
   *
   * @created 2019/11/20 17:07:54
   */
  import tableSelect from "@/components/table-select/table-select";
  import editWindow from "@/components/edit-window/edit-window";
  // import Form from '@/components/form/form'
  import eTable from "@/components/e-table/e-table";
  import request from "@/libs/request";
  import popup from "@/components/popup/popup";
  import editBaseMixins from "../../mixins/edit";
  import InputNumber from '@/components/input-number'
  import formControl from '@/components/form-control/form-control'
  import {
    customValidator
  } from "@/libs/validator";
  import calc from "@/libs/calc";
  import productSpec from "../components/productSpec"
  export default {
    name: "edit-product",
    mixins: [editBaseMixins],
    components: {
      editWindow,
      popup,
      tableSelect,
      // Form,
      eTable,
      InputNumber,
      formControl,
      productSpec
    },
    data() {
      return {
        productSpecShow:false,
        unitItems: [{text:'英寸',value:'0'},{text:'厘米',value:'1'},{text:'毫米',value:'2'}],
        currentSubItemlength_productMData: 0, // 当前子表数据个数
        currentSubItemlength_productWorkProc: 0, // 当前子表数据个数
        requestBaseUrl: "/bas/product", // 请求 查询 操作的基础路径
        formDataInfo: {
          // 主表 更改字段
          master: {},
          productMDatas: {
            addList: [], // 添加列
            defaultList: [], // 默认列
            deleteList: [], // 删除列
            updateList: [] // 更新列
          },
          //子表 生产工序
          productworkProcs: {
            addList: [], // 添加列
            defaultList: [], // 默认列
            deleteList: [], // 删除列
            updateList: [] // 更新列
          }
        }, // 防止添加和更新数据提交发生冲突
        // 需要验证的数据
        ruleValidate: {
          bpName: [{
              required: true,
              message: "产品名称不能为空",
              trigger: "blur"
            },
            {
              validator: customValidator,
              trigger: "blur",
              customRule: ["toCDB", "spaceStr"],
              fieldDesc: "产品名称"
            }
          ],cusCode:[{
            required: true,
            message: "客户不能为空",
            trigger: "blur,change"
          }],
          bpCBoxCode:[{
            required: true,
            message: "客方盒式不能为空",
            trigger: "blur,change"
          }],
          bpCArtCode:[{
            required: true,
            message: "客方纸质不能为空",
            trigger: "blur,change"
          }],bpPBoxCode:[{
            required: true,
            message: "生产盒式不能为空",
            trigger: "blur,change"
          }],bpPArtCode:[{
            required: true,
            message: "生产纸质不能为空",
            trigger: "blur,change"
          }]
        },
        tableFieldsValidator: {
          // productId: [
          //   { required: true, message: "", trigger: "blur" }
          // ],
        },
        tableFieldsValidator1: {
          // machId: [
          //   { required: true, message: "", trigger: "blur" }
          // ],
          //  productId: [
          //   { required: true, message: "", trigger: "blur" }
          // ],
          //  workProcItemId: [
          //   { required: true, message: "", trigger: "blur" }
          // ],
        },
        tableDefaultHeight: 200,
        lbCodeList: [],
        initData: {
          initData:{
            productMDataFm:{}
          }
        },
        pressingLineTypeList:[],//压线类型
        pressingLineDeepList:[],
        productMDatasTableDataList: [], //存放处理过后的纸板规格数据:[],
        timeoutId:0,
        requestCount:0,
        updateFirstRequstIntercept:true,
        updateFirstRequstTimeoutId:-1,
        productMDatasDBClickIndex:-1,//纸板规格双击的行号
        productMDatasTableDataListCache:[]//把每次返回的数据缓存下来
      };
    },
    computed: {
      bpCBoxCode() {
        return this.formDataInfo.master.bpCBoxCode;
      },
      bpCSizeL() {
        return this.formDataInfo.master.bpCSizeL;
      },bpPSizeComputed(){
        return this.formDataInfo.master.bpPSizeL + this.formDataInfo.master.bpPSizeW + this.formDataInfo.master.bpPSizeH;
      },bpCSizeComptued(){
        //return this.formDataInfo.master.bpCSizeL + this.formDataInfo.master.bpCSizeW + this.formDataInfo.master.bpCSizeH;
      return 0;
      },
      lbComputed(){
        return this.formDataInfo.master.bpCArtId + this.formDataInfo.master.lengId + this.formDataInfo.master.bpPArtId;
      },productMDatasTableDataComputed(){
        if(this.productMDatasTableDataList.length > 0){
          let tempData = this.productMDatasTableDataList[0];
          return tempData.bmSSizeL + tempData.bmSSizeW + tempData.bmSizeL + tempData.bmSizeW;
        }else{
          return -1;
        }
      }
    },
    watch: {
      showWindow:function(n,o){
        if(!n){
          //this.resetForm();
        }
      },
      lbCodeList:{
        handler(newData,oldData){
          //愣别列表被加载后，默认选中第一条数据
          if(newData != undefined && newData.length > 0){
            //this.$set(this.formDataInfo.master,'lengId',newData[0].lengId);
            this.formDataInfo.master.lengId = newData[0].lengId;
            this.formDataInfo.master.lbCode = newData[0].lbCode;
          }
        },
        deep:true
      },
      'formDataInfo.master.bpIsDiameter':function(n,o){
          //内径改变，需要改变生产规格,然后生产规格改变加载数据
          this.calcProductSizeByDiameter();
       },
       'formDataInfo.master.custId':function(n,o){
         //客户改变 --> 生产规格 --> 纸板规格用料
         //1.计算生产规格
         this.calcProductSizeByDiameter();
       },bpPSizeComputed(n,o){
         /**
          * 生产规格改变
          *   纸板规格用料
          *   计算面积，体积，单重
          */
         //延迟一会儿在触发，避免发送多次请求
         clearTimeout(this.timeoutId);
         this.timeoutId = setTimeout(()=>{
           //1.计算用料
           this.calcMaterialData();
           //2.计算面积，体积，单重
           //this.calcBoxExpressions();
         },1000);
       },'formDataInfo.master.bpPBoxCode':function(n,o){
         /**
          * 生产盒式改变 --> 生产规格 ->纸板规格用料--> 计算面积等
          */
         this.calcProductSizeByDiameter();
       },bpCSizeComptued(){
         //客方规格改变 --> 生产规格 --> 纸板规格用料 --> 计算面积等
         //this.calcProductSizeByDiameter();
       },
       'formDataInfo.master.bpPArtCode':function(n,o){
         //生产纸质改变 --> 纸板规格用料 --> 计算面积等
         //this.calcMaterialData();
       },
       'formDataInfo.master.bpIsFullPrint':function(n,o){
         //满版印刷 --> 纸板规格用料 --> 计算面积等
         this.calcMaterialData();
       },
       'formDataInfo.master.bpMoCut':function(n,o){
         //模数改变 --> 纸板规格用料 --> 计算面积等
          this.calcMaterialData();
       },
       'formDataInfo.master.bpDPNo':function(n,o){
         //模板改变 --> 纸板规格用料 --> 计算面积等
         this.calcMaterialData();
       },
       lbComputed(n,o){
         //愣别改变 --> 纸板规格用料 --> 计算面积等
          this.calcMaterialData();
       },
       'formDataInfo.master.bpUnit':function(n,o){
         //客方单位 --> 纸板规格用料 --> 计算面积等
          this.calcMaterialData();
       },productMDatasTableDataComputed(n,o){
         /**
          * 纸板规格第一行
          * bmSSizeL/净料规格长   bmSSizeW/净料规格宽   bmSizeL/用料规格长   bmSizeW/用料规格宽
          * 值改变事件
          */
         //延迟执行加载体积，重量，等数据
         clearTimeout(this.timeoutId);
         this.timeoutId = setTimeout(()=>{
           this.calcBoxExpressions();
         },1000);
       },
       'formDataInfo.productMDatas.defaultList':{
          handler(n,o){
            //什么时候会出现数据，编辑的时候，会有，直接赋值就好
            if(n && n.length > 0){
              this.productMDatasTableDataList = JSON.parse(JSON.stringify(n));
              this.updateFirstRequstTimeoutId = setTimeout(()=>{
                this.updateFirstRequstIntercept = false;
                this.updateFirstRequstTimeoutId = -1;
              },2000);
            }
          },
          deep:true
       },
       'formDataInfo.master.bpCArtId':function(n,o){
         if(n && n!= null && n != ''){
           let data = [];
           data.push({data:{bpCArtId:n}})
           this.artPopupFillEvent(data);
         }
       }
    },
    methods: {
        //controller start
        getPressingLineTypeList() {
          //获取压线类型
          request.get('/common/sys/dic/childList/bmScoreType', {}, {
            qt: 'pValue'
          }).then(res => {
            res.forEach(item => {
              item.dicValue = parseInt(item.dicValue);
            })
            this.pressingLineTypeList = res;
          });
        },
        getPressingLineDeepList() {
          //压线深度
          request.get('/common/sys/dic/childList/bmScoreDepth', {}, {
            qt: 'pValue'
          }).then(res => {
            res.forEach(item => {
              item.dicValue = parseInt(item.dicValue);
            })
            this.pressingLineDeepList = res;
          })
        },
        getFormInitDataObj() {
          //加载表单初始化数据
          request.get('/sys/form/init/productFm').then(res => {
            res.initData.master.bpHatch = 0;//开口赋默认值
            res.initData.master.bpAdjBorder = 0;//修边赋默认值
            this.initData = res;
            this.formDataInfo['master'] = JSON.parse(JSON.stringify(res.initData.master));
          });
        },
        getLbList(artId) {
          //根据纸质ID,查询纸质对应的愣别列表
          request.post('/bas/art/item/list', {
            artId: artId
          }).then(res => {
            if (res.length > 0) {
              this.lbCodeList = res;
            } else {
              this.$Message.error(this.$t('product.edit.artLbNotFound'));
            }
          }).catch(() => {
            this.$Message.error(this.$t('product.edit.lbLoadError'));
          });
        },
        submitFormData(submitDataObj) {
          //提交表单数据
          return new Promise((resolve, reject) => {
            request.post('/bas/product/saveOrUpdate', submitDataObj).then(res => {
              resolve(res);
            }).catch((err) => {
              reject(err);
            });
          })
        },
        getCalProductSizeValue(custId, bpPBoxId, lengId, pSize, type) {
          /**
           * 获取计算的生产规格
           * 参数：客户id(custId),生产盒式id(bpPBoxId),楞别id（lengId),
           * 客方规格(pSize),type:类型（L,W,H）
           */
          request.fsLoading = true;
          return new Promise((resolve, reject) => {
            let requestDataObj = {
              custId: custId,
              bpPBoxId: bpPBoxId,
              lengId: lengId,
              pSize: pSize,
              type: type
            };
            request.post('/bas/product/calProductSize', requestDataObj).then(res => {
              if (res != null) {
                resolve(res);
              } else {
                reject();
              }
            }).catch(err => {
              reject(err);
            })
          });
        },
        getCalMaterialDataList(requestDataObj) {
          //计算用料
          request.fsLoading = true;
          return new Promise((resolve, reject) => {
            request.post('/bas/product/calMaterialData', requestDataObj).then(res => {
              resolve(res);
            }).catch(err => {
              reject(err);
            })
          })
        },
        getCalProductSizeByDiameterObj(requestDataObj) {
          //内径改变计算生产规格
          request.fsLoading = true;
          return new Promise((resolve, reject) => {
            request.post('/bas/product/calProductSizeByDiameter', requestDataObj).then(res => {
              resolve(res);
            }).catch(err => {
              reject(err);
            })
          })
        },
        getCalcBoxExpressionsObj(requestDataObj) {
          //计算面积，体积，单重等
          request.fsLoading = true;
          return new Promise((resolve, reject) => {
            request.post('/bas/product/calcBoxExpressions', requestDataObj).then(res => {
              resolve(res);
            }).catch(err => {
              reject(err);
            })
          })
        },
        //controller end
        //handler start
        calcProductSize(custSpecValue, type) {
          /**custSpecValue:客方规格，长|宽|高 的值
           *type：类型  L|W|H
           * productSpecFieldName:生产规格字段名称
           * 计算生产规格，什么时候计算？
           * 当内径被选中的时候，才需要计算生产规格的长宽高，否则直接就等于客方的长宽高
           */
          if (custSpecValue == undefined || custSpecValue == null || custSpecValue == '') {
            return;
          }
          if (!this.formDataInfo.master.bpIsDiameter) {
            if (type == 'L') {
              this.formDataInfo.master.bpPSizeL = custSpecValue;
            } else if (type == 'W') {
              this.formDataInfo.master.bpPSizeW = custSpecValue;
            } else if (type == 'H') {
              this.formDataInfo.master.bpPSizeH = custSpecValue;
            }
            return;
          }
          //请求服务器
          let custId = this.formDataInfo.master.custId;
          let bpPBoxId = this.formDataInfo.master.bpPBoxId;
          let lengId = this.formDataInfo.master.lengId;
          this.getCalProductSizeValue(custId, bpPBoxId, lengId, custSpecValue, type).then(res => {
            if (type == 'L') {
              this.formDataInfo.master.bpPSizeL = res;
            } else if (type == 'W') {
              this.formDataInfo.master.bpPSizeW = res;
            } else if (type == 'H') {
              this.formDataInfo.master.bpPSizeH = res;
            }
          }).catch(err => {

          })
        },
        calcUseMaterialNum() {
          /**
           * 针对于纸板规格
           * 计算用料系数
           * 双片：2*1/总开数/模数
           * 单片：1*1/总开数/模数
           * 修边=用料宽-净料宽*纸度开
           * 纸度开=用料规格宽/净料规格宽
           * 纸长开=用料规格长/净料规格长
           * 总开数=纸度开*纸长开
           */
          if (!this.formDataInfo.productMDatas) {
            return;
          }
          let _self = this;
          this.formDataInfo.productMDatas.defaultList.forEach((item, index) => {
            //计算纸度开 纸度开=用料规格宽/净料规格宽
            let bmKsW = calc.div(item.bmSizeW, item.bmSSizeW);
            item.bmKsW = isNaN(bmKsW) ? item.bmKsW : Math.floor(bmKsW);
            //计算纸长开 纸长开=用料规格长/净料规格长
            let bmKsL = calc.div(item.bmSizeL, item.bmSSizeL);
            item.bmKsL = isNaN(bmKsL) ? item.bmKsL : bmKsL;
            //总开数=纸度开*纸长开
            let bmKsTotal = calc.mul(item.bmKsW, item.bmKsL);
            item.bmKsTotal = isNaN(bmKsTotal) ? item.bmKsTotal : bmKsTotal;
            //计算修边
            let bmAdjBorder = calc.sub(item.bmSizeW, calc.mul(item.bmSSizeW, item.bmKsW));
            item.bmAdjBorder = isNaN(bmAdjBorder) ? item.bmAdjBorder : bmAdjBorder;
            //计算用料系数
            let modulus = 1;
            if (item.bmDoubleCut) { //双片
              modulus = 2;
            }
            let qty = calc.div(modulus, calc.div(item.bmKsTotal, _self.formDataInfo.master.bpMoCut));
            item.bmQty = qty;
          })
        },
        calcProductSizeByDiameter() {
          if(this.action == 'update' && this.updateFirstRequstIntercept){
            return;
          }
          /**
           * 内径发生改变，需要计算生产规格
           */
          let master = this.formDataInfo.master;
          if (master.bpPSizeL == '' && master.bpPSizeW == '' && master.bpPSizeH == '') {
            return;
          }
          if (!this.formDataInfo.master.bpIsDiameter) {
            this.formDataInfo.master.bpPSizeL = this.formDataInfo.master.bpCSizeL;
            this.formDataInfo.master.bpPSizeW = this.formDataInfo.master.bpCSizeW;
            this.formDataInfo.master.bpPSizeH = this.formDataInfo.master.bpCSizeH;
            return;
          }

          let requestDataObj = {
            custId: master.custId,
            bpPBoxId: master.bpPBoxId,
            lengId: master.lengId,
            bpCSizeL: master.bpCSizeL,
            bpCSizeW: master.bpCSizeW,
            bpCSizeH: master.bpCSizeH
          }
          this.getCalProductSizeByDiameterObj(requestDataObj).then(res => {
            if (res.bpPSizeL != null) {
              this.formDataInfo.master.bpPSizeL = res.bpPSizeL;
            }
            if (res.bpPSizeW != null) {
              this.formDataInfo.master.bpPSizeW = res.bpPSizeW;
            }
            if (res.bpPSizeH != null) {
              this.formDataInfo.master.bpPSizeH = res.bpPSizeH;
            }
            //需要获取纸质规格
            //this.calMaterialData();
          })
        },
        calcBoxExpressions() {
          if(this.action == 'update' && this.updateFirstRequstIntercept){
            return;
          }
          /**
           * 计算面积，体积，单重等
           * 用料规格，净料规格，双片，修边都取纸板规格第一条数据
           */
          let master = this.formDataInfo.master;
          if (this.productMDatasTableDataList.length == 0) {
            return;
          }
          //需要对关键字段进行校验，如果为空，就不能去请求
          let subData = this.productMDatasTableDataList[0];
          let requestDataObj = {
            "artCode": master.bpPArtCode,
            "bmDoubleCut": true,
            "bmSSizeL": subData.bmSSizeL,
            "bmSSizeW": subData.bmSSizeW,
            "bmSizeL": subData.bmSizeL,
            "bmSizeW": subData.bmSizeW,
            "boxCode": master.bpPBoxCode,
            "bpHatch": master.bpHatch,
            "coDate": '2020-02-01 09:59:49', //有点问题，但是不这么写后台会报错，先暂时这么处理.@白羊 2020.02.26
            "custId": master.custId,
            "kQty": 0,
            "lbCode": master.lbCode,
            "moCut": master.bpMoCut,
            "orderQty": 0,
            "sizeHeight": master.bpCSizeH,
            "sizeLength": master.bpCSizeL,
            "sizeProHeight": master.bpPSizeH,
            "sizeProLength": master.bpPSizeL,
            "sizeProWidth": master.bpPSizeW,
            "sizeWidth": master.bpCSizeW,
            "specPrice": 0,
            "unit": master.bpUnit,
            "waste": master.bpAdjBorder
          };
          this.getCalcBoxExpressionsObj(requestDataObj).then(res => {
            //单面积
            this.formDataInfo.master.bpSArea = res.bp_SArea;
            //客户单面积
            this.formDataInfo.master.bpCustSArea = res.bp_CustSArea;
            //单重
            this.formDataInfo.master.bpSWeight = res.bp_SWeight;
            //客方单重
            this.formDataInfo.master.bpCustSWeight = res.bp_CustSWeight;
            //单体积
            this.formDataInfo.master.bpSCube = res.bp_SCube;
          });
        },
        buildMaterialRequestData(){
          //构建用料参数组装
          let master = this.formDataInfo.master;
          let validatorFields = ['custId', 'bpUnit', 'bpCArtCode', 'bpPBoxCode', 'bpPSizeL', 'bpPSizeW', 'lbCode'];
          //校验，每个参数都必须有值，否则请求后台会返回多个参数错误的异常提示
          for (let i = 0; i < validatorFields.length; i++) {
            let value = master[validatorFields[i]];
            if (value == undefined || value == null || value === '') {
              return;
            }
          }

          let requestDataObj = {
            artCode: master.bpCArtCode,
            biPrepQty: 0,
            boxCode: master.bpPBoxCode,
            bpHatch: master.bpHatch,
            bpIsFullPrint: master.bpIsFullPrint,
            bpMoCut: master.bpMoCut,
            bpPlateNo: master.bpDPNo,
            custId: master.custId,
            lbCode: master.lbCode,
            orderQty: 1,
            sizeLength: master.bpPSizeL,
            sizeWidth: master.bpPSizeW,
            sizeHeight: master.bpPSizeH,
            unit: master.bpUnit,
            waste: 0
          }
          return requestDataObj;
        },
        calcMaterialData() {
          if(this.action == 'update' && this.updateFirstRequstIntercept){
            return;
          }
          /**
           *计算用料
           * 客戶號不能為空或客戶號不存在
           * 紙度單位沒設置
           * 开单單位不能為空
           * 生產紙質不能為空或不存在
           * 生產盒式不能為空或不存在
           * 規格之長與寬不能為零
           * 數量不能為零
           * 紙度表沒設置, 不能進行計算!
           * 最小紙長大于最大紙長
           */
          let requestDataObj = this.buildMaterialRequestData();
          if(!requestDataObj){
            return;
          }
          this.getCalMaterialDataList(requestDataObj).then(res => {
            /**
             * 得到结果之后，需要对数据进行处理，处理的原则是根据bmIndex字段来判断，多条数据中，如果
             * bmIndex都相同，那么就只显示相同的第一条数据
             */
            let flag = -1;
            this.productMDatasTableDataList = [];
            this.productMDatasTableDataListCache = res;
            res.forEach((item,index) => {
              if(flag != item.bmIndex){
                flag = item.bmIndex;
                if(item.bmIndex && item.bmIndex == 0){
                  item.bmIndex = (index + 1);
                }
                this.productMDatasTableDataList.push(item);
              }
            });
            //计算完用料之后，加载体积等。。。
            //this.calcBoxExpressions();
          })
        },
        buildProductworkProcsSubmitData(){
          /**
           * 构建纸板规格提交数据结构，编辑的时候情况比较麻烦，所以自行构造数据结构，
           * 基本思路是：编辑的时候数据存放在defaultList里面，同时这些数据也会放在productMDatasTableDataList里面
           * 最终的操作也是针对productMDatasTableDataList
           * 所以，在最后构建数据的时候和defaultList里面的数据比较，ID相同的就是修改，没有ID的就是添加，ID已经不存在的就是删除
           */
          //如果list中没有数据，那么直接调用eTable中的方法获取
          if(this.formDataInfo.productMDatas.defaultList.length == 0){
            return this.$refs.slave_edit_productMDataFm.getCategorizeData();
          }
          /**
           * 存在数据就需要比较，最终数据结构为
           * {
           *    addList:[],
           *    updateList:[],
           *    deleteList:[]
           * }
           */
          let productMDatas = {
            addList:[],
            updateList:[],
            deleteList:[]
          };
          //下面开始比较
          //找新增
          let productMDatasTableTempData = {};
          this.productMDatasTableDataList.forEach((item) => {
            //ID不存在就是添加
            if(item.id == undefined || item.id == null || item.id == ''){
              productMDatas.addList.push(item);
            }else{
              productMDatasTableTempData[item.id] = item;
            }
          });
          //找修改和删除
          this.formDataInfo.productMDatas.defaultList.forEach((item)=>{
            if(productMDatasTableTempData[item.id] == undefined){
              productMDatas.deleteList.push(item);
            }else{
              productMDatas.updateList.push(item);
            }
          });
          return productMDatas;
        },
        closeActionTigger(){
          //清空表单数据
          this.formDataInfo.master = JSON.parse(JSON.stringify(this.initData.initData.master));
          this.$refs.masterForm.resetFields();
          this.$refs.slave_edit_productMDataFm.reset();
          this.$refs.ProductWorkProc.reset();
          this.productMDatasTableDataList = [];
          this.formDataInfo.productworkProcs.defaultList = [];
          this.updateFirstRequstIntercept = true;
          clearTimeout(this.updateFirstRequstTimeoutId);
        },
        //handler end
        //event start
        lbCodeChangedEvent(selectItem){
          //愣别发生改变
          if(selectItem.label){
            this.formDataInfo.master.lbCode = selectItem.label;
          }
        },artPopupFillEvent(data){
          //选择纸质后的填充事件
          //加载愣别数据，已经默认选中第一条数据
          let artId = data[0].data.bpCArtId;
          if (artId != undefined && artId !='') {
            this.getLbList(artId);
          }
        },
        bpCSizeLBlurEvent(){
          //客方长失去焦点事件
          //更新生产规格长数据
          //this.formDataInfo.master.bpPSizeL = this.formDataInfo.master.bpCSizeL;
          //计算生产规格长
          this.calcProductSize(this.formDataInfo.master.bpCSizeL,'L');
          //计算用料
          //this.calcMaterialData();
        },
        bpCSizeWBlurEvent(){
          //客方宽失去焦点事件
          //this.formDataInfo.master.bpPSizeW = this.formDataInfo.master.bpCSizeW;
          this.calcProductSize(this.formDataInfo.master.bpCSizeW,'W');
          //this.calcMaterialData();
        },
        bpCSizeHBlurEvent(){
          //客方高失去焦点事件
          //this.formDataInfo.master.bpPSizeH = this.formDataInfo.master.bpCSizeH;
          this.calcProductSize(this.formDataInfo.master.bpCSizeH,'H');
          //this.calcMaterialData();
        },
        paperSpecSelectRenderEvent(selectData){
          //纸板规格选中回调事件
          let newSpecData = Object.assign(this.productMDatasTableDataList[this.productMDatasDBClickIndex],selectData);
          this.$refs.slave_edit_productMDataFm.set(newSpecData,this.productMDatasDBClickIndex);
        },
        paperSpecRowDBClickEvent(rowIndex,rowData){
          //纸板规格行被双击事件
          debugger;
          let requestDataObj = this.buildMaterialRequestData();
          if(!requestDataObj){
            return;
          }
          this.productMDatasDBClickIndex = rowIndex;
          this.productSpecShow = true;
          //调用弹出框，加载数据方法，加载弹出框数据
          this.$refs.productSpec.loadData(requestDataObj,rowData.bmIndex);
        },submitFormDataEvent(){
          //表单数据提交事件
          this.$refs.masterForm.validate((valid) => {
            //主表校验失败
            if (!valid) {
               return;
            }
             //纸板规格校验 true就是有问题
            let result = this.$refs.slave_edit_productMDataFm.validate();
            if(result){
              return;
            }
            //生产工序校验
            result = this.$refs.ProductWorkProc.validate();
            if(result){
              return;
            }
            /**
             * 组装提交的数据结构
             * {master:{},productMDatas:{},productworkProcs:{}}
             */
            let productMDatasData = this.buildProductworkProcsSubmitData();
            let productworkProcsData = this.$refs.ProductWorkProc.getCategorizeData();
            let submitDataObj = {
              master : this.formDataInfo.master,
              productMDatas : productMDatasData,
              productworkProcs : productworkProcsData
            }
            //提交数据
            this.submitFormData(submitDataObj).then(res => {
              this.$Message.success(this.$t('common.handlerSuccess'));
              this.$emit('submit-success');
              this.closeActionTigger();
              this.showWindow = false;
            })
          })
        }
    },
    created() {
      this.getFormInitDataObj(); //获取初始化数据
      this.getPressingLineTypeList(); //获取压线类型列表
      this.getPressingLineDeepList(); //获取压线深度列表
    },
    updated() {
      if (this.$refs.masterForm) {
        let height = document.body.offsetHeight;
        this.tableDefaultHeight = height - (this.$refs.masterForm.$el.offsetHeight + 60 + 50 + 40);
      }
    }
  };
</script>

<style>
  .cl-edit-product .ivu-form-item {
    margin-bottom: 5px !important;
  }

  .cl-edit-product .ivu-select-item {
    display: block;
  }

  .number-box {
    display: flex;
    line-height: 24px;
    align-items: center;
    padding: 5px 12px 5px 0;
  }

  .number-box span {
    padding: 0 0.3125rem;
  }

  .ivu-input-number-small {
    width: 100% !important;
  }

  .ivu-form-item-text2 .ivu-form-item-label {
    width: 2.8125rem !important;
  }

  .ivu-form-item-text2 .ivu-form-item-content {
    margin-left: 2.8125rem !important;
  }

  .edit-product {
    display: flex;
  }
</style>
