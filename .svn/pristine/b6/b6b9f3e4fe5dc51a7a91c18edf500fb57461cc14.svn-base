<template>
  <div>
    <editWindow
      class="cl-edit-boxUseRe"
      :title="actionLableName"
      v-model="showWindow"
      :fullscreen="false"
      width="90%"
      :loading="!isLoaddingDone"
      :spinLoaddingText="spinLoaddingText"
      @on-ok="formTableDataSubmit()"
      v-if="initData.columns"
    >
      <Form
        ref="formDataInfo"
        :show-message="true"
        :model="formDataInfo.master"
        :rules="ruleValidate"
        :label-width="100"
      >
        <Row>
          <Col span="12">
            <Row>
              <Col span="12">
                <FormItem label="退货单号" prop="burNo">
                  <Input disabled v-model="formDataInfo.master.burNo" maxlength="20" placeholder></Input>
                </FormItem>
              </Col>
              <Col span="12">
                <FormItem label="日期">
                  <DatePicker
                    :disabled="detailDisabled"
                    type="date"
                    format="yyyy-MM-dd HH:mm:ss "
                    v-model="formDataInfo.master.burDate"
                  ></DatePicker>
                </FormItem>
              </Col>
            </Row>
          </Col>
          <Col span="12">
            <Row>
              <Col span="12">
                <FormItem label="供应商编号" prop="supplierCode">
                  <div>
                    <popup
                      ref='firstFocusInput'
                      :disabled="detailDisabled||action!=='add'"
                      @on-fill="Initializationdata($event,'supplierCode')"
                      v-model="formDataInfo.master.supplierCode"
                      field-name="supplierCode"
                      popup-name="SupplierSingleBox"
                      :fill-model.sync="formDataInfo.master"
                      render-fields="supplierId,supplierCode,supplierName,curyId,taxTp,taxRat,hbRate,coinId,priceAreaMode"
                      from-fields="id,purCode,purName,coinCode,taxTP,taxRate,coinRate,coinId,priceAreaMode"
                      :suffix="true"
                      :suffix-model="formDataInfo.master.supplierName"
                      :query-params="{}"
                    />
                  </div>
                </FormItem>
              </Col>
              <Col span="12">
                <FormItem label="车牌号" prop="carNo">
                  <!-- <Input v-model="formDataInfo.master.carNo" maxlength="20" placeholder></Input> -->
                  <div>
                    <popup
                      v-model="formDataInfo.master.carNo"
                      field-name="carNo"
                      popup-name="CarSingleBox"
                      :fill-model.sync="formDataInfo.master"
                      render-fields="carId,carNo,owner"
                      from-fields="id,carNo,owner"
                      :suffix="false"
                      :blurFocusLoadData='false'
                    />
                  </div>
                </FormItem>
              </Col>
            </Row>
          </Col>
          <Col span="6">
            <FormItem label="月结日期" prop="burMonthDate">
              <DatePicker
                :disabled="detailDisabled"
                type="date"
                format="yyyy-MM-dd HH:mm:ss "
                v-model="formDataInfo.master.burMonthDate"
              ></DatePicker>
            </FormItem>
          </Col>
          <Col span="6">
            <FormItem label="金额" prop="burMoney">
              <Input disabled v-model="formDataInfo.master.burMoney" maxlength="20" placeholder></Input>
            </FormItem>
          </Col>
          <Col span="6">
            <FormItem label="数量" prop="burQty">
              <Input disabled v-model="formDataInfo.master.burQty" maxlength="20" placeholder></Input>
            </FormItem>
          </Col>
          <Col span="6">
            <FormItem label="月结" prop="iisAcc">
              <Checkbox disabled v-model="formDataInfo.master.iisAcc" maxlength="20" placeholder></Checkbox>
            </FormItem>
          </Col>
          <Col span="6">
            <FormItem label="退货原因" prop="reason">
              <div>
                <popup
                  :disabled="detailDisabled"
                  @on-fill="Initializationdata($event,'reason')"
                  v-model="formDataInfo.master.reason"
                  field-name="reason"
                  popup-name="BasFadeReasonSingleBox"
                  :fill-model.sync="formDataInfo.master"
                  render-fields="reason,frCode"
                  from-fields="frName,frCode"
                  :blurFocusLoadData='false'
                  :query-params="{}"
                />
              </div>
            </FormItem>
          </Col>
          <Col span="6">
            <FormItem label="备注">
              <Input
                :disabled="detailDisabled"
                v-model="formDataInfo.master.remark"
                maxlength="100"
                :autosize="{ minRows: 1, maxRows: 2 }"
                placeholder="请输入备注..."
              ></Input>
            </FormItem>
          </Col>
        </Row>
      </Form>

      <Tabs>
        <!--  注意:eTable formDataInfo.artLengs.defaultList  ===artLengs=== 需要根据实际接口修改,其它不变-->
        <TabPane label="纸板退货明细" name="name1">
          <eTable
            ref="tableFields"
            unqiue-mark="id"
            :index-menu="true"
            :col-start="0"
            :width="200"
            :height="400"
            :insertDirection="insertDirection"
            :row-init-data="initData.initData.stockBoxUseReItemFm"
            :data.sync="formDataInfo.boxUseReItemSlave.defaultList"
            :rules="tableFieldsValidator"
            :showContextMenu="!detailDisabled"
            v-if="showWindow"
          >
            <template slot="head">
              <tr
                v-for="(columnGroup,index) in initData.columns.stockBoxUseReItemFm.editGroups"
                :key="index"
              >
                <th
                  :class="`ivu-table-column-${column.titleAlign}`"
                  v-for="(column,index2) in columnGroup"
                  :key="index2"
                  :width="column.editWidth"
                  :colspan="column.colSpan"
                  :rowspan="column.rowSpan"
                  :columnKey="column.key"
                  style="text-align:center;"
                >
                  <div class="ivu-table-cell">
                    <span class>{{column.title}}</span>
                  </div>
                </th>
              </tr>
            </template>

            <template slot="body" slot-scope="{ row, index, valueChangeAssign }">
              <td
                :class="`ivu-table-column-${column.align}`"
                v-for="(column,columnIndex) in initData.columns.stockBoxUseReItemFm.editColumns"
                :key="columnIndex"
                :width="column.editWidth"
              >
                <!--批次号 -->
                <Input
                  v-if="column.key == 'boxUseBatchOn'"
                  v-model="row[column.key]"
                  field-name="boxUseBatchOn"
                  :disabled="detailDisabled||!!(row['id'])"
                  @on-blur="onFill(index)"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'boxUseBatchOn');
                      }
                    "
                  size="small"
                  :maxlength="20"
                >
                  <Icon @click="Slave_list_table_editRowModify(index)" slot="suffix" type="md-add" v-show="!(row['id'])"/>
                </Input>
                <!-- 退货数 -->
                <inputNumber
                  v-else-if="column.key == 'qty'"
                  v-model="row[column.key]"
                  field-name="qty"
                  :min=1
                  :disabled="detailDisabled"
                  @on-blur="changeQty(value, index, row,'qty')"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'qty');
                      }
                    "
                  size="small"
                  :maxlength="20"
                ></inputNumber>
                <formControl
                  v-else
                  :control-type="column.controlType"
                  v-model="row[column.key]"
                  :disabled="detailDisabled||column.readOnly"
                  @input="value => {valueChangeAssign(value, index, row,column.key)}"
                ></formControl>
              </td>
            </template>
          </eTable>
        </TabPane>
      </Tabs>
    </editWindow>
    <boxUseReSlave
      ref="mychild"
      :isLoaddingDone="salveWindow.isLoaddingDone"
      :formDetailData="salveWindow.formDetailData"
      :action="salveWindow.action"
      v-model="salveWindow.showEditWindow"
      :List="List"
      :batchNoList="batchNoList"
      :inSupplierId="inSupplierId"
      :WorkOrderNumber="WorkOrderNumber"
      @closeMain="closeMain"
    />
  </div>
</template>

<script>
/**
 * @desc edit-dept 描述
 * 所有重要 可以重用的方法 放在了基类,继承即可用重复使用 dyBaseMixins,
 * 可以根据需求重写所需的方法:
 *
 * @params 参数
 *
 * @return 返回
 *
 * @author ming xing
 *
 * @created 2020/03/23 17:07:54
 */
import inputNumber from '@/components/input-number'
import referenceField from '@/components/referenceField/referenceField'
import popup from '@/components/popup/popup'
import editWindow from '@/components/edit-window/edit-window'
import eTable from '@/components/e-table/e-table'
import request from '@/libs/request'
import editBaseMixins from '../../mixins/edit'
import optionSearch from '../../components/optionSearch'
import dayjs from 'dayjs'
import Sys from '@/api/sys'
import formControl from '@/components/form-control/form-control'
import boxUseReSlave from './edit-boxUseReSlave'
import { deepCopy } from 'view-design/src/utils/assist'
const default_formDataInfo = {
  // 主表 更改字段
  master: {
    burNo: '',
    burDate: dayjs().format('YYYY-MM-DD HH:mm:ss'),
    supplierCode: '',
    supplierId: '',
    carNo: '',
    iisAcc: '',
    reason: '',
    burMonthDate: dayjs().format('YYYY-MM-DD HH:mm:ss'),
    remark: '',
    hbRate: 0
  },
  // 子表 artLengs 根据实际接口更改,其它不变
  boxUseReItemSlave: {
    addList: [], // 添加列
    defaultList: [], // 默认列
    deleteList: [], // 删除列
    updateList: [] // 更新列
  }
}
export default {
  name: 'edit-boxUseRe',
  mixins: [editBaseMixins],
  components: {
    editWindow,
    optionSearch,
    eTable,
    popup,
    formControl,
    referenceField,
    boxUseReSlave,
    inputNumber
    // rightMenu
    // Form,
  },
  data () {
    return {
      insertDirection: 'down',
      salveWindow: {
        // Tips:"提示：此窗口只显示有供应商纸质/纸板进价的工单！",
        isLoaddingDone: false, // 窗口是否加载完成
        showEditWindow: false, // 是否显示edit-boxSalesOrderSlave 编辑窗口
        action: null, // 当前操作功能 添加/编辑
        formDetailData: {} // 当前表单的详细信息
      },
      pliLostTypeList: [], // 报损类型
      showContextMenu: true,
      showEditMenu: false,
      actionSubtitle: '纸板退货', // 当前操作副标题
      id: 0,
      formName: 'stockBoxUseReItemFm',
      formmasterName: 'stockboxUseReFm',
      requestBaseUrl: '/stock/BoxUseRe', // 请求 查询 操作的基础路径
      // formDataInfo: Object.assign({}, default_formDataInfo), // 防止添加和更新数据提交发生冲突
      formDataInfo: deepCopy(default_formDataInfo), // 防止添加和更新数据提交发生冲突
      // 需要验证的数据
      ruleValidate: {
        supplierCode: [
          {
            required: true,
            message: '供应商编号不能为空',
            trigger: 'blur'
          }
        ]
      },
      tableFieldsValidator: {
        // qty: [
        //   {
        //     required: true,
        //     message: '退货数不能为空',
        //     trigger: 'blur',
        //     type: 'number'
        //   },
        //   {
        //     pattern: /^[1-9]\d*$/,
        //     trigger: 'blur',
        //     message: '退货数量必须是正整数'
        //   }
        // ]
      },
      subBoxClickIndex: -1,
      getworkerId: 0,
      List: 'null', // 传给用料批次号的参数
      WorkOrderNumber: 'null',
      index1: 0, // 工单号里面用
      inSupplierId: null,
      batchNoList: ''
    }
  },
  created () {
    // this.getpliLostTypeList()//报损类型
  },
  methods: {
    // 判断一个值是数字
    myIsNaN (value) {
      return typeof value === 'number' && !isNaN(value)
    },
    // 数据传递
    transformation (selectedValue) {
      // debugger;
      let transData = JSON.parse(
        JSON.stringify(this.initData.initData.stockBoxUseReItemFm)
      )
      // transData.boxUseBatchOn = selectedValue.boxUseBatchOn; //用料批次号
      transData.artCode = selectedValue.artCode // 纸质
      transData.artId = selectedValue.artId // 纸质id
      transData.boxUseBatchOn = selectedValue.boxUseBatchOn // 批次号
      // transData. = selectedValue.iisChose                         //
      transData.iisAcc = selectedValue.iisAcc // 月结
      transData.lbCode = selectedValue.lbCode // 楞别
      transData.lengId = selectedValue.lengId // 楞别ID
    
      transData.dueDate = selectedValue.pjDate // 入库时间
      transData.briArea = selectedValue.ppoArea.toFixed(2) // 面积
      transData.price = this.formatSupplierCtPrice(selectedValue.price)  // 单价
      transData.kQty = selectedValue.psQty // 库存数
      transData.inQty = selectedValue.qty // 入库数量
      transData.quotePrice = selectedValue.quotePrice // 报价
      transData.rQty = selectedValue.rQty // 已退货数
      transData.remark = selectedValue.remark // 备注
      transData.briSArea = selectedValue.sArea // 单面积
      transData.sizeLength = selectedValue.sizeL // 纸长
      transData.sizeLine = selectedValue.sizeLine // 压线
      transData.sizeWidth = selectedValue.sizeW // 纸宽
      transData.supplierArtId = selectedValue.supplierArtId // 供应商纸质
      transData.supplierArtName = selectedValue.supplierArtName // 供应商纸质suppplierArtName
      transData.stationId = selectedValue.wareHouseItId // 仓位id
      transData.workNo = selectedValue.workNo // 工单号
      transData.stationCode = selectedValue.wsCode // 仓位编号
      transData.stationName = selectedValue.wsName // 仓位名称

      transData.partName = selectedValue.partName // 产品名称
      transData.prodNo = selectedValue.prodNo // 产品编号
      transData.partNumer = selectedValue.partNumer // 料号

      transData.qty = transData.kQty // 退货数=库存数
      transData.briSWeight = selectedValue.briSWeight // 单重
      transData.briWeight = selectedValue.briWeight.toFixed(2) // 重量
      transData.pjNumber = selectedValue.pjNumber // 入库单号
      transData.money = this.formatSupplierAmtPrice(Number(transData.price) * Number(transData.qty)) // 金额 = 单价* 数量
      if(!!this.formDataInfo.master.priceAreaMode){
        // 金额 =  单面积 * 数量 * 报价
          transData.money =this.formatSupplierAmtPrice(Number(row.briSArea) * Number(row.qty) *Number(row.quotePrice)) 
      }
      return transData
    },
    // 接受工单号传回来的数据
    closeMain (selectedValues) {
      // debugger;
      let pushData = []
      // 获取子表数据
      let sundata = this.$refs['tableFields'].get()
      selectedValues.forEach(selectedValue => {
        let transData = this.transformation(selectedValue)
        pushData.push(transData)
      })
      this.sumMoneytotal()
      // 用料批次号唯一校验
      let hiddensundata = {}
      for (let index = 0; index < sundata.length; index++) {
        if (sundata[index].boxUseBatchOn != '') {
          let key = JSON.stringify(sundata[index].boxUseBatchOn)
          let value = index
          hiddensundata[key] = value
        }
      }
      for (let i = pushData.length - 1; i >= 0; i--) {
        if (
          hiddensundata[JSON.stringify(pushData[i].boxUseBatchOn)] != undefined
        ) {
          this.$Message.error(
            pushData[i].boxUseBatchOn + '该用料批次号已经存在'
          )
          pushData.splice(i, 1)
        }
      }
      let index2 = this.index1
      for (let a = 0; a < pushData.length; a++) {
        this.$refs['tableFields'].set(pushData[a], index2)
        index2++
      }
      this.sumMoneytotal()
    },
    // 工单号失去焦点带出参数事件
    onFill (index) {
      let pushData = []
      let dataList = this.formDataInfo.boxUseReItemSlave.defaultList
      // 获取供应商编号
      let supplierCode = this.formDataInfo.master.supplierCode
      // 获取纸质
      let artCode = dataList[index]
        .artCode
      // 获取工单号
      let workNo = dataList[index]
        .workNo
      // 获取批次号
      let boxUseBatchOn =dataList[index]
        .boxUseBatchOn
      // 获取当前子表数据
      // let two = this.formDataInfo.boxUseReItemSlave.defaultList[index];
      // 明细表数据
      let tabData = this.$refs['tableFields'].cloneData
      // 获取子表初始化时的数据
      let defulit = this.initData.initData.stockBoxUseReItemFm
      if (!supplierCode) {
        this.$Message.error('供应商编号不能为空')
        return
      }
      let batchNoList = this.getbatchNoList(index)
      if (!!boxUseBatchOn && !!!workNo) {
      request
        .post(`/stock/BoxUseRe/getWorkInStore`, {
          inBatchNo: boxUseBatchOn,
          flag: '1',
          inSupplierId: this.formDataInfo.master.supplierId,
          batchNoList
        })
        .then(res => {
          // debugger;
          let data = res.records[0]
          if (data === [] || data === undefined) {
            this.$Message.error('批次号错误或已存在')
            // $set(要修改的对象,索引,属性的值是啥)
            this.$refs['tableFields'].set(JSON.parse(JSON.stringify(this.initData.initData.stockBoxUseReItemFm)), index)
            return
          }
          res.records.forEach(selectedValue => {
            let transData = this.transformation(selectedValue)
            pushData.push(transData)
          })
          this.$refs['tableFields'].set(pushData, index)
          this.sumMoneytotal()
        })
     }
    },
    // 获取批次号过滤字段
    getbatchNoList (dataindex) {
      let batchNoList = ''
      let dataList = this.formDataInfo.boxUseReItemSlave.defaultList
       dataList.filter((item, index, data) => {
        if(!!item.boxUseBatchOn && !!item.workNo){
          if(!!!batchNoList){
            batchNoList += item.boxUseBatchOn
          }else{
            batchNoList += ',' + item.boxUseBatchOn
          }
        }
      })

      return batchNoList
    },
    // 工单号点击事件
    Slave_list_table_editRowModify (index) {
      // debugger;
      let batchNoList = this.getbatchNoList(index)
      let tabData = this.$refs['tableFields'].cloneData
      if (this.formDataInfo.master.supplierCode) {
        this.inSupplierId = this.formDataInfo.master.supplierId
        this.salveWindow.showEditWindow = true
        this.index1 = index
        this.batchNoList = batchNoList
        let ppuer = this.salveWindow.showEditWindow
        this.salveWindow.action = 'add'
        this.salveWindow.isLoaddingDone = true
        request
          .post(`/stock/BoxUseRe/getWorkInStore`, {
            // inBatchOn: "",
            batchNoList,
            inSupplierId: this.formDataInfo.master.supplierId,
            pageNum:this.pageConfig.pageNum,//(当前页),
            pageSize:this.pageConfig.pageSize,//(每页显示条数)
          })
          .then(res => {
            this.WorkOrderNumber1 = res
            // console.log(res)
            this.$refs.mychild.getFormInitDataObj(res)
          })
      } else {
        this.salveWindow.showEditWindow = false
        this.$Message.error('供应商编号不能为空')
      }
    },
    // 判断数据是新增还是修改
    formDetailDataCall () {
      if (this.action != 'add') {
        this.getworkerId = this.formDataInfo.master.workerId
        this.id = this.formDataInfo.master.id
        this.supplierPriceFormatConfig = {
         amtDot: Number(this.formDataInfo.master.amtDot) , //金额小数位
         ctDot:Number(this.formDataInfo.master.ctDot),// 单价小数位
       }
      }
    },
    // 当主表弹框改变时促发初始化子表数据
    Initializationdata (data,value) {
      //debugger;
      if(!!!data[0].data[value]){
        return
      }
      if(value =='supplierCode'){
         this.supplierPriceFormatConfig = {
         amtDot:Number(data[0].orignData.amtDot), //金额小数位
         ctDot:Number(data[0].orignData.amtDot),// 单价小数位
       }
      }
      this.$refs["formDataInfo"].validateField(value, err => {});
      let tableData = this.$refs['tableFields'].getCategorizeData()
      if (this.formDataInfo.master.workerId) {
        if (this.formDataInfo.master.workerId != this.getworkerId) {
          this.formDataInfo.boxUseReItemSlave.defaultList = []
          tableData.deleteList = tableData.updateList
        }
        this.getworkerId = this.formDataInfo.master.workerId
      }
    },
    // 主表弹框判空
    clickValuedate () {
      // debugger;
      if (
        !this.formDataInfo.master.workerCode ||
        this.formDataInfo.master.workerCode == ''
      ) {
        this.$Message.error('报损人不能为空')
        return false
      }
      return true
    },
    // 重写父类,添加时候,清空数据
    HandleFormDataInfo () {
      this.formDataInfo = deepCopy(default_formDataInfo)
    },
    // 重写父类,修改提交数据
    resetformDataInfo (_data) {
      // debugger;
      let tableData = this.$refs['tableFields'].getCategorizeData()

      if (_data.master.burDate) {
        _data.master.burDate = dayjs(_data.master.burDate).format(
          'YYYY-MM-DD HH:mm:ss'
        )
      }
      if (_data.master.burMonthDate) {
        _data.master.burMonthDate = dayjs(_data.master.burMonthDate).format(
          'YYYY-MM-DD HH:mm:ss'
        )
      }
      // if (this.action == "update") {
      //   tableData.updateList = _data.boxUseReItemSlave.defaultList;
      // }
      this.formDataInfo.boxUseReItemSlave = tableData
      return this.formDataInfo
    },
    // 退货数改变
    changeQty (value, index, row, keyWorld) {
      if (!(/(^[1-9]\d*$)/.test(row.qty))){
         this.$Message.error('退货数量必须是正整数')
         setTimeout(()=>{
            this.$refs['tableFields'].set({ qty: 0 }, index)
         },300)
         return
      }
      if (row.qty <= row.kQty) {
        let tableData = this.$refs['tableFields'].get()
           //金额 =  单价* 数量
        let money =this.formatSupplierAmtPrice(Number(row.price) * Number(row.qty)) 
        if(!!this.formDataInfo.master.priceAreaMode){
          // 金额 =  单面积 * 数量 * 报价
            money =this.formatSupplierAmtPrice(Number(row.briSArea) * Number(row.qty) *Number(row.quotePrice)) 
        }
        let briWeight = (Number(row.briSWeight) * Number(row.qty)).toFixed(2)
        let briArea = (Number(row.briSArea) * Number(row.qty)).toFixed(2)
        this.$refs['tableFields'].set({money,briWeight,briArea}, index)
      } else {
        this.$Message.error('退货数不能大于库存数')
        this.formDataInfo.master.qty = 0
        setTimeout(()=>{
            this.$refs['tableFields'].set({ qty: 0 }, index)
         },300)
      }
      this.sumMoneytotal()
    },
    // 汇总 数量,金额
    sumMoneytotal () {
      // debugger
      let totalmasterqty = 0,
        totalMoney = 0,
        tableData = this.$refs['tableFields'].get()
      for (let i = 0; i < tableData.length; i++) {
        let qty = Number(tableData[i].qty)
        let money = Number(tableData[i].money)
        if (qty) {
          totalmasterqty += qty
        }
        if (money) {
          totalMoney += money
        }
      }
      this.formDataInfo.master.burQty = totalmasterqty
      this.formDataInfo.master.burMoney = totalMoney
      this.$forceUpdate()
    }
  }
}
</script>

<style>
/* .cl-edit-boxUseRe .ivu-form-item {
  margin-bottom: 5px !important;
} */
.cl-edit-boxUseRe .ivu-select-item {
  display: block;
}
/* .cl-edit-boxUseRe .ivu-input-type-text{
  width: 200px
}*/
.cl-edit-boxUseRe .right-text {
  width: 160%;
}
</style>
