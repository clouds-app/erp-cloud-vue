import axios from 'axios'
import store from '@/store'
// import { Spin } from 'iview'
const addErrorLog = errorInfo => {
  const { statusText, status, request: { responseURL } } = errorInfo
  let info = {
    type: 'ajax',
    code: status,
    mes: statusText,
    url: responseURL
  }
  if (!responseURL.includes('save_error_logger')) store.dispatch('addErrorLog', info)
}

class HttpRequest {
  constructor (baseUrl = baseURL) {
    this.baseUrl = baseUrl
    this.queue = {}
  }
  getInsideConfig () {
    const config = {
      baseURL: this.baseUrl,
      headers: {
        //
      }
    }
    return config
  }
  destroy (url) {
    delete this.queue[url]
    if (!Object.keys(this.queue).length) {
      // Spin.hide()
    }
  }
  interceptors (instance, url) {
    // 请求拦截
    instance.interceptors.request.use(config => {
      // 添加全局的loading...
      if (!Object.keys(this.queue).length) {
        // Spin.show() // 不建议开启，因为界面不友好
      }
      this.queue[url] = true
      return config
    }, error => {
      //return Promise.reject(error)
      if (error && error.statusCode) {
        switch (error.statusCode) {
          case 400:
            error.errMsg = '错误请求'
            break
          case 401:
            error.errMsg = '未授权，请重新登录'
            break
          case 403:
            error.errMsg = '拒绝访问'
            break
          case 404:
            error.errMsg = '请求错误,未找到该资源'
            break
          case 405:
            error.errMsg = '请求方法未允许'
            break
          case 408:
            error.errMsg = '请求超时'
            break
          case 500:
            error.errMsg = '服务器端出错'
            break
          case 501:
            error.errMsg = '网络未实现'
            break
          case 502:
            error.errMsg = '网络错误'
            break
          case 503:
            error.errMsg = '服务不可用'
            break
          case 504:
            error.errMsg = '网络超时'
            break
          case 505:
            error.errMsg = 'http版本不支持该请求'
            break
          default:
            error.errMsg = `连接错误${error.response.status}`
        }
      } else {
        error.errMsg = '连接到服务器失败'
      }
      return Promise.reject(error.errMsg + ' ' + error.statusCode)
    })
    // 响应拦截
    instance.interceptors.response.use(res => {
      this.destroy(url)
      const { data, status } = res
      return { data, status }
    }, error => {
      this.destroy(url)
      addErrorLog(error.response)
      return Promise.reject(error)
    })
  }
  request (options) {
    const instance = axios.create()
    options = Object.assign(this.getInsideConfig(), options)
    this.interceptors(instance, options.url)
    return instance(options)
  }
}
export default HttpRequest
