import { VuexModule, Module, Action, Mutation, getModule } from 'vuex-module-decorators'
import { login, logout, getUserInfo } from '@/api/users'
import { getToken, setToken, removeToken,setUserNameMd5 } from '@/utils/cookies'
import router, { resetRouter } from '@/router'
import { PermissionModule } from './permission'
import { TagsViewModule } from './tags-view'
import store from '@/store'
import {getValidatorToken, getMenuByToken, handlelogin} from '@/api/users';

const errObj =(msg: any) =>{
  let res ={
    data: '',
    msg: '执行失败:' + msg,
    status: -1,
    success: false,
  }
 return res
}

export interface IUserState {
  token: string
  name: string
  avatar: string
  introduction: string
  roles: string[]
  email: string
}

@Module({ dynamic: true, store, name: 'user' })
class User extends VuexModule implements IUserState {
  public token = getToken() || ''
  public name = ''
  public avatar = ''
  public introduction = ''
  public roles: string[] = []
  public email = ''
  public userNameMd5 = ''
  public menuList = {}


  @Mutation
  private SET_NAME(name: string) {
    this.name = name
  }

  @Mutation
  private SET_AVATAR(avatar: string) {
    this.avatar = avatar
  }

  @Mutation
  private SET_INTRODUCTION(introduction: string) {
    this.introduction = introduction
  }

  @Mutation
  private SET_ROLES(roles: string[]) {
    this.roles = roles
  }

  @Mutation
  private SET_EMAIL(email: string) {
    this.email = email
  }

  // mutations 存储用户名加密字符串
  @Mutation
  private SET_USERNAMEMD5(userNameMd5: string) {
    this.userNameMd5 = userNameMd5;
    setUserNameMd5(userNameMd5);
  }
   // mutations 存储token字符串
   @Mutation
   private SET_TOKEN(token: string) {
     this.token = token;
     setToken(token);
   }
   // mutations 存储菜单列表
   @Mutation
   private SET_MENU(menuList: any) {
     this.menuList = menuList;
    // setMenuList(menuList);
   }


  @Action
  public async getUserNameMd5_action(userId: string) {
    try {
        const resObj: any = await getValidatorToken(userId);
        console.log('=======err should not be exc below==============');
        this.SET_USERNAMEMD5(resObj.data);
        return Promise.resolve(resObj);
    } catch (error) {
      let errRes=errObj(error)
      return Promise.resolve(errRes);
    }
  }
/**
* @desc user.handleLogin_action 描述 用户登陆
*
* @params 参数 userId: string, pwd: string
*
* @return 返回 boolean
*
* @author Andy Huang
*
* @created 2019/10/11 17:05:12
*/
@Action
  public async handleLogin_action(userInfo: {userId: string, pwd: string}) {
    // const { userId, pwd } = userInfo;
    try {
        const data: any = await handlelogin(userInfo);
        this.SET_TOKEN(data.data.token);
        return Promise.resolve(data);
    } catch (error) {
      let errRes=errObj(error)
      return Promise.resolve(errRes);
    }
  }
  /**
   * @desc user.getMenuByToken_action 描述 获取菜单列表
   *
   * @params 参数:token in head
   *
   * @return 返回:Json 菜单列表
   *
   * @author Andy Huang
   *
   * @created 2019/10/12 08:29:48
   */
  @Action
  public async getMenuByToken_action() {
    try {
        const { data } = await getMenuByToken();
        this.SET_MENU(data);
        return Promise.resolve(data);
    } catch (error) {
      let errRes=errObj(error)
      return Promise.resolve(errRes);
    }
  }

  @Action
  public async Login(userInfo: { username: string, password: string}) {
    let { username, password } = userInfo
    username = username.trim()
    const { data } = await login({ username, password })
    setToken(data.accessToken)
    this.SET_TOKEN(data.accessToken)
  }

  @Action
  public ResetToken() {
    removeToken()
    this.SET_TOKEN('')
    this.SET_ROLES([])
  }

  @Action
  public async GetUserInfo() {
    if (this.token === '') {
      throw Error('GetUserInfo: token is undefined!')
    }
    const { data } = await getUserInfo({ /* Your params here */ })
    if (!data) {
      throw Error('Verification failed, please Login again.')
    }
    const { roles, name, avatar, introduction, email } = data.user
    // roles must be a non-empty array
    if (!roles || roles.length <= 0) {
      throw Error('GetUserInfo: roles must be a non-null array!')
    }
    this.SET_ROLES(roles)
    this.SET_NAME(name)
    this.SET_AVATAR(avatar)
    this.SET_INTRODUCTION(introduction)
    this.SET_EMAIL(email)
  }

  @Action
  public async ChangeRoles(role: string) {
    // Dynamically modify permissions
    const token = role + '-token'
    this.SET_TOKEN(token)
    setToken(token)
    await this.GetUserInfo()
    resetRouter()
    // Generate dynamic accessible routes based on roles
    PermissionModule.GenerateRoutes(this.roles)
    // Add generated routes
    router.addRoutes(PermissionModule.dynamicRoutes)
    // Reset visited views and cached views
    TagsViewModule.delAllViews()
  }

  @Action
  public async LogOut() {
    if (this.token === '') {
      throw Error('LogOut: token is undefined!')
    }
    await logout()
    removeToken()
    resetRouter()

    // Reset visited views and cached views
    TagsViewModule.delAllViews()
    this.SET_TOKEN('')
    this.SET_ROLES([])
  }
}

export const UserModule = getModule(User)
