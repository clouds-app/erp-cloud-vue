<template>
  <div>
    <editWindow
      class="cl-edit-boxRe"
      :title="actionLableName"
      v-model="showWindow"
      :fullscreen="true"
      width="90%"
      :loading="!isLoaddingDone"
      :spinLoaddingText="spinLoaddingText"
      @on-ok="formTableDataSubmit()"
      v-if="initData.columns"
    >
      <div @contextmenu.prevent ref="masterHeight" class="masterHeightClass" :style="{ height: getMasterheight() + '%' }" >
        <Form
            ref="formDataInfo"
            :show-message="true"
            :model="formDataInfo.master"
            :rules="masterRuleValidate"
            :label-width="80"
            :disabled="detailDisabled"
        >
            <Row type="flex">
            <Col span="6">
                <FormItem label="退货单号" prop="brNo">
                    <Input :disabled="true" v-model="formDataInfo.master.brNo" maxlength="80" placeholder="退货单号"></Input>
                </FormItem>
            </Col>
            <Col span="6">
                <FormItem  label="退货日期" prop="brDate">
                   <DatePicker
                    @on-change="onChange_brBackDate"
                    transfer
                    :clearable="false"
                    v-model="formDataInfo.master.brDate"
                    type="date"
                    format="yyyy-MM-dd"
                  ></DatePicker>
                </FormItem>
            </Col>
            <Col span="6">
                <FormItem label="客户编号" prop="cusCode">
                  <popup
                    ref='firstFocusInput'
                   :beforeOnFillValidator="beforeOnFillValidator"
                    v-model="formDataInfo.master.cusCode"
                    field-name="cusCode"
                    :disabled="false"
                    popup-name="BoxDeliCustomerSingBox"
                    :fill-model.sync="formDataInfo.master"
                    render-fields="custId,cusCode,cusName,coinId,brFollower,brFollowerCode,brFollowerName,rate"
                    from-fields="id,cusCode,cusName,coinId,followerId,followerCode,followerName,coinRate"
                    :suffix="true"
                    :suffix-model="formDataInfo.master.cusName"
                    @on-fill="custCodeOnFillEvent"
                    />
                </FormItem>
            </Col>

            <Col span="6">
                <FormItem label="运费" prop="brTranAmount">
                   <InputNumber  placeholder="运费" :min="0" v-model="formDataInfo.master.brTranAmount"/>
                </FormItem>
            </Col>
            <Col span="6">
                <FormItem label="车牌" prop="brCarNo">
                  <popup
                        v-model="formDataInfo.master.brCarNo"
                        field-name="brCarNo"
                        :disabled="false"
                        popup-name="CarSingleBox"
                        :fill-model.sync="formDataInfo.master"
                        render-fields="brCarNo,brCarDriver,brCarDriverCode,brCarDriverName"
                        from-fields="carNo,driverId,driverCode,driverName"
                        />
                </FormItem>
            </Col>
              <!-- 参数： workOptType   6--司机-->
             <Col span="6">
                <FormItem label="司机" prop="brCarDriverCode">
                     <popup
                        v-model="formDataInfo.master.brCarDriverCode"
                        field-name="brCarDriverCode"
                        :disabled="false"
                        popup-name="WorkerSingleBox"
                        :fill-model.sync="formDataInfo.master"
                        render-fields="brCarDriver,brCarDriverCode,brCarDriverName"
                        from-fields="id,workCode,workName"
                        :suffix="true"
                        :suffix-model="formDataInfo.master.brCarDriverName"
                        :query-params="{workOptType:6}"
                        />
                </FormItem>
            </Col>
             <Col span="6">
                <FormItem :label-width="90" label="月结日期" prop="brMonthDate">
                   <DatePicker
                    @on-change="onChange_brMonthDate"
                    transfer
                    :clearable="false"
                    v-model="formDataInfo.master.brMonthDate"
                    type="date"
                    format="yyyy-MM-dd"
                  ></DatePicker>
                </FormItem>
            </Col>
              <Col span="6">
                <FormItem label="退货原因" prop="brReason">
                  <popup
                      :disabled="false"
                      v-model="formDataInfo.master.brReason"
                      field-name="brReason"
                      popup-name="BasFadeReasonSingleBox"
                      :fill-model.sync="formDataInfo.master"
                      render-fields="brReason"
                      from-fields="frName"
                      :query-params="{}"
                    />
                </FormItem>
            </Col>
              <!--参数： workOptType 5---装车员-->
            <Col span="6">
                <FormItem label="跟车员" prop="brFollowerCode">
                     <popup
                        v-model="formDataInfo.master.brFollowerCode"
                        field-name="brFollowerCode"
                        :disabled="false"
                        popup-name="WorkerSingleBox"
                        :fill-model.sync="formDataInfo.master"
                        render-fields="brFollower,brFollowerCode,brFollowerName"
                        from-fields="id,workCode,workName"
                        :suffix="true"
                        :suffix-model="formDataInfo.master.brFollowerName"
                        :query-params="{workOptType:4}"
                        />
                </FormItem>
            </Col>
            <Col span="3">
                <FormItem label="数量" prop="brQty">
                  <InputNumber   :disabled="true" placeholder="运费" :min="0" v-model="formDataInfo.master.brQty"/>
                </FormItem>
            </Col>
            <Col span="3">
                <FormItem label="金额" prop="brMoney">
                  <InputNumber   :disabled="true" placeholder="运费" :min="0" v-model="formDataInfo.master.brMoney"/>
                </FormItem>
            </Col>
            <Col span="3">
                <FormItem label="面积" prop="brArea">
                  <InputNumber   :disabled="true" placeholder="运费" :min="0" v-model="formDataInfo.master.brArea"/>
                </FormItem>
            </Col>
            <Col span="3">
                <FormItem label="体积" prop="brCube">
                  <InputNumber   :disabled="true" placeholder="体积" :min="0" v-model="formDataInfo.master.brCube"/>
                </FormItem>
            </Col>
            <Col span="3">
                <FormItem label="重量" prop="brWeight">
                  <InputNumber  :disabled="true"  placeholder="重量" :min="0" v-model="formDataInfo.master.brWeight"/>
                </FormItem>
            </Col>
             <Col span="3">
                <FormItem label="汇率" prop="rate">
                  <InputNumber  :disabled="true"  placeholder="汇率" :min="0" v-model="formDataInfo.master.rate"/>
                </FormItem>
            </Col>

            <Col span="12">
                <FormItem label="备注" prop="remark">
                   <Input v-model="formDataInfo.master.remark" maxlength="80" placeholder="备注"></Input>
                </FormItem>
            </Col>
             <Col span="3">
                <FormItem :label-width="40">
                  <Checkbox :disabled="true" class="CheckboxItem" v-model="formDataInfo.master.brIsAcc">月结</Checkbox>
                </FormItem>
            </Col>
            </Row>
        </Form>
      </div>
         <div ref="otherHeight" class="otherHeightClass">
        <Tabs>
            <TabPane label="纸箱退货明细" name="stockboxdeliitem">
                <eTable
                ref="slave_list_table_edit"
                unqiue-mark="id"
                :height="otherHeight-40"
                :index-menu="true"
                :col-start="0"
                :row-init-data="initData.initData[`${functionParams.formInitPreName}itemFm`]"
                :data="formDataInfo['boxReItems'].defaultList"
                :rules="slaveTableFieldsValidator"
                @row-delete='slave_list_table_edit_Delete'
                @tableColTiggerEventCall="tableColTiggerEventCall"
            >
            <template slot="head">
              <tr v-for="(columnGroup,index) in initData.columns[`${functionParams.formInitPreName}itemFm`].editGroups" :key="index">
                    <template  v-for="(column,index2) in columnGroup" >
                        <th v-if="excludeFiled('itemFm',column.key)"
                        :key="index2" :class="`ivu-table-column-${column.titleAlign}`"
                        :width="column.editWidth"
                        :colspan="column.colSpan"
                        :rowspan="column.rowSpan"
                        :columnKey="column.key"
                        >
                        <div  class="ivu-table-cell">
                        <span class="">{{column.title}}</span>
                        </div>
                    </th>
                    </template>
                </tr>
            </template>
            <template
              slot="body"
              slot-scope="{ row, index,valueChangeAssign,tableColTiggerEvent }"
            >
             <template  v-for="(column,subIndex) in initData.columns[`${functionParams.formInitPreName}itemFm`].editColumns">
                   <td :key="subIndex" :class="`ivu-table-column-${column.align}`" v-if="excludeFiled('itemFm',column.key)" :width="column.editWidth">
                     <!-- 控件特殊处理 工单号 -->
                      <template v-if="column.key =='workNo'">
                        <Input v-model="row[column.key]"  :disabled="!!row[column.key]"  @input="value => {valueChangeAssign(value, index, row,column.key)}" >
                            <Icon @click="openProductsList()"  slot="suffix" type="md-add" v-show="!detailDisabled"/>
                        </Input>
                     </template>
                     <!-- 退货数量 -->
                     <template v-else-if="column.key ==='biReQty'">
                        <formControl  @input="tableColTiggerEvent(row,column,index,'biReQtyChangeEvent')"  :control-type="column.controlType" v-model="row[column.key]"></formControl>
                     </template>
                        <!-- 退仓类型 -->
                      <Select @on-change="value => {valueChangeAssign(value, index, row,column.key)}" :disabled="column.readOnly" v-else-if="column.key == 'biType'" v-model="row[column.key]" transfer>
                        <Option v-for="(item,index) in  boxReTypeList" :key="index" :value="item.dicValue+''">{{item.dicLabel}}</Option>
                      </Select>
                       <!--其它 控件 :placeholder="column.title"-->
                     <template v-else>
                      <formControl :align="column.align" :control-type="column.controlType"
                        v-model="row[column.key]"
                         :disabled="column.readOnly"
                        @input="value => {valueChangeAssign(value, index, row,column.key)}"
                      ></formControl>
                     </template>
                  </td>
             </template>
            </template>
             </eTable>
            </TabPane>
        </Tabs>
        </div>
    </editWindow>
    <editForm
     ref="editForm"
      @on-cancel="onCancelEditForm"
      @submit-success="onSubmitEditForm"
      :isLoaddingDone="salveWindow.isLoaddingDone"
      :action="salveWindow.action"
      v-model="salveWindow.showEditWindow"
      :searchParams="searchParams"
    />
  </div>
</template>

<script>
/**
 * @desc edit-boxRe 描述 纸箱出货
 * 所有重要 可以重用的方法 放在了基类,继承即可用重复使用 editBaseMixins,
 * 可以根据需求重写所需的方法:
 *
 * @params 参数
 *
 * @return 返回
 *
 * @author Andy Huang
 *
 * @created 2020/04/10
 */
import popup from '@/components/popup/popup'
import editWindow from '@/components/edit-window/edit-window'
import eTable from '@/components/e-table/e-table'
import request from '@/libs/request'
import editBaseMixins from '../../mixins/edit'
import optionSearch from '../../components/optionSearch'
import InputNumber from '@/components/input-number'
import dayjs from 'dayjs'
import Sys from '@/api/sys'
import formControl from '@/components/form-control/form-control'
import editForm from './edit-boxReSlave'
import { deepCopy } from 'view-design/src/utils/assist'
const default_formDataInfo = {
  // 主表 更改字段
  master: {
    // auditTime: "",
    // auditUser: "",
    // auditUsername: "",
    brArea: 0,
    brCarDriver: 0,
    brCarDriverCode: '',
    brCarDriverName: '',
    brCarNo: '',
    brCube: 0,
    brDate: dayjs().format('YYYY-MM-DD'), // 退货日期,
    brFollower: 0,
    brFollowerCode: '',
    brFollowerName: '',
    brIsAcc: false,
    brMoney: 0,
    brMonthDate: dayjs().format('YYYY-MM-DD'), // 月结日期
    brNo: '',
    brQty: 0,
    brReason: '',
    brTranAmount: 0,
    brWeight: 0,
    coinId: 0,
    // companyId: 0,
    // createTime: "",
    // createUser: "",
    // createUsername: "",
    cusCode: '',
    cusName: '',
    custId: 0,
    hasDelete: false,
    // id: 0,
    // iisAudit: 0,
    rate: 0,
    remark: '',
    returnDate: ''
    // status: 0,
    // updateTime: "",
    // updateUser: "",
    // updateUsername: ""
  },
  boxReItems: {
    addList: [], // 添加列
    defaultList: [], // 默认列
    deleteList: [], // 删除列
    updateList: []
  }
}
export default {
  name: 'edit-boxDeli',
  mixins: [editBaseMixins],
  components: {
    editWindow,
    optionSearch,
    eTable,
    InputNumber,
    popup,
    editForm,
    formControl
  },
  data () {
    return {
      formName: 'stockboxreFm', // 重写父类 查询表单名称 stockboxreitemFm
      // 查询配置参数
      functionParams: {
        formInitPreName: 'stockboxre', // 查询表格列头信息 前缀 例如:saleboxproductprice Fm/itemFm/mdataFm
        requestBaseUrl: '/stock/boxRe', // 查询 表格行 数据 接口前缀地址
        uniqueId: 'brId' // 查询详细的唯一ID,需要顶部查询中使用
      },
      actionSubtitle: '纸箱退货', // 重写父类 当前操作副标题
      salveWindow: {
        isLoaddingDone: false, // 窗口是否加载完成
        showEditWindow: false, // 是否显示edit-boxSalesOrderSlave 编辑窗口
        action: 'add' // 当前操作功能 添加/编辑
      },
      formDataInfo: deepCopy(default_formDataInfo), // Object.assign({}, default_formDataInfo), // 防止添加和更新数据提交发生冲突
      masterRuleValidate: {
        cusCode: [{ required: true, message: '客户编号不能为空', trigger: 'blur' }],
        brDate: [{ required: true, type: 'date', message: '送货日期不能为空', trigger: 'blur' }],
        brMonthDate: [{ required: true, type: 'date', message: '月结日期不能为空', trigger: 'blur' }]
      }, // 纸箱出货 需要验证的数据
      slaveTableFieldsValidator: {}, // 纸箱出货明细 需要验证的数据
      masterHeight: 0, // 表单高度
      otherHeight: 0, // 剩余高度
      searchParams: {}, // 传递查询参数
      boxReTypeList: [], // 退仓类型 列表
      disabledCustCode: false// 是否禁用 客户编号
    }
  },
  watch: {
    showWindow: function (n, o) {
      if (n) {
        let _self = this
        this.$nextTick(() => {
          this.registerEvent()
          this.pageResize()
          // 延迟赋值,不然数据还没有正确返回的情况下,无法绑定默认值
          setTimeout(() => {
            this.setDefaultData()
          }, 1000)
        })
      }
    },
    // 第一步执行 获取到 master 数据
    initData: {
      handler (n, o) {
        if (n.initData) {
          // this.formDataInfo.master = n.initData.master
        }
      },
      deep: true
    }
  },
  created () {
    this.getboxReTypeList() // 费用类型
  },
  methods: {
    // 纸箱退货明细 删除数据 回调
    slave_list_table_edit_Delete (index) {
      // (重新计算体积/面积/金额等)
      this.sumMoneyAreaVolumeWeight()
    },
    // 更新选择客户,确认提交前验证
    beforeOnFillValidator () {
      return new Promise((resolve, reject) => {
        if (this.action == 'add') {
          reject()
          return
        }
        this.$Modal.confirm({
          title: '提示',
          content: `客户编号改变，退货明细也会跟着改变?`,
          onOk: () => {
            this.formDataInfo['boxReItems'].defaultList.forEach((item, index) => {
              this.$refs['slave_list_table_edit'].deleteRow(index)
            })
            resolve(true)
          },
          onCancel: () => {
            resolve(false)
          }
        })
      })
    },
    setDefaultData () {
      // debugger
      this.formDataInfo.master.brDate = new Date(dayjs(this.formDataInfo.master.brDate).format('YYYY-MM-DD HH:mm:ss'))
      this.formDataInfo.master.brMonthDate = new Date(dayjs(this.formDataInfo.master.brMonthDate).format('YYYY-MM-DD HH:mm:ss'))
    },
    onChange_brBackDate (item) {
      if (!_.isEmpty(item)) {
        this.formDataInfo.master.brDate = new Date(item)
      }
    },
    onChange_brMonthDate (item) {
      if (!_.isEmpty(item)) {
        this.formDataInfo.master.brMonthDate = new Date(item)
      }
    },
    // 表格列值改变 回调事件处理event：{row, column, index, event,config}
    tableColTiggerEventCall (obj) {
      switch (obj.event) {
        case 'biReQtyChangeEvent':
          let row = obj.row
          let leftQty = Number(row.biDeliQty) - Number(row.returnedQty)
          let biReQty = Number(row.biReQty)
          if (biReQty <= 0) {
            this.$Modal.error({
              width: '260',
              title: '错误',
              content: `退货数量应该大于0`,
              onOk: () => {
                this.$refs['slave_list_table_edit'].set({ biReQty: leftQty }, obj.index)
              }
            })
          } else // 送货数	退货数量	 已退数量
          if (biReQty > leftQty && biReQty > 0) {
            this.$Modal.error({
              width: '260',
              title: '错误',
              content: '退货数量应该小于' + leftQty,
              onOk: () => {
                this.$refs['slave_list_table_edit'].set({ biReQty: leftQty }, obj.index)
              }
            })
          }
          this.sumSelectedRowData(obj.row, obj.index) // 当前行汇总数据修改
          this.sumMoneyAreaVolumeWeight() // 汇总所有数据到主表
          break
        default:
          break
      }
    },
    getboxReTypeList () {
      // 获取  退仓类型
      this.getDataFromDictionaryBy('boxReType').then(res => {
        this.boxReTypeList = res
      })
    },
    // 验证产品编号选择前先选择客户
    popupClickValidator () {
      if (!this.formDataInfo.master.cusCode || this.formDataInfo.master.cusCode == '') {
        this.$Message.error('请先选择客户编号')
        return false
      }
      return true
    },
    // 弹框==确认==回调事件,返回选择的数据
    onSubmitEditForm (dataList) {
      if (dataList && Array.isArray(dataList) && dataList.length > 0) {
        this.disabledCustCode = true // 禁用客户选择
        dataList = this.itemAdapter(dataList)
        let boxReItems = this.formDataInfo['boxReItems'].defaultList
        if (boxReItems[0].workNo == '') {
          this.formDataInfo['boxReItems'].defaultList = dataList
        } else {
          dataList.forEach(item => {
            if (!this.checkIsExistBy(item)) {
              this.formDataInfo['boxReItems'].defaultList.push(item)
            }
          })
          // 删除多余的空行
          this.formDataInfo['boxReItems'].defaultList.forEach((item, index) => {
            if (item.workNo == '' || item.workNo == null) {
              this.formDataInfo['boxReItems'].defaultList.splice(index, 1)
            }
          })
        }
        this.sumMoneyAreaVolumeWeight()
      }
    },
    // 实体转换,获取相同Key的value,个别不同的手动修改值
    itemAdapter (dataList) {
      let newDataList = []
      dataList.forEach(oldItem => {
        let newItem = JSON.parse(JSON.stringify(this.initData.initData[`${this.functionParams.formInitPreName}itemFm`]))
        let newItemKeys = Object.keys(newItem)
        newItemKeys.forEach(itemKey => {
          newItem[itemKey] = null
          if (oldItem[itemKey]) {
            newItem[itemKey] = oldItem[itemKey]
          }
        })
        // 额外其它不同字段 remark
        // 退货数量(隐含字段) = 送货数 - returnedQty:已退货数量
        newItem.biReQty = Number(newItem.biDeliQty) - Number(newItem.returnedQty)
        newItem.biType = '1'
        // 合计计算
        let toFixedUnit = 2
        let biReQty = Number(newItem.biReQty)
        newItem.biAmount = Number((biReQty * Number(newItem.biPrice)).toFixed(toFixedUnit))// 重量 = 送货数量*单重
        newItem.biSumWeight = Number((biReQty * Number(newItem.biSWeight)).toFixed(toFixedUnit))// 重量 = 送货数量*单重
        newItem.biSumCube = Number((biReQty * Number(newItem.biSCube)).toFixed(toFixedUnit))// 体积 = 送货数量*单体积
        newItem.biSumArea = Number((biReQty * Number(newItem.biSArea)).toFixed(toFixedUnit))// 面积 = 送货数量*单面积
        newDataList.push(newItem)
      })
      return newDataList
    },
    // 检查列表数据是否已经存在,避免重复添加
    checkIsExistBy (item) {
      let isExistIndex = this.formDataInfo['boxReItems'].defaultList.findIndex(subItem => {
        return (subItem.workNo == item.workNo && subItem.biDeNo == item.biDeNo && subItem.biProdNo == item.biProdNo && subItem.stationCode == item.stationCode)
      })
      if (isExistIndex != -1) {
        return true
      } else {
        return false
      }
    },
    // 汇总 数量,金额, 面积,体积,重量
    sumMoneyAreaVolumeWeight () {
      let totalQuantity = 0, totalMoney = 0, totalArea = 0, totalVolume = 0, totalWeight = 0
      this.formDataInfo['boxReItems'].defaultList.forEach(item => {
        // 总数量
        let biReQty = Number(item.biReQty == null ? 0 : item.biReQty)
        if (biReQty != '' && biReQty != null) {
          totalQuantity += biReQty
        }
        // 总金额
        let biAmount = Number(item.biAmount == null ? 0 : item.biAmount)
        if (biAmount != '' && biAmount != null) {
          totalMoney += biAmount
        }
        // 总面积
        let biSumArea = Number(item.biSumArea == null ? 0 : item.biSumArea)
        if (biSumArea != '' && biSumArea != null) {
          totalArea += biSumArea
        }
        // 总体积
        let biSumCube = Number(item.biSumCube == null ? 0 : item.biSumCube)
        if (biSumCube != '' && biSumCube != null) {
          totalVolume += biSumCube
        }
        // 总重量
        let biSumWeight = Number(item.biSumWeight == null ? 0 : item.biSumWeight)
        if (biSumWeight != '' && biSumWeight != null) {
          totalWeight += biSumWeight
        }
      })
      // 合计计算
      let toFixedUnit = 2 // 保留小数位
      this.formDataInfo.master.brQty = Number(totalQuantity) // 数量
      this.formDataInfo.master.brMoney = totalMoney.toFixed(toFixedUnit) // 金额
      this.formDataInfo.master.brArea = totalArea.toFixed(toFixedUnit) // 面积
      this.formDataInfo.master.brCube = totalVolume.toFixed(toFixedUnit) // 体积
      this.formDataInfo.master.brWeight = totalWeight.toFixed(toFixedUnit) // 重量
    },
    // 汇总当前行数据(数量,金额, 面积,体积,重量)
    sumSelectedRowData (item, index) {
      let toFixedUnit = 2 // 保留小数位
      let biReQty = item.biReQty == null ? 0 : Number(item.biReQty) // 退货数量
      let brMoney = (biReQty * (item.biPrice == null ? 0 : Number(item.biPrice))).toFixed(toFixedUnit)// 金额 = 退货数量 * 单价
      let brArea = (biReQty * (item.biSArea == null ? 0 : Number(item.biSArea))).toFixed(toFixedUnit) // 面积 = 退货数量 * 单面积
      let brCube = (biReQty * (item.biSCube == null ? 0 : Number(item.biSCube))).toFixed(toFixedUnit) // 体积 = 退货数量 * biSCube
      let brWeight = (biReQty * (item.biSWeight == null ? 0 : Number(item.biSWeight))).toFixed(toFixedUnit) // 重量 = 退货数量 * 单重量
      // 触发修改值 直接修改原始数据 无效 (金额 总重量 总面积	总体积)
      this.$refs['slave_list_table_edit'].set({ biAmount: brMoney, biSumWeight: brWeight, biSumArea: brArea, biSumCube: brCube }, index)
    },
    // 弹框==取消==回调事件
    onCancelEditForm () {

    },
    // 订单编号 点击事件,打开选择产品列表窗口
    openProductsList () {
      this.selectedWorkNoList = ''
      this.formDataInfo['boxReItems'].defaultList.forEach(item => {
        if (!item.biDeNo||!item.workNo) {
          return
        }
        if (this.selectedWorkNoList == '') {
          this.selectedWorkNoList = item.biDeNo + '_' + item.workNo // (送货单号_工单号)
        } else {
          this.selectedWorkNoList += ',' + item.biDeNo + '_' + item.workNo
        }
      })
      this.searchParams = {
        custId: this.formDataInfo.master.custId, // 客户id
        workNoList: this.selectedWorkNoList// (过滤已选的工单号集合,多个都好隔开)
      }
      if (this.popupClickValidator()) {
        this.salveWindow.showEditWindow = true
      }
    },
    custCodeOnFillEvent () {
      this.$refs["formDataInfo"].validateField("cusCode", err => {});
    },
    // 排除不需要显示的字段
    excludeFiled (type, key) {
      let exListItemFm = ['biDutyDept', 'biDuty']
      let exList = []
      switch (type) {
        case 'itemFm':
          exList = exListItemFm
          break
        default:
          exList = exListOtherfeeFm
          break
      }
      if (exList.includes(key)) {
        return false
      } else {
        return true
      }
    },
    // 注册窗口事件
    registerEvent () {
      let _self = this// 赋值vue的this
      window.onresize = () => {
        // 调用methods中的事件
        _self.pageResize()
      }
    },
    // 触发窗口大小变化事件
    pageResize () {
      this.$nextTick(() => {
        this.getTabWindowHeight()
      })
    },
    // 获取当前TAB标签的实际高度
    getTabWindowHeight () {
      this.getMasterheight()
      // 因为使用V-SHOW 隐藏,实际还会占用高度,所以切换时,设置为0 或使用V-IF 可以不用那么麻烦,但性能较低
      if (this.$refs['masterHeight']) {
        this.masterHeight = this.$refs['masterHeight'].offsetHeight
        this.otherHeight = this.$refs['otherHeight'].offsetHeight
      }
    },
    getMasterheight () {
      return 35
    },
    // 判断数据是新增还是修改
    formDetailDataCall () {
      if (this.action != 'add') {

      }
    },
    // 重写父类 关闭窗口时 触发事件
    closeActionTigger () {
      // fix 清除上次的错误提示 formDataInfo 为表单ref名称
      this.$refs['formDataInfo'].resetFields()
      this.$refs['slave_list_table_edit'].reset()
    },
    // 重写父类,添加时候,清空数据
    HandleFormDataInfo () {
      this.formDataInfo = deepCopy(default_formDataInfo)// Object.assign({}, default_formDataInfo);
    },
    // 重写父类,修改提交数据
    resetformDataInfo () {
      let boxReItems = this.$refs['slave_list_table_edit'].getCategorizeData()
      this.formDataInfo['boxReItems'] = boxReItems
      if (this.formDataInfo.master.brDate != '') {
        this.formDataInfo.master.brDate = dayjs(this.formDataInfo.master.brDate).format('YYYY-MM-DD HH:mm:ss')
      }
      if (this.formDataInfo.master.brMonthDate != '') {
        this.formDataInfo.master.brMonthDate = dayjs(this.formDataInfo.master.brMonthDate).format('YYYY-MM-DD HH:mm:ss')
      }
      return this.formDataInfo
    },

    // 提交主从表数据
    formTableDataSubmit () {
      this.$refs['formDataInfo'].validate(valid => {
        if (!valid) {
          return
        }
        let submitData = this.resetformDataInfo()
        request.post(`${this.functionParams.requestBaseUrl}/saveOrUpdate`, submitData).then(res => {
          this.showWindow = false // 关闭当前编辑页面
          this.$Message.success('执行成功')
          this.$emit('submit-success') // 刷新主页面数据
        })
      })
    }
  }

}
</script>

<style>
.masterHeightClass{
  height: 35%;overflow:auto
}
.otherHeightClass{
  height: 65%;overflow:hidden
}
.cl-edit-boxRe .ivu-form-item-label {
    text-align: right;
    vertical-align: middle;
    float: left;
    font-size: 14px;
    color: #515a6e;
    line-height: 17px;
    padding: 7px 12px 10px 0;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}
</style>
