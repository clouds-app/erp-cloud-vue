<template>
  <div>
    <editWindow
      class="cl-edit-purPaperPo"
      :title="actionLableName"
      v-model="showWindow"
      :fullscreen="false"
      width="95%"
      :loading="!isLoaddingDone"
      :spinLoaddingText="spinLoaddingText"
      @on-ok="formTableDataSubmit()"
      v-if="initData.columns"
    >
      <Form
        ref="formDataInfo"
        :show-message="true"
        :model="formDataInfo.master"
        :rules="ruleValidate"
        :label-width="100"
      >
        <Row>
          <Col span="24">
            <Row>
              <Col span="12">
                <FormItem label="供应商编号" prop="supplierCode">
                  <popup
                    :disabled="detailDisabled"
                    @on-fill="Initializationdata"
                    v-model="formDataInfo.master.supplierCode"
                    field-name="supplierCode"
                    popup-name="SupplierSingleBox"
                    :fill-model.sync="formDataInfo.master"
                    render-fields="supplierId,supplierCode,supplierName,coinId,coinName,unitId,unitText"
                    from-fields="id,purCode,purName,coinId,coinName,unitId,unitText"
                    :suffix="true"
                    :suffix-model="formDataInfo.master.supplierName"
                    :query-params="{}"
                  />
                </FormItem>
              </Col>
              <Col span="12">
                <Row>
                  <Col span="12">
                    <FormItem label="采购日期" prop="ppoDate">
                      <DatePicker
                        :disabled="detailDisabled"
                        type="date"
                        format="yyyy-MM-dd"
                        v-model="formDataInfo.master.ppoDate"
                      ></DatePicker>
                    </FormItem>
                  </Col>
                  <Col span="12">
                    <FormItem label="采购单号" prop="ppoNo">
                      <Input
                        v-model="formDataInfo.master.ppoNo"
                        maxlength="20"
                        placeholder
                        disabled
                      ></Input>
                    </FormItem>
                  </Col>
                </Row>
              </Col>
            </Row>
          </Col>

          <Col span="12">
            <Row>
              <Col span="12">
                <FormItem label="采购数量" prop="ppoStockQty">
                  <Input
                    v-model="formDataInfo.master.ppoStockQty"
                    maxlength="20"
                    placeholder
                    disabled
                  ></Input>
                </FormItem>
              </Col>

              <Col span="12">
                <FormItem label="采购金额" prop="ppoMoney" width="100%">
                  <Input v-model="formDataInfo.master.ppoMoney" maxlength="20" placeholder disabled></Input>
                </FormItem>
              </Col>
            </Row>
          </Col>

          <Col span="12">
            <Row>
              <Col span="12">
                <FormItem label="货币" prop="coinName">
                  <Input v-model="formDataInfo.master.coinName" maxlength="20" placeholder disabled></Input>
                </FormItem>
              </Col>

              <Col span="12">
                <FormItem label="计量单位" prop="unitText" width="100%">
                  <Input v-model="formDataInfo.master.unitText" maxlength="20" placeholder disabled></Input>
                </FormItem>
              </Col>
            </Row>
          </Col>
          <Col span="24">
            <FormItem label="备注">
              <Input
                v-model="formDataInfo.master.remark"
                :disabled="detailDisabled"
                type="textarea"
                maxlength="100"
                :autosize="{ minRows: 2, maxRows: 5 }"
                placeholder="请输入备注..."
              ></Input>
            </FormItem>
          </Col>
        </Row>
      </Form>

      <Tabs type="card">
        <!--  注意:eTable formDataInfo.artLengs.defaultList  ===artLengs=== 需要根据实际接口修改,其它不变-->
        <TabPane label="纸板采购明细" name="name1">
          <eTable
            ref="tableFields"
            unqiue-mark="id"
            :index-menu="true"
            :col-start="0"
            :width="200"
            :height="300"
            :insertDirection="insertDirection"
            :row-init-data="initData.initData.purPaperPoItemFm"
            :data.sync="formDataInfo.purPaperPoItemSlaves.defaultList"
            :rules="tableFieldsValidator"
            :showContextMenu="!detailDisabled"
          >
            <!-- tableInitData?tableInitData -->
            <template slot="head">
              <tr
                v-for="(columnGroup,index) in initData.columns.purPaperPoItemFm.editGroups"
                :key="index"
              >
                <th
                  class="ivu-table-column-left"
                  v-for="(column,index2) in columnGroup"
                  :key="index2"
                  :width="column.editWidth"
                  :colspan="column.colSpan"
                  :rowspan="column.rowSpan"
                  style="text-align:center;"
                >
                  <div class="ivu-table-cell">
                    <span class>{{column.title}}</span>
                  </div>
                </th>
              </tr>
            </template>

            <template slot="body" slot-scope="{ row, index, valueChangeAssign }">
              <td
                class="ivu-table-column-left"
                v-for="(column,columnIndex) in initData.columns.purPaperPoItemFm.editColumns"
                :key="columnIndex"
                :width="column.editWidth"
              >
                <!-- 控件特殊处理 无单采购 -->
                <Checkbox
                  v-if="column.key == 'ppoNoOrder'"
                  :disabled="detailDisabled"
                  size="default"
                  v-model="row[column.key]"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'ppoNoOrder');
                      }
                    "
                ></Checkbox>
                <!--控件特殊处理 完结  -->
                <Checkbox
                  v-else-if="column.key == 'isClose'"
                  size="default"
                  :disabled="detailDisabled||action != 'update'"
                  v-model="row[column.key]"
                  @input="
                    value => {
                      valueChangeAssign(value, index, row, 'isClose');
                    }
                  "
                ></Checkbox>
                <!--控件特殊处理 工单号  -->
                <Input
                  v-else-if="column.key == 'workNo'"
                  v-model="row[column.key]"
                  disabled
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'workNo');
                      }
                    "
                  size="small"
                  :maxlength="20"
                ></Input>
                <!--控件特殊处理 楞别  -->
                <Input
                  v-else-if="column.key == 'ppoLb'"
                  v-model="row[column.key]"
                  :disabled="detailDisabled||!row.ppoNoOrder"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'ppoLb');
                      }
                    "
                  size="small"
                  :maxlength="20"
                ></Input>
                <!--控件特殊处理 纸长  -->
                <Input
                  @on-blur="getppoSarea(index)"
                  v-else-if="column.key == 'ppoSizeL'"
                  v-model="row[column.key]"
                  :disabled="detailDisabled||!row.ppoNoOrder"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'ppoSizeL');
                      }
                    "
                  size="small"
                  :maxlength="20"
                ></Input>
                <!--控件特殊处理 纸宽  -->
                <Input
                  @on-blur="getppoSarea(index)"
                  v-else-if="column.key == 'ppoSizeW'"
                  v-model="row[column.key]"
                  number
                  :disabled="detailDisabled||!row.ppoNoOrder"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'ppoSizeW');
                      }
                    "
                  size="small"
                  :maxlength="20"
                ></Input>
                <!--控件特殊处理 压线  -->
                <Input
                  @on-blur="getppoSarea(index)"
                  v-else-if="column.key == 'ppoSizeLine'"
                  v-model="row[column.key]"
                  :disabled="detailDisabled||!row.ppoNoOrder"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'ppoSizeLine');
                      }
                    "
                  size="small"
                  :maxlength="20"
                ></Input>
                <!--控件特殊处理 压线类型  -->
                <Select
                    :disabled="detailDisabled||!row.ppoNoOrder"
                    v-model="row[column.key]"
                    v-else-if="column.key == 'ppoScoreType'"
                    transfer
                  >
                    <Option
                      v-for="(item,index)  in ppoScoreTypeList"
                      :key="index"
                      :value="item.dicValue"
                    >{{item.dicLabel}}</Option>
                  </Select>
                <!--控件特殊处理 压线深度  -->
                <Select
                    :disabled="detailDisabled||!row.ppoNoOrder"
                    v-model="row[column.key]"
                    v-else-if="column.key == 'ppoScoreDepth'"
                    transfer
                  >
                    <Option
                      v-for="(item,index)  in ppoScoreDepthList"
                      :key="index"
                      :value="item.dicValue"
                    >{{item.dicLabel}}</Option>
                  </Select>
                <!--控件特殊处理 用料单号  -->
                <Input
                  v-else-if="column.key == 'mateWorkNo'"
                  v-model="row[column.key]"
                  :disabled="detailDisabled||row.ppoNoOrder"
                  @on-blur="onFill(index)"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'mateWorkNo');
                      }
                    "
                  size="small"
                  :maxlength="20"
                >
                <Icon @click="Slave_list_table_editRowModify(index)" slot="suffix" type="md-add" />
                </Input>
                <!-- 控件特殊处理 送货日期 -->
                <DatePicker
                  :disabled="detailDisabled"
                  v-else-if="column.key == 'ppoDueDate'"
                  v-model="row[column.key]"
                  type="date"
                  format="yyyy-MM-dd"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'ppoDueDate');
                      }
                    "
                ></DatePicker>
                <!-- 控件特殊处理 本厂纸质 -->
                <popup
                  @on-fill='getbiWeight(index)'
                  v-else-if="column.key == 'ppoArtCode'"
                  v-model="row[column.key]"
                  :popupClickValidator="clickValuedate"
                  field-name="ppoArtCode"
                  :disabled="detailDisabled || !row.ppoNoOrder"
                  popup-name="PurSupplierArtItemSingleBox"
                  :fill-model.sync="formDataInfo.purPaperPoItemSlaves.defaultList"
                  render-fields="supplierArtId,supplierArtName,ppoCorpartId,ppoArtCode,ppoLb,baseWt"
                  from-fields="supplierArtId,supplierArtName,artId,artCode,lbCode,baseWt"
                  :index="index"
                  :init-data="initData.initData.purPaperPoItemFm"
                  :excludeParams="{'artCodeLeng$ne':row.ppoArtCode+row.ppoLb}"
                  :query-params="{supplierId:formDataInfo.master.supplierId}"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'ppoArtCode');
                      }
                    "
                >
               
                </popup>
                <!-- 控件特殊处理 供应商纸质 -->
                <popup
                  @on-fill='getbiWeight(index)'
                  v-else-if="column.key == 'supplierArtName'"
                  v-model="row[column.key]"
                  :popupClickValidator="clickValuedate"
                  field-name="supplierArtName"
                  :disabled="detailDisabled || !row.ppoNoOrder"
                  popup-name="PurSupplierArtItemSingleBox"
                  :fill-model.sync="formDataInfo.purPaperPoItemSlaves.defaultList"
                  render-fields="supplierArtId,supplierArtName,ppoCorpartId,ppoArtCode,ppoLb,baseWt"
                  from-fields="supplierArtId,supplierArtName,artId,artCode,lbCode,baseWt"
                  :index="index"
                  :init-data="initData.initData.purPaperPoItemFm"
                  :excludeParams="{'artCodeLeng$ne':row.ppoArtCode+row.ppoLb}"
                  :query-params="{supplierId:formDataInfo.master.supplierId}"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'supplierArtName');
                      }
                    "
                ></popup>
                <!-- 控件特殊处理 采购数量 -->
                <Input
                  v-else-if="column.key == 'ppoStockQty'"
                  v-model="row[column.key]"
                  :disabled="detailDisabled"
                  @on-blur="getppoStockQty(index)"
                  @input="
                      value => {
                          valueChangeAssign(value, index, row, 'ppoStockQty');
                      }
                      "
                  size="small"
                  :maxlength="20"
                ></Input>
                <!-- 控件特殊处理 单价 -->
                <Input
                  v-else-if="column.key == 'ppoPrice'"
                  v-model="row[column.key]"
                  :disabled="detailDisabled"
                  @on-blur="getppoPrice(index)"
                  number
                  @input="
                      value => {
                          valueChangeAssign(value, index, row, 'ppoPrice','number');
                      }
                      "
                  size="small"
                  :maxlength="20"
                ></Input>
                <!-- 控件特殊处理 报价 -->
                <Input
                  v-else-if="column.key == 'ppoArtPrice'"
                  v-model="row[column.key]"
                  :disabled="detailDisabled||!row.ppoNoOrder"
                  @on-blur="getppoStockQty(index)"
                  @input="
                      value => {
                          valueChangeAssign(value, index, row, 'ppoArtPrice');
                      }
                      "
                  size="small"
                  :maxlength="20"
                ></Input>
                <!-- 控件特殊处理 金额 -->
                <Input
                  v-else-if="column.key == 'ppoMoney'"
                  v-model="row[column.key]"
                  @on-blur="getppoMoney"
                  disabled
                  @input="
                      value => {
                          valueChangeAssign(value, index, row, 'ppoMoney');
                      }
                      "
                  size="small"
                  :maxlength="20"
                ></Input>
                <!-- 控件特殊处理 完结日期 -->
                <DatePicker
                  v-else-if="column.key == 'breakupDate'"
                  v-model="row[column.key]"
                  :disabled="detailDisabled"
                  placement="left-start"
                  type="date"
                  format="yyyy-MM-dd"
                  @input="
                      value => {
                        valueChangeAssign(value, index, row, 'breakupDate');
                      }
                    "
                ></DatePicker>
                <formControl
                  v-else
                  :control-type="column.controlType"
                  v-model="row[column.key]"
                  :disabled="detailDisabled||row.ppoNoOrder||!row.ppoNoOrder"
                  @input="value => {valueChangeAssign(value, index, row,column.key)}"
                ></formControl>
              </td>
            </template>
          </eTable>
        </TabPane>
        <p slot="extra">友情提示:此窗口只显示有供应商纸质/纸板进价的工单!</p>
      </Tabs>
    </editWindow>
    <purPaperPoSlave
      ref="mychild"
      :isLoaddingDone="salveWindow.isLoaddingDone"
      :formDetailData="salveWindow.formDetailData"
      :action="salveWindow.action"
      v-model="salveWindow.showEditWindow"
      :List="List"
      :mateWorkNoList="mateWorkNoList"
      :WorkOrderNumber="WorkOrderNumber"
      @closeMain="closeMain"
    />
    <!-- :isCalAreaPricePur="isCalAreaPricePur" -->
    <!-- <preferential v-model="showpreferential" @preferential-ok="preferentialOk"></preferential> -->
  </div>
</template>

<script>
/**
 * @desc edit-dept 描述
 * 所有重要 可以重用的方法 放在了基类,继承即可用重复使用 dyBaseMixins,
 * 可以根据需求重写所需的方法:
 *
 * @params 参数
 *
 * @return 返回
 *
 * @author Andy Huang
 *
 * @created 2019/11/20 17:07:54
 */
import preferential from "@/components/preferential/preferential";
import popup from "@/components/popup/popup";
import editWindow from "@/components/edit-window/edit-window";
import eTable from "@/components/e-table/e-table";
import request from "@/libs/request";
import editBaseMixins from "../../mixins/edit";
import optionSearch from "../../components/optionSearch";
import formControl from "@/components/form-control/form-control";
import dayjs from "dayjs";
import Sys from "@/api/sys";
import purPaperPoSlave from "./edit-purPaperPoSlave";
import { deepCopy } from "view-design/src/utils/assist";
const default_formDataInfo = {
  // 主表 更改字段
  master: {
    ppoMoney: 0,
    ppoNo: "",
    ppoStockQty: 0,
    ppoDate: dayjs().format("YYYY-MM-DD"),
    supplierCode: "",
    supplierId: "",
    supplierName: "",
    remark: ""
  },
  // 子表 artLengs 根据实际接口更改,其它不变
  purPaperPoItemSlaves: {
    addList: [], // 添加列
    defaultList: [], // 默认列
    deleteList: [], // 删除列
    updateList: [] // 更新列
  }
};
export default {
  name: "edit-purPaperPo",
  mixins: [editBaseMixins],
  components: {
    // editForm: function(resolve) {
    //   // 组件的异步加载
    //   require(["./edit-purPaperPo"], resolve);
    // },
    editWindow,
    optionSearch,
    preferential,
    eTable,
    popup,
    purPaperPoSlave,
    formControl
    // Form,
  },
  data() {
    return {
      formDataInfo:deepCopy(default_formDataInfo), // 防止添加和更新数据提交发生冲突
      insertDirection:'down',
      salveWindow: {
        // Tips:"提示：此窗口只显示有供应商纸质/纸板进价的工单！",
        isLoaddingDone: false, // 窗口是否加载完成
        showEditWindow: false, // 是否显示edit-boxSalesOrderSlave 编辑窗口
        action: null, // 当前操作功能 添加/编辑
        formDetailData: {} // 当前表单的详细信息
      },
      ppoScoreTypeList:[],//获取压线类型
      ppoScoreDepthList:[],//获取压线深度
      actionSubtitle: "纸板采购", // 当前操作副标题
      formName: "purPaperPoItemFm",
      requestBaseUrl: "/purchase/purPaperPo", // 请求 查询 操作的基础路径
      ctDot:null,//单价小数位
      amtDot:null,//金额小数位
      itemInitData: {},
      // 主表需要验证的数据
      ruleValidate: {
        supplierCode: [
          { required: true, message: "供应商编号不能为空", trigger: "blur" }
        ]
      },
      // 子表表需要验证的数据
      tableFieldsValidator: {
       
        supplierArtId: [
          { required: true, message: "供应商纸质不能为空", trigger: "blur" }
        ],
        ppoPrice: [
          {
            required: true,
            message: "单价不能为空",
            trigger: "blur",
            type:'number'
          }
        ],
        ppoSizeW: [
          {
            required: true,
            message: "纸宽不能为空",
            trigger: "blur",
            type:'number'
          }
        ]
      },
      cliclleng: null,
      getsupplierId: 0,
      List: "null",
      WorkOrderNumber: "null",
      // getppoNoOrder: [false],
      index1: 0, //工单号里面用
      //index2:0,//无单采购里面用
      mateWorkNoList: '', //工单号过滤字段
      ppoSizeL:0,
      ppoSizeW:0
      // isCalAreaPricePur:null
    };
  },
  watch: {
    // 'formDataInfo.purPaperPoItemSlaves.defaultList'(n,o){
    //   // debugger
    //   this.ppoNoOrderclick(n.length-1)
    // }
  },
  created(){
    this.getppoScoreTypeList(),
    this.getppoScoreDepthList()
  },
  methods: {
    //计算重量
    getbiWeight(index){
      // debugger
      let tableData = this.$refs["tableFields"].get();
      //基重
      let bpSWeight = Number(tableData[index].bpSWeight)
      //采购数
      let ppoStockQty = Number(tableData[index].ppoStockQty)
      //总重
      tableData[index].biWeight=bpSWeight*ppoStockQty
    },
    //计算单重
    getbpSWeight(index){
      // debugger
      let tableData = this.$refs["tableFields"].get();
      //单面积
      let ppoSarea = Number(tableData[index].ppoSarea)
      //基重
      let baseWt = Number(tableData[index].baseWt)
      //单重
      tableData[index].bpSWeight=ppoSarea*baseWt
      this.getbiWeight(index)
    },
    //计算单面积
    getppoSarea(){//ppoSarea 
      // debugger
        let sundata = this.$refs["tableFields"].get();
      for(let index= 0 ;index<sundata.length;index++ ) {
        let sizeW= sundata[index].ppoSizeW
        let sizeL= sundata[index].ppoSizeL
        if (sizeW!=null && sizeL!=null) {
          request.post(`/purchase/purPaperPo/getArea`,{sizeW,sizeL}).then(res=>{
            console.log(res)
            sundata[index].ppoSarea=res.ppoSarea
           this.getbpSWeight(index)//计算单重
           this.getppoStockQty(index)//获取子表采购数量总数 
          })
        }
      }
    // if(this.$params.BoxMDataSizeLUnit=="1:厘米"){
      //   //纸长
      //   this.ppoSizeL = Number((tableData.addList[index].ppoSizeL))/100
      // }else if(this.$params.BoxMDataSizeLUnit=="0:英寸"){
      //   this.ppoSizeL = Number((tableData.addList[index].ppoSizeL))*0.0254
      // }else{
      //   this.ppoSizeL = Number((tableData.addList[index].ppoSizeL))/1000
      // }
      // if(this.$params.Unit=="1:厘米"){
      //   //纸长
      //   this.ppoSizeW = Number((tableData.addList[index].ppoSizeW))/100
      // }else if(this.$params.Unit=="0:英寸"){
      //   this.ppoSizeW = Number((tableData.addList[index].ppoSizeW))*0.0254
      // }else{
      //   this.ppoSizeW = Number((tableData.addList[index].ppoSizeW))/1000
      // }
      // //纸宽
      // //单面积
      // tableData.addList[index].ppoSarea=this.ppoSizeL*this.ppoSizeW
     
    },
    //获取压线类型
    getppoScoreTypeList() {
      request.get("/common/sys/dic/childList/ppoScoreType",{},{qt: "pValue"}).then(res => {
          res.forEach(item => {
            item.dicValue = parseInt(item.dicValue);
          });
          this.ppoScoreTypeList = res;
          // console.log(this.ppoScoreTypeList)
        });
    },
    //获取压线深度
    getppoScoreDepthList() {
      request.get("/common/sys/dic/childList/ppoScoreDepth",{},{qt: "pValue"}).then(res => {
          res.forEach(item => {
            item.dicValue = parseInt(item.dicValue);
          });
          this.ppoScoreDepthList = res;
          // console.log(res)
        });
    },
    //数据转换
    transformation(selectedValue,index) {
      //  debugger
       let transData = JSON.parse(
        JSON.stringify(this.initData.initData.purPaperPoItemFm)
      );
      transData.ppoDueDate = selectedValue.bmDeDate; //送货日期
      transData.baseWt = selectedValue.baseWt; //基重
      transData.mateWorkNo = selectedValue.ppoGroupNo; //用料工单号
      transData.isClose = selectedValue.iisClose; //完结
      transData.ppoLb = selectedValue.artLb; //楞别
      transData.ppoArtCode = selectedValue.artCode; //本厂纸质
      transData.ppoCorpartId = selectedValue.ppoCorpartId; //本厂纸质id
      transData.supplierArtId = selectedValue.ppoArtId; //供应商纸质id
      transData.supplierArtName = selectedValue.ppoArtName; //供应商纸质名称
      transData.ppoStockQty = selectedValue.bmStockQty; //采购数量
      transData.ppoQty = selectedValue.bmNeedQty; //需购数量
      transData.ppoStockQty = selectedValue.bmNeedQty; //采购数量
      transData.workNo = selectedValue.biWorkNo; //工单号
      transData.custCode = selectedValue.custCode; //客户编号
      transData.custName = selectedValue.custName; //客户名称
      transData.ppoSizeL = selectedValue.bmSizeL; //净料纸长
      transData.ppoSizeW = selectedValue.bmSizeW; //净料纸宽
      transData.ppoSizeLine = selectedValue.bmScoreStr; //压线
      transData.ppoScoreType = selectedValue.bmScoreType; //压线类型
      transData.ppoScoreDepth = selectedValue.bmScoreDepth; //压线深度
      transData.prodNo = selectedValue.biProdNo; //产品编号
      transData.ppoPartName = selectedValue.biProdName; //产品名称
      transData.ppoPartNumer = selectedValue.biBatchNo; //料号
      // transData.ppoArea = selectedValue.ppoArea; //面积
      // transData.ppoSarea = selectedValue.ppoSarea; //单面积
      transData.ppoArtPrice = selectedValue.popoArtPrice; //报价
      transData.ppoPrice = selectedValue.ppoPrice; //单价
      transData.ppoMoney = selectedValue.ppoMoney; //金额
      transData.ppoPrepQty = selectedValue.ppoPrepQty; //备品数
      transData.ppoInQty = selectedValue.ppoInQty; //入库数量
      transData.ppoRqty = selectedValue.ppoRqty; //退货数
      transData.remark = selectedValue.remark; //备注
      // debugger
      return transData
    },
    //接受用料单号传回来的数据
    closeMain(selectedValues) {
      //debugger
      let pushData = [];
      //获取子表数据
      let sundata = this.$refs["tableFields"].get();
      selectedValues.forEach(selectedValue => {
        let transData = this.transformation(selectedValue);
        pushData.push(transData);
      });
      let hiddensundata = {};
      for (let index = 0; index < sundata.length; index++) {
        if (sundata[index].mateWorkNo != "") {
          let key = JSON.stringify(sundata[index].mateWorkNo);
          let value = index;
          hiddensundata[key] = value;
        }
      }
      for (let i = pushData.length - 1; i >= 0; i--) {
        if (
          hiddensundata[JSON.stringify(pushData[i].mateWorkNo)] != undefined
        ) {
          this.$Message.error(
            pushData[i].mateWorkNo + "用料单号已经存在"
          );
          pushData.splice(i, 1);
        }
      }
      let index2 = this.index1
      for (let a = 0; a < pushData.length; a++) {
        this.$refs["tableFields"].set(pushData[a],index2) 
        index2++;
      }
      // this.$refs["tableFields"].set(pushData,this.index1);
      // if(index == undefined){
        // let index3 = this.index1
        this.getppoSarea()//单面积
        // index3++
      // }
      // this.getppoMoney();
      this.getppoPrice(this.index1)//单价格式化转换
      this.getppoStockQty(this.index1);
    },
    //用料单号失去焦点带出参数事件
    onFill(index) {
      // debugger;
      let pushData = [];
      //获取供应商id
      let suplierid = this.formDataInfo.master.supplierId;
      //获取工单号
      let workNo = this.formDataInfo.purPaperPoItemSlaves.defaultList[index]
        .workNo;
      //获取用料单号
      let mateWorkNo = this.formDataInfo.purPaperPoItemSlaves.defaultList[index]
        .mateWorkNo;
      //获取当前子表数据
      // let two = this.formDataInfo.purPaperPoItemSlaves.defaultList[index];
      // let one = this.$refs["tableFields"].cloneData[index];
      //获取子表初始化时的数据
      let defulit = this.initData.initData.purPaperPoItemFm;
      if (suplierid === "") {
        this.$Message.error("供应商不能为空");
        return;
      }
      if (mateWorkNo) {
        request
          .post(`/purchase/purPaperPo/spPaperMegerStockOrder1`,{
            workNo: mateWorkNo,
            vendId: suplierid,
            flag:1
          })
          .then(ref => {
            let data = ref.workData[0];
            if (data === [] || data === undefined) {
              this.$Message.error("工单号错误");
              //$set(要修改的对象,索引,属性的值是啥)
              this.$set(
                this.formDataInfo.purPaperPoItemSlaves.defaultList,
                index,
                this.initData.initData.purPaperPoItemFm
              );
              return;
            }
            ref.workData.forEach(selectedValue => {
              let transData = this.transformation(selectedValue,index);
              pushData.push(transData);
            });
            this.$refs["tableFields"].set(pushData, index);
            //明细表数据
            let tabData = this.$refs["tableFields"].cloneData;
            //判断用料批次号是否存在
            for (let index2 = 0; index2 < tabData.length; index2++) {
              if (index != index2) {
                if (data.mateWorkNo === tabData[index2].mateWorkNo) {
                  this.$Message.error("该用料单号已经存在");
                  tabData[index] = JSON.parse(
                    JSON.stringify(this.initData.initData.purPaperPoItemFm)
                  );
                  return;
                }
              }
            }
            this.getppoSarea(index)//计算单面积
            //this.getppoMoney();//获取主表金额
            this.getppoPrice(index)//单价格式化转换
            this.getppoStockQty(index);//获取采购数量总数
            // this.$forceUpdate() 强制渲染
          });
      }
    },
    //无单采购点击事件
      // ppoNoOrderclick(index) {
      //   debugger
      //   if (index > this.$refs["tableFields"].cloneData.length-1) {
      //     return
      //   }
      //   if(this.$refs["tableFields"].cloneData[index].ppoNoOrder === true) {
      //     (this.getppoNoOrder[index] = false), 
      //     (this.disppoGroupNo[index] = true);
      //     // this.getppoNoOrder[index]=false,
      //   }else(
      //     this.getppoNoOrder[index] = true
      //   ),
      //       // this.getppoNoOrder[index]=true,
      //     (this.disppoGroupNo[index] = false);
      // },
    
    //用料单号点击事件
    Slave_list_table_editRowModify(index) {
      //debugger
      let mateWorkNoList = "";
      let tabData = this.$refs["tableFields"].cloneData;
      if (tabData.length == 1) {
        if (tabData[0].mateWorkNo  == "") {
          mateWorkNoList = "";
        } else {
          mateWorkNoList = tabData[0].mateWorkNo;
        }
      } else {
        for (let i = 0; i < tabData.length; i++) {
          if (i === tabData.length - 1) {
            if (tabData[i].mateWorkNo  == "") {
              mateWorkNoList = mateWorkNoList.substr(0, mateWorkNoList.length - 1);
            }else{
              mateWorkNoList += tabData[i].mateWorkNo
            }
          } else {
            mateWorkNoList += tabData[i].mateWorkNo  + ",";
          }
        }
      }
      if (!this.formDataInfo.purPaperPoItemSlaves.defaultList[index].ppoNoOrder) {
        this.salveWindow.showEditWindow = true;
        this.index1 = index;
        if (this.formDataInfo.master.supplierId) {
          this.List = this.formDataInfo.master.supplierId;
          let ppuer = this.salveWindow.showEditWindow;
          this.salveWindow.isLoaddingDone = true;
          this.salveWindow.action = "add";
          this.mateWorkNoList = mateWorkNoList
          request
            .post(`/purchase/purPaperPo/spPaperMegerStockOrder1`, {
              vendId: this.formDataInfo.master.supplierId,
              mateWorkNoList
            })
            .then(res => {
              this.WorkOrderNumber1 = res;
              // console.log(res)
              this.$refs.mychild.getFormInitDataObj(res);
            });
        } else {
          this.salveWindow.showEditWindow = false;
          this.$Message.error("供应商不能为空");
        }
      } else {
        this.salveWindow.showEditWindow = false;
      }
    },
    //判断数据是新增还是修改
    formDetailDataCall() {
      //  debugger;
      if (this.action != "add") {
        this.getsupplierId = this.formDataInfo.master.supplierId;
        for (
          let index = 0;
          index < this.$refs["tableFields"].cloneData.length;
          index++
        ) {
          // this.ppoNoOrderclick(index);
        }
      }
    },
    //当主表供应商弹框改变时促发初始化子表数据
    Initializationdata(data) {
      // debugger
      this.ctDot = data[0].orignData.ctDot
      this.amtDot = data[0].orignData.amtDot
      if (!this.getsupplierId) {
        this.getsupplierId = this.formDataInfo.master.supplierId;
        // return;
      }
      let tableData = this.$refs["tableFields"].getCategorizeData();
      if (this.formDataInfo.master.supplierId) {
        if (this.formDataInfo.master.supplierId != this.getsupplierId) {
          this.formDataInfo.purPaperPoItemSlaves.defaultList = [
            { ppoDueDate: dayjs().format("YYYY-MM-DD") }
          ];
          tableData.deleteList = tableData.updateList;
        }
        this.getsupplierId = this.formDataInfo.master.supplierId;
      }
      request
        .post("/purchase/purPaperPo/notPriceOrIiaudit", {
          supplierId: this.formDataInfo.master.supplierId
        })
        .then(res => {
          // alert(res.message)
          if (res.message) {
            // debugger
            this.$set(this.formDataInfo.master, "supplierCode", "");
            this.$set(this.formDataInfo.master, "supplierName", "");
            this.$set(this.formDataInfo.master, "supplierId", "");
            this.$Message.error(res.message);
          }
        });
    },
    //获取子表金额  ppoMoney金额
    getppoMoney() {
      let masterppoMoney = 0;
      // debugger;
      let tableData = this.$refs["tableFields"].get();
      if (this.amtDot !== null) {
        for (let i = 0; i < tableData.length; i++) {
          let ppoMoney = Number(tableData[i].ppoMoney.toFixed(this.amtDot));
          this.$refs["tableFields"].set({ppoMoney:ppoMoney},i)
          if (!!tableData[i].ppoMoney) {
            masterppoMoney += ppoMoney;
          }
        }
        this.formDataInfo.master.ppoMoney =Number(masterppoMoney.toFixed(this.amtDot)) 
      }
    },
    //子表单价,格式化事件
    getppoPrice(index){
      // debugger
        let data = this.$refs['tableFields'].get()
        if (this.ctDot==null) {
          data[index].ppoPrice=0
          this.$Message.error('请先选择供应商')
          return
        }
        let ppoPrice =Number(data[index].ppoPrice.toFixed(this.ctDot))
        this.$refs['tableFields'].set({ppoPrice:ppoPrice},index)
        // data[index].ppoPrice = ppoPrice
        this.getppoStockQty(index)
    },
    //获取子表采购数量总数  ppoStockQty采购数量
    getppoStockQty(index) {
        //  debugger;
        //  if (this.ctDot==null) {
        //    let data = this.$refs['tableFields'].get()

        //     this.$Message.error('请先选择供应商')
        //     return
        //  }
      let masterstockqty = 0;
      let tableData = this.$refs["tableFields"].get();
        for (let i = 0; i < tableData.length; i++) {
          let stockqty = Number(tableData[i].ppoStockQty);
          if (!!tableData[i].ppoStockQty) {
            masterstockqty += stockqty;
          }
        }
        this.formDataInfo.master.ppoStockQty = masterstockqty;
        //获取当前列表单价
        let price = tableData[index].ppoPrice;
        //获取当前列表单面积
        let ppoSarea = tableData[index].ppoSarea;
        //获取当前列表采购数量
        let StockQty1 = tableData[index].ppoStockQty;
        //获取当前列表金额
        tableData[index].ppoMoney = Number(price * StockQty1);
        //获取当前列表面积
        //  debugger;
        tableData[index].ppoArea= Number(ppoSarea * StockQty1);
        this.getppoMoney();//主表金额
        //无单采购时，不需要警告
        if(!tableData[index].ppoNoOrder){
          //判断如果采购数大于需购数，就提出警告
          if (StockQty1 > tableData[index].ppoQty) {
            this.$Message.error("工单号纸质采购数量不能大于需购数量");
          }
        }
      // if (this.action == "update") {
      //   for (let i = 0; i < tableData.updateList.length; i++) {
      //     let stockqty = Number(tableData.updateList[i].ppoStockQty);
      //     if (!!tableData.updateList[i].ppoStockQty) {
      //       masterstockqty += stockqty;
      //     }
      //   }
      //   this.formDataInfo.master.ppoStockQty = masterstockqty;
      //   //获取当前列表单价
      //   let price = tableData.updateList[index].ppoPrice;
      //     //获取当前列表单面积
      //   let ppoSarea = tableData.updateList[index].ppoSarea;
      //   //获取当前列表采购数量
      //   let StockQty1 = tableData.updateList[index].ppoStockQty;
      //   //获取当前列表金额
      //   tableData.updateList[index].ppoMoney = Number(price * StockQty1);
      //   //获取当前列表面积
      //   tableData.updateList[index].ppoArea= Number(ppoSarea * StockQty1);
      //   this.getppoMoney();
      //   //无单采购时，不需要警告
      //   if(!tableData.updateList[index].ppoNoOrder){
      //     //判断如果采购数大于需购数，就提出警告
      //     if (StockQty1 > tableData.addList[index].ppoQty) {
      //       this.$Message.error("工单号纸质采购数量不能大于需购数量");
      //     }
      //   }
      // }
      this.getbiWeight(index)
    },
    //判断主表供应商弹框不能为空
    clickValuedate() {
      // debugger;
      if (
        !this.formDataInfo.master.supplierCode ||
        this.formDataInfo.master.supplierCode == ""
      ) {
        this.$Message.error("供应商编号不能为空");
        return false;
      }
      console.log(this.$refs["tableFields"].data);
      return true;
    },
    // 重写父类,添加时候,清空数据
    HandleFormDataInfo() {
      //  debugger
      this.formDataInfo = Object.assign({}, default_formDataInfo);
    },
    // 重写父类,修改提交数据
    resetformDataInfo(_data) {
      let tableData = this.$refs["tableFields"].getCategorizeData();
      // debugger;
      //主表时间处理
      this.formDataInfo.master.ppoDate = dayjs(_data.master.ppoDate).format(
        "YYYY-MM-DD HH:mm:ss"
      );
      //从表时间处理
      this.formDataInfo.purPaperPoItemSlaves = tableData;
      if (tableData.addList.length) {
        for (let i = 0; i < tableData.addList.length; i++) {
          if (!!_data.purPaperPoItemSlaves.addList[i].ppoDueDate) {
            _data.purPaperPoItemSlaves.addList[i].ppoDueDate = dayjs(
              _data.purPaperPoItemSlaves.addList[i].ppoDueDate
            ).format("YYYY-MM-DD HH:mm:ss");
            if (!!_data.purPaperPoItemSlaves.addList[i].breakupDate) {
              _data.purPaperPoItemSlaves.addList[i].breakupDate = dayjs(
                _data.purPaperPoItemSlaves.addList[i].breakupDate
              ).format("YYYY-MM-DD HH:mm:ss");
            }
          }
        }
        return this.formDataInfo;
      }
      if (tableData.updateList.length) {
        for (let i = 0; i < tableData.updateList.length; i++) {
          if (!!_data.purPaperPoItemSlaves.updateList[i].ppoDueDate) {
            _data.purPaperPoItemSlaves.updateList[i].ppoDueDate = dayjs(
              _data.purPaperPoItemSlaves.updateList[i].ppoDueDate
            ).format("YYYY-MM-DD HH:mm:ss");
            if (!!_data.purPaperPoItemSlaves.updateList[i].breakupDate) {
              _data.purPaperPoItemSlaves.updateList[i].breakupDate = dayjs(
                _data.purPaperPoItemSlaves.updateList[i].breakupDate
              ).format("YYYY-MM-DD HH:mm:ss");
            }
          }
        }
        return this.formDataInfo;
      }
    },
    // 重写父类 关闭窗口时 触发事件
    closeActionTigger() {
      //debugger
      // fix 清除上次的错误提示 formDataInfo 为表单ref名称
      this.$refs["formDataInfo"].resetFields();
      this.$refs["tableFields"].reset();
      this.formDataInfo = deepCopy(default_formDataInfo)
    }
  }
};
</script>

<style>
.cl-edit-purPaperPo .ivu-form-item {
  margin-bottom: 5px !important;
}
.cl-edit-purPaperPo .ivu-select-item {
  display: block;
}
.cl-edit-purPaperPo .right-text {
  width: 800px;
}
.cl-edit-purPaperPo .ivu-tabs-nav-right {
  margin-top: 10px;
  color: red;
}
</style>
