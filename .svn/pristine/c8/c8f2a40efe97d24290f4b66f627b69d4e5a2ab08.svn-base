<template>
  <div>
    <editWindow
      class="cl-edit-boxDeli"
      :title="actionLableName"
      v-model="showWindow"
      :fullscreen="false"
      width="80%"
      :loading="!isLoaddingDone"
      :spinLoaddingText="spinLoaddingText"
      @on-ok="formTableDataSubmit()"
      v-if="initData.columns"
    >
      <div
        @contextmenu.prevent
        ref="masterHeight"
        class="masterHeightClass"
        :style="{ height: getMasterheight() + '%' }"
      >
        <Form
          ref="formDataInfo"
          :show-message="true"
          :model="formDataInfo.master"
          :rules="masterRuleValidate"
          :label-width="80"
          :disabled="detailDisabled"
        >
          <Row>
            <Col span="8">
              <FormItem label="冲销单号" prop="woNo">
                <Input
                  :disabled="true"
                  v-model="formDataInfo.master.woNo"
                  maxlength="80"
                  placeholder="冲销单号"
                ></Input>
              </FormItem>
            </Col>
            <Col span="8">
              <FormItem label="冲销日期" prop="woDate">
                <DatePicker
                  @on-change="onChange_bdBackDate"
                  transfer
                  :value="formDataInfo.master.woDate"
                  type="datetime"
                  format="yyyy-MM-dd HH:mm:ss"
                ></DatePicker>
              </FormItem>
            </Col>
            <Col span="8">
              <FormItem label="客户编号" prop="custCode">
                <popup
                  :beforeOnFillValidator="custCodeChangeValidator"
                  v-model="formDataInfo.master.custCode"
                  field-name="custCode"
                  :disabled="disabledCustCode"
                  popup-name="BoxDeliCustomerSingBox"
                  :fill-model.sync="formDataInfo.master"
                  render-fields="custId,custCode,custName,coinId,areaIds,bdDeAddr,addrDetail,bdSaleId,bdSaleCode,bdSaleName,followerId,followerCode,followerName"
                  from-fields="id,cusCode,cusName,coinId,areaIds,areaNames,addrDetail,salerId,saleCode,saleName,followerId,followerCode,followerName"
                  :suffix="true"
                  :suffix-model="formDataInfo.master.custName"
                  @on-fill="custCodeOnFillEvent"
                />
              </FormItem>
            </Col>
            <Col span="8">
              <FormItem label="冲销金额" prop="woAmt">
                <Input
                  v-model="formDataInfo.master.woNo"
                  maxlength="80"
                  placeholder="冲销金额"
                ></Input>
              </FormItem>
            </Col>
            <Col span="16">
              <FormItem label="备注" prop="remark">
                <Input v-model="formDataInfo.master.remark" maxlength="80" placeholder="备注"></Input>
              </FormItem>
            </Col>
          </Row>
        </Form>
      </div>
      <div ref="otherHeight" class="otherHeightClass">
        <Tabs :animated="false" :value="currentTabName">
          <TabPane label="开票明细" name="writeoffin">
            <eTable
              ref="slave_list_table_edit"
              unqiue-mark="id"
              :height="360"
              :index-menu="true"
              :col-start="0"
              :row-init-data="initData.initData.accountwriteoffinFm"
              :data.sync="formDataInfo['writeOffInItems'].defaultList"
              :rules="slaveTableFieldsValidator"
              @row-delete="slave_list_table_edit_Delete"
              @tableColTiggerEventCall="tableColTiggerEventSlaveCall"
            >
              <template slot="head">
                <tr
                  v-for="(columnGroup,index) in initData.columns.accountwriteoffinFm.editGroups"
                  :key="index"
                >
                  <template v-for="(column,index2) in columnGroup">
                    <th
                      :key="index2"
                      :class="`ivu-table-column-${column.titleAlign}`"
                      :width="column.editWidth"
                      :colspan="column.colSpan"
                      :rowspan="column.rowSpan"
                      :columnKey="column.key"
                    >
                      <div class="ivu-table-cell">
                        <span class>{{column.title}}</span>
                      </div>
                    </th>
                  </template>
                </tr>
              </template>
              <template slot="body" slot-scope="{ row, index,valueChangeAssign}">
                  <td
                    v-for="(column,subIndex) in initData.columns.accountwriteoffinFm.editColumns"
                    :key="subIndex"
                    :class="`ivu-table-column-${column.align}`"
                    :width="column.editWidth"
                  >
                    <!-- 控件特殊处理 开票编号 -->
                      <Input
                        v-if="column.key =='icNo'"
                        v-model="row[column.key]"
                        :disabled="column.readOnly"
                        @input="value => {valueChangeAssign(value, index, row,column.key)}"
                        size="small"
                        :maxlength="20"
                      >
                        <Icon @click="openProductsList('icNo')" slot="suffix" type="md-add" />
                      </Input>
                      <!-- 单据类型 -->               
                      <optionSearch
                        v-else-if="column.key =='billType'"
                        v-model="row[column.key]"
                        :disabled="column.readOnly"
                        @onChange="optionOnChange"
                        :defaultItem="formDataInfo.billType"
                        :loaddingDataWhen="showWindow"
                        query="icInvoiceX"
                        formKey="billType"
                      />
                    <!-- 开单单位类型-->
                    <!-- <Select @on-change="value => {valueChangeAssign(value, index, row,column.key)}" :disabled="column.readOnly" v-else-if="column.key == 'unitType'" v-model="row[column.key]" transfer>
                      <Option v-for="(item,index) in bpUnitList" :key="index" :value="item.dicValue+''">{{item.dicLabel}}</Option>
                    </Select>-->
                    <!--其它 控件 :placeholder="column.title"-->
                   
                      <formControl
                        v-else
                        :align="column.align"
                        :control-type="column.controlType"
                        v-model="row[column.key]"
                        :disabled="column.readOnly"
                        @input="value => {valueChangeAssign(value, index, row,column.key)}"
                      ></formControl>
                    
                  </td>
                
              </template>
            </eTable>
          </TabPane>
          <TabPane label="收款明细" name="writeOffOut">
            <eTable
              ref="sub_list_table_edit"
              unqiue-mark="id"
              :height="360"
              :index-menu="true"
              :col-start="0"
              :row-init-data="initData.initData.accountwriteoffoutFm"
              :data.sync="formDataInfo['writeOffOutItems'].defaultList"
              :rules="subTableFieldsValidator"
              @row-delete="sub_list_table_edit_Delete"
              @tableColTiggerEventCall="tableColTiggerEventCall"
            >
              <template slot="head">
                <tr
                  v-for="(columnGroup,index) in initData.columns.accountwriteoffoutFm.editGroups"
                  :key="index"
                >
                  <template v-for="(column,index2) in columnGroup">
                    <th
                      :key="index2"
                      :class="`ivu-table-column-${column.titleAlign}`"
                      :width="column.editWidth"
                      :colspan="column.colSpan"
                      :rowspan="column.rowSpan"
                      :columnKey="column.key"
                    >
                      <div class="ivu-table-cell">
                        <span class>{{column.title}}</span>
                      </div>
                    </th>
                  </template>
                </tr>
              </template>
              <template slot="body" slot-scope="{ row, index,valueChangeAssign }">
                <template
                  v-for="(column,subIndex) in initData.columns.accountwriteoffoutFm.editColumns"
                >
                  <td
                    :key="subIndex"
                    :class="`ivu-table-column-${column.align}`"
                    :width="column.editWidth"
                  >
                    <!-- 控件特殊处理 收款编号 -->
                    <template v-if="column.key =='gNo'">
                      <Input
                        v-model="row[column.key]"
                        :disabled="column.readOnly"
                        @input="value => {valueChangeAssign(value, index, row,column.key)}"
                      >
                        <Icon @click="openProductsList('gNo')" slot="suffix" type="md-add" />
                      </Input>
                    </template>
                     <!-- 单据类型 -->                  
                      <optionSearch
                        v-else-if="column.key =='billType'"
                        v-model="row[column.key]"
                        :disabled="column.readOnly"
                        @onChange="optionOnChange"
                        :defaultItem="formDataInfo.billType"
                        :loaddingDataWhen="showWindow"
                        query="icInvoiceX"
                        formKey="billType"
                      />
                    <!-- 费用类型-->
                    <!-- <Select
                      @on-change="value => {valueChangeAssign(value, index, row,column.key)}"
                      :disabled="column.readOnly"
                      v-else-if="column.key == 'priceType'"
                      v-model="row[column.key]"
                      transfer
                    >
                      <Option
                        v-for="(item,index) in otherFee_priceTypeList"
                        :key="index"
                        :value="item.dicValue+''"
                      >{{item.dicLabel}}</Option>
                    </Select> -->
                    <template v-else>
                      <formControl
                        :align="column.align"
                        :control-type="column.controlType"
                        v-model="row[column.key]"
                        :disabled="column.readOnly"
                        @input="value => {valueChangeAssign(value, index, row,column.key)}"
                      ></formControl>
                    </template>
                  </td>
                </template>
              </template>
            </eTable>
          </TabPane>
        </Tabs>
      </div>
    </editWindow>
    <editForm
      @on-cancel="onCancelEditForm"
      @submit-success="onSubmitEditForm"
      :isLoaddingDone="salveWindow.isLoaddingDone"
      :action="salveWindow.action"
      v-model="salveWindow.showEditWindow"
      :searchParams="searchParams"
      custId:this.custId
    />
  </div>
</template>

<script>
/**
 * @desc edit-boxDeli 描述 纸箱出货
 * 所有重要 可以重用的方法 放在了基类,继承即可用重复使用 editBaseMixins,
 * 可以根据需求重写所需的方法:
 *
 * @params 参数
 *
 * @return 返回
 *
 * @author mingxing
 *
 * @created 2020/05/18
 */
import popup from "@/components/popup/popup";
import editWindow from "@/components/edit-window/edit-window";
import eTable from "@/components/e-table/e-table";
import request from "@/libs/request";
import editBaseMixins from "../../mixins/edit";
import optionSearch from "../../components/optionSearch";
import InputNumber from "@/components/input-number";
import dayjs from "dayjs";
import Sys from "@/api/sys";
import formControl from "@/components/form-control/form-control";
import editForm from "./edit-writeOffSlave";
import { deepCopy } from "view-design/src/utils/assist";
const default_formDataInfo = {
  // 主表 更改字段
  master: {
    areaIds: "",
    bdAcceptDate: "", //验收日期
    bdAcceptNo: "",
    bdBackDate: "", //签回日期
    bdBackOper: "",
    bdBackType: "",
    woDate: new Date(dayjs().format("YYYY-MM-DD HH:mm:ss")), //送货日期
    bdDecAmount: null,
    bdDecReason: "",
    woNo: "",
    bdSaleId: "",
    bdSaleName: "",
    carDriverCode: "",
    carDriverId: "",
    carDriverName: "",
    custCode: "",
    custId: "",
    custName: "",
    followCarId: "",
    followCarName: "",
    followerId: "",
    followerName: "",
    hasDelete: false,
    id: "",
    iisAudit: 0, //审核状态：0未审核1已审核
    loadorId: "",
    loadorName: "",
    remark: "",
    senderId: "",
    senderName: "",
    status: 1 //状态：0停用,1正常
  },
  writeOffInItems: {
    addList: [], // 添加列
    defaultList: [], // 默认列
    deleteList: [], // 删除列
    updateList: []
  },
  writeOffOutItems: {
    addList: [], // 添加列
    defaultList: [], // 默认列
    deleteList: [], // 删除列
    updateList: []
  }
};
export default {
  name: "edit-boxDeli",
  mixins: [editBaseMixins],
  components: {
    editWindow,
    optionSearch,
    eTable,
    InputNumber,
    popup,
    editForm,
    formControl
  },
  data() {
    return {
      currentTabName: "writeoffin",
      formName: "accountwriteoffFm", // 重写父类 查询表单名称
      custId: "",
      // 查询配置参数
      functionParams: {
        formInitPreName: "accountwriteoff", // 查询表格列头信息 前缀 例如:saleboxproductprice Fm/itemFm/mdataFm
        requestBaseUrl: "/account/writeOff", // 查询 表格行 数据 接口前缀地址
        uniqueId: "woId" // 查询详细的唯一ID,需要顶部查询中使用
      },
      actionSubtitle: "应收冲销", //重写父类 当前操作副标题
      salveWindow: {
        isLoaddingDone: false, // 窗口是否加载完成
        showEditWindow: false, // 是否显示edit-boxSalesOrderSlave 编辑窗口
        action: "add" // 当前操作功能 添加/编辑
      },
      formDataInfo: deepCopy(default_formDataInfo), // 防止添加和更新数据提交发生冲突
      masterRuleValidate: {
        // woDate: [
        //   {
        //     required: true,
        //     type: "date",
        //     message: "冲销日期不能为空",
        //     trigger: "blur"
        //   }
        // ],
        custCode: [
          { required: true, message: "客户编号不能为空", trigger: "blur" }
        ]
      }, // 纸箱出货 需要验证的数据
      slaveTableFieldsValidator: {}, // 纸箱出货明细 需要验证的数据
      subTableFieldsValidator: {}, // 出货其他费用 需要验证的数据
      masterHeight: 0, //表单高度
      otherHeight: 0, //剩余高度
      searchParams: {}, //传递查询参数
      feeTypeList: [], //费用类型列表
      bpUnitList: [], // 开单单位列表
      selectedIcNoList: [], //已经选择的工单列表ID
      otherFee_priceTypeList: [], //单价类型列表
      disabledCustCode: false // 是否禁用 客户编号
    };
  },
  watch: {
    showWindow: function(n, o) {
      //debugger
      if (n) {
        let _self = this;
        this.$nextTick(() => {
          this.registerEvent();
          this.pageResize();
        });
      }
    }
  },
  created() {
      
      },
  methods: {
    onChange_bdBackDate(item) {
      //debugger
      if (!_.isEmpty(item)) {
        this.formDataInfo.master.woDate = new Date(item);
      }
    },
    // 表格列值改变 回调事件处理event：{row, column, index, event,config}
    tableColTiggerEventCall(obj) {
      //debugger
      switch (obj.event) {
        case "unitPriceChangeEvent":
        case "qtyChangeEvent":
          let currentItem = this.formDataInfo["writeOffOutItems"].defaultList[
            obj.index
          ];
          let crrentPrice = 0;
          if (currentItem.unitPrice != null || currentItem.unitPrice != "") {
            crrentPrice = Number(currentItem.unitPrice);
          }
          let totalMoney =
            crrentPrice * Number(currentItem.qty == null ? 0 : currentItem.qty);
          // 触发修改值 直接修改原始数据 无效
          this.$refs["sub_list_table_edit"].set(
            {
              unitPrice: obj.row.unitPrice,
              qty: obj.row.qty,
              money: Number(totalMoney).toFixed(2)
            },
            obj.index
          );
          break;
        default:
          break;
      }
      this.sumMoneyAreaVolumeWeight();
    },
    // 表格列值改变 回调事件处理event：{row, column, index, event,config}
    tableColTiggerEventSlaveCall(obj) {
      //debugger
      let currentItem = this.formDataInfo["writeOffInItems"].defaultList[
        obj.index
      ];
      let totalMoney = 0,
        crrentPrice = 0;
      let biLessQty = Number(
        currentItem.biLessQty == null ? 0 : currentItem.biLessQty
      ); // 少数
      if (
        currentItem.biNewPrice == null ||
        currentItem.biNewPrice == "" ||
        currentItem.biNewPrice == "0" ||
        currentItem.biNewPrice == 0
      ) {
        crrentPrice = Number(currentItem.biPrice);
      } else {
        crrentPrice = Number(currentItem.biNewPrice);
      }
      switch (obj.event) {
        // 少数 变更
        case "biLessQtyChangeEvent":
          // 少数变更时,还需要触发变更(重量 体积 面积)
          let toFixedUnit = 2; // 保留小数位数

          let biWeight = Number(
            (leftQty * Number(currentItem.biSWeight)).toFixed(toFixedUnit)
          ); // 重量 = (送货数量-少数)*单重
          let biCube = Number(
            (leftQty * Number(currentItem.biSCube)).toFixed(toFixedUnit)
          ); // 体积 = (送货数量-少数)*单体积
          let biArea = Number(
            (leftQty * Number(currentItem.biSArea)).toFixed(toFixedUnit)
          ); // 面积 = (送货数量-少数)*单面积
          this.$refs["slave_list_table_edit"].set(
            {
              biWeight: Number(biWeight).toFixed(2),
              biCube: Number(biCube).toFixed(2),
              biArea: Number(biArea).toFixed(2)
            },
            obj.index
          );
          break;
        // 单价 变更
        case "biPriceChangeEvent":
          break;
        // 新单价 变更
        case "biNewPriceChangeEvent":
          break;
        default:
          break;
      }

      // 触发修改值 直接修改原始数据 无效
      this.$refs["slave_list_table_edit"].set(
        { biMoney: Number(totalMoney).toFixed(2) },
        obj.index
      );
      this.sumMoneyAreaVolumeWeight();
    },

    // 纸箱出货明细 删除数据 回调
    slave_list_table_edit_Delete(index) {
      //debugger
      // (重新计算体积/面积/金额等)
      this.sumMoneyAreaVolumeWeight();
    },
    // 出货其他费用 删除数据 回调
    sub_list_table_edit_Delete(index) {
      //debugger
      // (重新计算体积/面积/金额等)
      this.sumMoneyAreaVolumeWeight();
    },
    // 验证产品编号选择前先选择客户
    popupClickValidator() {
      //debugger
      if (
        !this.formDataInfo.master.custCode ||
        this.formDataInfo.master.custCode == ""
      ) {
        this.$Message.error("请先选择客户编号");
        return false;
      }
      return true;
    },
    custCodeChangeValidator() {
      //debugger
      let msg = "客户编号改变，送货明细也会跟着改变?";
      this.beforeOnFillValidator(msg);
    },
    // 更新选择客户,确认提交前验证
    beforeOnFillValidator(msg = "") {
      //debugger
      if (!!!msg) {
        msg = "送货地址改变，送货明细也会跟着改变?";
      }
      let _self = this;
      return new Promise((resolve, reject) => {
        if (this.action == "add") {
          reject();
          return;
        }
        this.$Modal.confirm({
          title: "提示",
          content: `${msg}`,
          onOk: () => {
            _self.$refs["slave_list_table_edit"].deleteAllData(); // 仅仅记录删除记录,
            _self.formDataInfo["writeOffInItems"].defaultList = [];
            _self.sumMoneyAreaVolumeWeight();
            resolve(true);
          },
          onCancel: () => {
            resolve(false);
          }
        });
      });
    },
    // 弹框==确认==回调事件,返回选择的数据
    onSubmitEditForm(dataList) {
      //debugger
      if (dataList && Array.isArray(dataList) && dataList.length > 0) {
        this.disabledCustCode = true; // 禁用客户选择
        dataList = JSON.parse(JSON.stringify(this.itemAdapter(dataList)));
        let writeOffInItems = this.formDataInfo["writeOffInItems"].defaultList;
        if (writeOffInItems[0].bcNo == "") {
          this.formDataInfo["writeOffInItems"].defaultList = dataList;
        } else {
          dataList.forEach(item => {
            if (!this.checkIsExistBy(item)) {
              this.formDataInfo["writeOffInItems"].defaultList.push(item);
            }
          });
          // 删除多余的空行
          this.formDataInfo["writeOffInItems"].defaultList.forEach(
            (item, index) => {
              if (item.icNo == "" || item.icNo == null) {
                this.formDataInfo["writeOffInItems"].defaultList.splice(
                  index,
                  1
                );
              }
            }
          );
        }
        this.sumMoneyAreaVolumeWeight();
      }
    },
    //实体转换,获取相同Key的value,个别不同的手动修改值
    itemAdapter(dataList) {
      //debugger
      let newDataList = [];
      dataList.forEach(oldItem => {
        let newItem = JSON.parse(
          JSON.stringify(
            this.initData.initData[
              `${this.functionParams.formInitPreName}itemFm`
            ]
          )
        );
        let newItemKeys = Object.keys(newItem);
        newItemKeys.forEach(itemKey => {
          newItem[itemKey] = null;
          if (oldItem[itemKey]) {
            newItem[itemKey] = oldItem[itemKey];
          }
        });

        newItem.bpDelQty = newItem.bpDelQty == null ? 0 : newItem.bpDelQty; //  已出货数 默认为0

        newItem.biPrepQty = oldItem.deliPrepQty; // 备品数
        //合计计算
        let toFixedUnit = 2;

        newDataList.push(newItem);
      });
      return newDataList;
    },
    // 检查列表数据是否已经存在,避免重复添加
    checkIsExistBy(item) {
      //debugger
      let currentList = this.formDataInfo["writeOffInItems"].defaultList;
      let isExistIndex = currentList.findIndex(subItem => {
        return (
          subItem.icNo == item.icNo &&
          subItem.bcNo == item.bcNo &&
          subItem.biProdNo == item.biProdNo &&
          subItem.bdStationName == item.bdStationName
        );
      });
      if (isExistIndex != -1) {
        return true;
      } else {
        return false;
      }
    },
    // 汇总 数量,金额, 面积,体积,重量
    sumMoneyAreaVolumeWeight() {
      //debugger
      let totalQuantity = 0,
        totalMoney = 0,
        totalArea = 0,
        totalVolume = 0,
        totalWeight = 0;
      this.formDataInfo["writeOffInItems"].defaultList.forEach(item => {
        let biLessQty = Number(item.biLessQty == null ? 0 : item.biLessQty);

        let biMoney = Number(item.biMoney == null ? 0 : item.biMoney);
        if (biMoney != "" && biMoney != null) {
          totalMoney += biMoney;
        }
        let biArea = Number(item.biArea == null ? 0 : item.biArea);
        if (biArea != "" && biArea != null) {
          totalArea += biArea;
        }
        let biCube = Number(item.biCube == null ? 0 : item.biCube);
        if (biCube != "" && biCube != null) {
          totalVolume += biCube;
        }
        let biWeight = Number(item.biWeight == null ? 0 : item.biWeight);
        if (biWeight != "" && biWeight != null) {
          totalWeight += biWeight;
        }
      });
      let toFixedUnit = 2;

      let otherTotalFee = this.sumOtherFee();
    },
    // 汇总出货其他费用
    sumOtherFee() {
      //debugger
      let totalMoney = 0;
      this.formDataInfo["writeOffOutItems"].defaultList.forEach(item => {
        if (!!item.icNo && !!item.feeName) {
          let money = Number(item.money == null ? 0 : item.money);
          if (money != "" && money != null) {
            totalMoney += money;
          }
        }
      });
      //合计计算
      let toFixedUnit = 2;
      return totalMoney.toFixed(toFixedUnit); // 金额
    },
    // 弹框==取消==回调事件
    onCancelEditForm() {},
    // 订单编号 点击事件,打开选择产品列表窗口
    openProductsList(mode) {
      //debugger
      this.selectedIcNoList = "";
      if (
        this.formDataInfo["writeOffInItems"] &&
        this.formDataInfo["writeOffInItems"].defaultList.length > 0
      ) {
        this.formDataInfo["writeOffInItems"].defaultList.forEach(item => {
          if (this.selectedIcNoList == "") {
            this.selectedIcNoList = item.icNo;
          } else {
            this.selectedIcNoList += "," + item.icNo;
          }
        });
      }
      this.searchParams = {
        custId: this.formDataInfo.master.custId, // 客户id
        areaIds: this.formDataInfo.master.areaIds, // 详细地址
        icNoList: this.selectedIcNoList ,//(过滤已选的工单号集合,多个都好隔开)
        mode:mode, //开票明细或者收款明细
      };
      if (this.popupClickValidator()) {
        this.salveWindow.showEditWindow = true;
      }
    },
    custCodeOnFillEvent() {
      //debugger
      console.log(this.initData.initData.writeoffinboxdataFm)
      this.formDataInfo['writeOffInItems'].defaultList
      this.initData.columns.accountwriteoffinFm.editGroups
      this.custId = this.formDataInfo.master.custId
    },
    // 排除不需要显示的字段
    // excludeFiled(type, key) {
    //   let exListItemFm = ["bpCArtId", "bpCBoxId", "bdStationId"];
    //   let exListOtherfeeFm = [];
    //   let exList = [];
    //   switch (type) {
    //     case "itemFm":
    //       exList = exListItemFm;
    //       break;
    //     default:
    //       exList = exListOtherfeeFm;
    //       break;
    //   }
    //   if (exList.includes(key)) {
    //     return false;
    //   } else {
    //     return true;
    //   }
    // },
    // 注册窗口事件
    registerEvent() {
      let _self = this; //赋值vue的this
      window.onresize = () => {
        //调用methods中的事件
        _self.pageResize();
      };
    },
    // 触发窗口大小变化事件
    pageResize() {
      this.$nextTick(() => {
        this.getTabWindowHeight();
      });
    },
    // 获取当前TAB标签的实际高度
    getTabWindowHeight() {
      this.getMasterheight();
      // 因为使用V-SHOW 隐藏,实际还会占用高度,所以切换时,设置为0 或使用V-IF 可以不用那么麻烦,但性能较低
      if (!!this.$refs["masterHeight"]) {
        this.masterHeight = this.$refs["masterHeight"].offsetHeight;
        this.otherHeight = this.$refs["otherHeight"].offsetHeight;
      }
    },
    getMasterheight() {
      return 35;
    },
    //判断数据是新增还是修改
    formDetailDataCall() {
      //debugger
      if (this.action != "add") {
      }
    },
    // 重写父类 关闭窗口时 触发事件
    closeActionTigger() {
      //debugger
      // fix 清除上次的错误提示 formDataInfo 为表单ref名称
      this.$refs["formDataInfo"].resetFields();
      this.$refs["slave_list_table_edit"].reset();
      this.disabledCustCode = false;
      this.formDataInfo = deepCopy(default_formDataInfo);
    },
    // 重写父类,添加时候,清空数据
    // HandleFormDataInfo() {
    //   this.formDataInfo = deepCopy(default_formDataInfo)
    // },
    // 重写父类,修改提交数据
    resetformDataInfo() {
      //debugger
      let writeOffInItems = this.$refs[
        "slave_list_table_edit"
      ].getCategorizeData();
      let writeOffOutItems = this.$refs[
        "sub_list_table_edit"
      ].getCategorizeData();
      this.formDataInfo["writeOffInItems"] = writeOffInItems;
      this.formDataInfo["writeOffOutItems"] = writeOffOutItems;
      if (this.formDataInfo.master.woDate != "") {
        this.formDataInfo.master.woDate = dayjs(
          this.formDataInfo.master.woDate
        ).format("YYYY-MM-DD HH:mm:ss");
      }
      return this.formDataInfo;
    },

    // 提交主从表数据
    formTableDataSubmit() {
      //debugger
      // 防止出错,提交前再次 (重新计算体积/面积/金额等)
      // this.sumMoneyAreaVolumeWeight();
      this.$refs["formDataInfo"].validate(valid => {
        if (!valid) {
          return;
        }
        let submitData = this.resetformDataInfo();
        request
          .post(
            `${this.functionParams.requestBaseUrl}/saveOrUpdate`,
            submitData
          )
          .then(res => {
            this.showWindow = false; // 关闭当前编辑页面
            this.$Message.success("执行成功");
            this.$emit("submit-success"); // 刷新主页面数据
          });
      });
    },
    
  }
};
</script>

<style>
.masterHeightClass {
  height: 35%;
  overflow: auto;
}
.otherHeightClass {
  height: 65%;
  overflow: hidden;
}
.cl-edit-boxDeli .ivu-form-item-label {
  text-align: right;
  vertical-align: middle;
  float: left;
  font-size: 14px;
  color: #515a6e;
  line-height: 17px;
  padding: 7px 12px 10px 0;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}
</style>
