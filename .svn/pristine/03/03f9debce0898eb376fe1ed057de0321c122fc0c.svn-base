<template>
  <Modal
      :z-index="2"
      :styles="{top: fullscreen?'0':'45px'}"
      v-model="show"
      :mask-closable="maskClosable"
      class="edit-window"
      :scrollable="scrollable"
      :fullscreen="fullscreen"
      :title="title"
      @on-ok="onOk"
      @on-cancel="onCancel"
      :width="width">
      <p slot="header">
      <Icon type="md-help-circle" style="color:#2D8CF0" @click="IconClick" size='18'/>
      <span style="margin-left:10px">{{title}}</span>
    </p>
    <div>
       <Spin size="large" fix v-if="loading"></Spin>
    </div>
    <slot :detailDisabled="detailDisabled" ref="windowContent"></slot>
    <div slot="footer">
      <Button @click="onCancel">取消</Button>
      <Button v-if="this.$parent.detailDisabled" type="error" @click="detailToUpdate()" :disabled="!this.$parent.detailConvertUpdate">编辑</Button>
      <Button v-show="showOkBtn" v-else :loading="loaddingBtn" type="primary" @click="onOk">确定</Button>
    </div>
  </Modal>
</template>

<script>
  export default {
    data() {
      return {
        show: false,
        html: '',
        modal9: false
      }
    },
    props: {
      // 是否显示确认按钮
      showOkBtn:{
        type: Boolean,
        default: true
      },
      spinLoaddingText:{
          type: String,
          default: ''
      },
      loading:{
        type: Boolean,
        default: false
      },
      loaddingBtn:{
          type: Boolean,
          default: false
      },
      maskClosable: {
        type: Boolean,
        default: false
      },
      scrollable: {
        type: Boolean,
        default: true
      },
      fullscreen: {
        type: Boolean,
        default: true
      },
      title: {
        type: String,
        default: '窗口'
      },
      value: {
        type: Boolean,
        default: false
      },
      width: {
        type: String | Number,
        default: 'auto'
      },
      lazyTime: {
        required: false,
        default: 0
      },
      detailDisabled:{//详情禁用控件
        type:Boolean,
        default:false
      }
    },
    watch: {
      show(n, o) {
        this.$emit('input', n);
      },
      value(n, o) {
       // debugger
        this.show = n;
      },
      detailDisabled(n,o){
         //debugger;
       // this.disabledUpdate = n;
      }
    },
    methods: {
      IconClick(){
        //debugger
         window.open('','','width=500,height=500,left=100%,top=100%');
        //  myWindow.focus();
      },
      onOk() {
        this.$emit('on-ok');
      },
      onCancel() {
        this.show = false;
        this.disabledUpdate = true;
        this.$emit('on-cancel');
      },detailToUpdate(){
        if(this.$parent.detailConvertUpdate){
          this.$parent.detailDisabled = false;
        }else{
          this.$Message.warning('数据已被禁用不能编辑');
        }
      }
    },
    created() {
      //debugger;
      //this.detailDisabled = this.$parent.detailDisabled;
    }
  }
</script>

<style>

.edit-window .ivu-modal-body{
  padding: 10px 20px 0 10px !important;
}
.edit-window .ivu-modal-header{
  background-color: #fcfcfc;
}

</style>
