<template>
  <div>
    <editWindow
      class="cl-edit-window"
      :title="actionLableName"
      v-model="showWindow"
      :fullscreen="true"
      width="66%"
      :loading="!isLoaddingDone"
      :spinLoaddingText="spinLoaddingText"
      @on-ok="formTableDataSubmit()"
       v-if="initData.columns"
    >
      <Form
        ref="formDataInfo"
        :show-message="false"
        :model="formDataInfo.master"
        :rules="ruleValidate"
        :label-width="100"
        label-colon
      >
      <Row>
        <Col span="8" v-for="(columns,index) in initData.columns[`${formInitPreName}Fm`].editColumns" :key="index">
          <FormItem :label="columns.title" :prop="columns.key">
             <formControl  :control-type="columns.controlType" v-model="formDataInfo.master[columns.key]" :disabled="columns.readOnly"></formControl>
          </FormItem>
        </Col>
      </Row>

      </Form>
     
     <Tabs>
        <TabPane :label="initData.listView[`${formInitPreName}itemFm`].tableDesc" name="name1">
          <eTable
            ref="slave_list_table_edit"
            unqiue-mark="id"
            :height="260"
            :index-menu="true"
            :col-start="0"
            :width="200"
            :row-init-data="initData.initData[`${formInitPreName}itemFm`]"
            :data.sync="slavesForm.masterList"
            :rules="tableFieldsValidator"
            @row-click="slave_list_table_editRowClick"
          >
            <template slot="head">
              <tr v-for="(columnGroup,index) in initData.columns[`${formInitPreName}itemFm`].editGroups" :key="index">
                <th class="ivu-table-column-left"
                v-for="(column,index2) in columnGroup" :key="index2"
                :width="column.width"
                :colspan="column.colSpan"
                :rowspan="column.rowSpan"
                style="text-align:center;"
                >
                  <div class="ivu-table-cell">
                    <span class="">{{column.title}}</span>
                  </div>
                </th>

              </tr>
            </template>
            <template
              slot="body"
              slot-scope="{ row, index, valueChangeAssign }"
            >
              <td class="ivu-table-column-left"
               v-for="(column,columnIndex) in initData.columns[`${formInitPreName}itemFm`].editColumns"
               :key="columnIndex"
               :width="column.width">
                <popup v-if="column.key == 'bpNo'"
                v-model="row[column.key]"
                field-name="bpNo"
                :disabled="false"
                popup-name="ProductMultiBox"
                :fill-model.sync="slavesForm.masterList"
                render-fields="productId,bpNo,bpName"
                from-fields="productId,bpNo,bpName"
                :init-data="initData.initData[`${formInitPreName}itemFm`]"
                :suffix="false"
                :index="index"
                :query-params="{'bpNo$notIn':popUpExcludeParamsList,custId:formDataInfo.master.custId}"
                @input="value => {
                               valueChangeAssign(value, index, row, 'bpNo');
                             }
                       "
                 @on-fill="fillSlaveDataIntoSubTable"
                ></popup>
                <formControl v-else :control-type="column.controlType"
                v-model="row[column.key]" :disabled="column.readOnly"
                @input="value => {
                               valueChangeAssign(value, index, row,column.key);
                             }
                       "
                ></formControl>
              </td>
            </template>
          </eTable>
        </TabPane>
      </Tabs>

      <Tabs>
        <TabPane :label="initData.listView[`${formInitPreName}mdataFm`].tableDesc" name="name1">
          <eTable
            ref="sub_list_table_edit"
            unqiue-mark="id"
            :height="260"
            :index-menu="true"
            :col-start="0"
            :width="200"
            :row-init-data="initData.initData[`${formInitPreName}mdataFm`]"
            :data="slavesForm.SubList"
            :rules="tableFieldsValidator"
          >
            <template slot="head">
              <tr v-for="(columnGroup,index) in initData.columns[`${formInitPreName}mdataFm`].editGroups" :key="index">
                <th class="ivu-table-column-left"
                v-for="(column,index2) in columnGroup" :key="index2"
                :width="column.width"
                :colspan="column.colSpan"
                :rowspan="column.rowSpan"
                style="text-align:center;"
                >
                  <div class="ivu-table-cell">
                    <span class="">{{column.title}}</span>
                  </div>
                </th>

              </tr>
            </template>
            <template
              slot="body"
              slot-scope="{ row, index, valueChangeAssign }"
            >
              <td class="ivu-table-column-left"
               v-for="(column,index) in initData.columns[`${formInitPreName}mdataFm`].editColumns"
               :key="index"
               :width="column.width">
                <formControl :disabled="true" :control-type="column.controlType" v-model="row[column.key]"></formControl>
              </td>
            </template>
          </eTable>
        </TabPane>
      </Tabs>

    </editWindow>
  </div>
</template>

<script>
/**
 * @desc edit-dept 描述
 * 所有重要 可以重用的方法 放在了基类,继承即可用重复使用 dyBaseMixins,
 * 可以根据需求重写所需的方法:
 *
 * @params 参数
 *
 * @return 返回
 *
 * @author Andy Huang
 *
 * @created 2019/11/20 17:07:54
 */
import editWindow from "@/components/edit-window/edit-window";
// import Form from '@/components/form/form'
import eTable from "@/components/e-table/e-table";
import request from "@/libs/request";
import editBaseMixins from "../../mixins/edit";
import formControl from '@/components/form-control/form-control'
import popup from "@/components/popup/popup";
export default {
  name: "edit-warehouse",
  mixins: [editBaseMixins],
  components: {
    editWindow,
    // Form,
    eTable,
    formControl,
    popup
  },
  data() {
    return {
      actionSubtitle:'纸箱产品报价', // 当前操作副标题
      formInitPreName:'saleboxproductprice',//初始化信息查询 前缀 字段
      formName:'saleboxproductpriceFm', // 初始化信息查询 表单字段
      requestBaseUrl: "/sale/boxProductPrice", // 请求 查询 操作的基础路径
      formDataInfo:{ // 主表单信息
        master:{},
      },
      ruleValidate:{},// 需要验证的数据
      tableFieldsValidator:{}, // 需要验证的数据表格
      slavesForm:{ // 子表单
        name:"saleBoxProductPriceItems",// 子表单名称
        ItemFmRowIndex:0,
        masterList:[],
        SubList:[],
        SubItems:{}
       },
    };
  },
watch:{
  // 第一步执行 获取到 master 数据
  initData:{
    handler(n,o){
      if(n.initData){
        this.formDataInfo.master = n.initData.master;
      }
    },
    deep:true
  }
},
computed:{
    popUpExcludeParamsList(){
    //获取产品编号	列表，转换为 "",""格式，用于弹出框排除数据
    let temp = [];
    this.slavesForm.masterList.forEach((item,index)=>{
      if(item.master && item.master.bpNo !=''){ // 注意: 
        temp.push(item.master.bpNo);  // 注意: 
      }
     });
     return temp.toString();
  }
},
  methods: {
     // 重写父类,添加时候,清空数据
    HandleFormDataInfo(){
    // this.formDataInfo=Object.assign({},default_formDataInfo)
    },
    // 重写父类,修改提交数据
    resetformDataInfo() {
      let data = {
        master:this.formDataInfo.master
      }
      let slavesItem = [];
      let slaveTableDataList = this.$refs['slave_list_table_edit'].getTableEditData();
      //debugger
      slaveTableDataList.forEach((item,index) => {
        let sub = [];
        if(!item.hasDelete){
          sub = this.slavesForm.SubItems[item.bpNo]==null?[]:this.slavesForm.SubItems[item.bpNo] // 注意: 
        }
        slavesItem.push({
          master:item,
          "saleBoxProductPriceSubs":sub  // 注意: 此字段需要修改 saleBoxProductPriceSubs
        })
      })
      data[`${this.slavesForm.name}`] = slavesItem;
      return data;
    },
    fillSlaveDataIntoSubTable(data){
      debugger
      //填充第三层表的数据，根据第二层表中的产品编号（productId）和产品类型
      //去查询第三层的数据
      data.forEach((item)=>{
        let _self = this;
        request.post(`${this.requestBaseUrl}/sub/getProductInfo`,{},{
            custId:item.orignData.custId,
            productId:item.orignData.productId,
            productNo:item.data.bpNo, // 需要修改的字段
            type:item.orignData.type  // 需要修改的字段
          }).then(res=>{
          if(_self.slavesForm.ItemFmRowIndex == item.index){
            _self.slavesForm.SubList = res;
          }
          //产品编号：
          _self.slavesForm.SubItems[item.data.bpNo] = res; // 需要修改的字段 item.data.bpNo
        }).catch(err=>{
          //console.log(err);
          _self.$Message.error(`产品编号${item.data.bpNo}获取套件失败`); // 需要修改的字段 item.data.bpNo
        })
      })
    },
    // 子表点击事件 显示第三层表的数据
    slave_list_table_editRowClick(index){
      this.slavesForm.ItemFmRowIndex = index;
      this.slavesForm.SubList = [];
      this.slavesForm.SubList = this.slavesForm.SubItems[this.slavesForm.masterList[index].bpNo]; // 需要修改的字段 this.slavesForm.masterList[index].bpNo
    },
    // 重写父类 数据初始化后 自动调用
    formDetailDataCall(){
      debugger
      //数据初始化，把第二层表的master组装成一个List结构
       this.slavesForm.masterList = [];
       let _self = this
        this.formDataInfo[`${this.slavesForm.name}`].forEach((item,index)=>{
          _self.slavesForm.masterList.push(item.master);
          _self.slavesForm.SubItems[item.master.bpNo] = item[`saleBoxProductPriceSubs`];
        });
    },
    // 重写父类 提交数据 三层表
    formTableDataSubmit(){
      let data = this.resetformDataInfo();
      this.$refs['formDataInfo'].validate(valid => {
        if (!valid) {
          return
        }
        let result = this.$refs['slave_list_table_edit'].validate()
        if (result) {
          return
        }
        request.post(`${this.requestBaseUrl}/saveOrUpdate`,data).then(res=>{
          this.$Message.success('执行成功');
        }).catch(err=>{
          this.$Message.error('执行失败');
        })
      })
    }
  }
};
</script>

<style>
.cl-edit-window .ivu-form-item {
  margin-bottom: 5px !important;
}

.cl-edit-window .ivu-select-item {
  display: block;
}
</style>
